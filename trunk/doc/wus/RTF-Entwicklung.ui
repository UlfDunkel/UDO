!subsubnode Weitere Sonderzeichen

In RTF können weitere Sonderzeichen über Unicode verwirklicht werden.

!smallskip
!hline
!subsubnode Farben
Für ""schönere"" Tabellen etc. sollte evtl. eine größere (!V)\colortbl(!v)
eingebunden werden.

!smallskip
!hline
!subsubnode Horizontale Linie
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb3] [Leicht])
Bisher wurde das Kommando (!V)!/hline(!v) bei der Ausgabe nach RTF
nicht beachtet. Dies läßt sich aber sehr einfach umsetzen mit
folgendem Codeschnipsel:
!begin_verbatim
{\*\do\dobxcolumn\dopypara\dodhgt8192\dpline
 \dpptx0\dppty0\dpptx9638\dppty0
 \dpx0\dpy-150\dpxsize9638\dpysize0
 \dplinew15\dplinecor0\dplinecog0\dplinecb0}
!end_verbatim
Dieses Beispiel zeigt eine schwarze durchgezogene Linie für ein
Layout im DIN~A4-Format. Für andere Formate müsste entsprechend
die Länge der Linie ((!T)\dpxsize(!t) und (!T)\dpptxN(!t))
angepasst werden. (!nl)
Papyrus unterstützt diese RTF-Kommandos leider nicht.



!smallskip
!hline
!subsubnode Änderungskennzeichnung
(!img [rot3] [Sehr wichtig])~~|~~(!img [gelb3] [Leicht])
Zum Anzeigen von Änderungen ist folgender Eintrag im Kopfbereich der
RTF-Datei nötig:
!begin_verbatim
{\*\revtbl{Author1;Author2;...}}
\revprot\revision
!end_verbatim
Standardmäßig sollte ""Author1"" folgenden Inhalt haben: (!nl)
(!B)UDO Release 7 Patchlevel x(!b)

(!V)\revision(!v) schaltet die Änderungsmakierung an. (!nl)
(!V)\revprot(!v) schützt das Dokument davor, das das ""Revision marking""
abgeschaltet wird.

!smallskip
!hline
!subsubnode Papierformat (RTF)
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb2] [Schwierig])
Unterstützte Formate
!begin_itemize !short
!item DIN A3 (Portrait/Landscape)
!item DIN A4 (Portrait/Landscape)
!item DIN A5 (Portrait/Landscape)
!item Gerade/Ungerade Seiten
!end_itemize

Vorschlag für den (!nolink [UDO-Code])
!begin_verbatim
!doclayout [rtf] [paper] A3PORTRAIT
!doclayout [rtf] [paper] A3LANDSCAPE
!doclayout [rtf] [paper] A4PORTRAIT
!doclayout [rtf] [paper] A4LANDSCAPE
!doclayout [rtf] [paper] A5PORTRAIT
!doclayout [rtf] [paper] A5LANDSCAPE
!end_verbatim

Umsetzung für RTF:
!begin_itemize
!item DIN A3 Portrait
!begin_verbatim
\paperw16840\paperh23814
\margl1418\margr1418\margt1418\margb1134 
!end_verbatim

!item DIN A3 Landscape
!begin_verbatim
\paperw16840\paperh23814
\margl1418\margr1418\margt1418\margb1134
\sectd\lndscpsxn
!end_verbatim

#(!xlink [Testdatei] [A3quer.rtf]) zum A3-Querformat

!item DIN A5 Portrait
!begin_verbatim
\paperw8392\paperh11907
!end_verbatim

#(!xlink [Testdatei] [A5portrait.rtf]) zum A5-Format

!item DIN A5 Landscape
!begin_verbatim
\paperw11907\paperh8392
\sectd\lndscpsxn
!end_verbatim
!end_itemize

!smallskip
!hline
!label RTF-Spalten
!subsubnode Spalten in RTF
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb2] [Schwierig])
Ein Dokument mit 2 Spalten über das ganze Dokument würde folgendermaßen
angegeben.
!begin_verbatim
!doclayout [rtf] [column] 2
!doclayout [rtf] [colwidth] 709
!doclayout [rtf] [colline] true
!end_verbatim
...ergibt für RTF
!begin_verbatim
\sectd\cols2\colsx709\linebetcol
!end_verbatim

#(!xlink [Testdatei] [Spalten2.rtf]) für ein durchgehendes
#2-spaltiges Dokument.

!medskip
Ein Dokument mit verschiedenen Sektionen (erste und letzte Seite
einspaltig, alle anderen Seiten zweispaltig) würde so aussehen:
!begin_verbatim
...
!newsect
!sectlayout [rtf] [column] 2
!sectlayout [rtf] [colwidth] 567
!sectlayout [rtf] [colline] true
...
!end_verbatim
oder
!begin_verbatim
...
!newsect
!sectlayout [2,567,true]
...
!end_verbatim
...ergibt für RTF
!begin_verbatim
\sectd\cols1\colsx567
...
\sectd\sect\cols2\linebetcol
...
\sect\sectd
!end_verbatim
!smallskip
Dokumente mit verschiedenen Sektionen kann Papyrus nicht (Falls
doch, möge man mich berichtigen).

(!xlink [Testdatei] [Spalten1-2-1.rtf]) für ein Dokument mit
mehreren Sektionen (einspaltig -- zweispaltig -- einspaltig).

!smallskip
!hline
!subsubnode Kopf- und Fußzeilen
(!img [rot3] [Sehr wichtig])~~|~~(!img [gelb2] [Schwierig])
Richtige Kopf- und Fußzeilen für RTF wie bei !use_raw_header

!smallskip
!hline
!subsubnode Bilder
(!img [rot3] [Sehr wichtig])~~|~~(!img [gelb1] [Sehr schwierig])
(!B)Zeilenbilder(!b) können wie die normalen Bilder mitten im Text
eingebunden werden. Dies empfiehlt sich jedoch nur für Bilder, die
ungefähr so hoch wie die Zeile sind.

Um Bilder einzubinden, die vom Text umflossen werden sollen, ist es nötig
Tags aus der RTF-Spezifikation 1.5 zu benutzen (Shapes). Diese Variante
läßt sich dann auch für jede andere Art von Objekten in RTF benutzen.

Ein Bild würde folgendermaßen eingebunden:
!begin_verbatim
{\shp{\*\shpinst\shpleftN\shptopN\shprightN\shpbottomN
 \shpfhdrN\
 \shpbxcolumn\shpbypara
 \shpwrN\shpwrkN
 \shpfblwtextN\shpzN\shplidN
 {\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sv fFlipV}{\sv 0}}
 {\sp{\sn pib}{\sv {\pict\...
 
 }}}
 {\sp{\sn pibName}{\sv }}
 {\sp{\sn pibFlags}{\sv 2}}
 {\sp{\sn pictureTransparent}{\sv 268435473}}
 {\sp{\sn lineColor}{\sv 255}}{\sp{\sn fLine}{\sv 1}}}
 {\shprslt
 ...
 }}
!end_verbatim
Der Bereich mit (!V)\shprslt(!v) wird nicht unbedingt gebraucht.

Es sollten auch Metafiles (WMF und EMF) eingebunden werden können. Die
Bilder sollten sich skalieren lassen.

!begin_ignore
!smallskip
!hline
!subsubnode Fuß- und Endnoten
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb2] [Schwierig])
Diese ist eine Fußnote(!N)Warum keine Endnote?(!n) und keine Endnote.
!end_ignore

!smallskip
!hline
!subsubnode Ausgabe von Bilddateinamen
(!img [rot2] [Wichtig])~~|~~(!img [gelb3] [Leicht])
Ausgabe von Bilddateinamen (optional), damit diese ggf. von Hand
eingefügt werden können. (!nl)
(!U)Hintergrund:(!u) Wir verwenden die RTF- und ASCII-Ausgabe, um unsere
Calamus-Handbücher aus UDO-Code zu erzeugen, indem wir die Texte nur
noch in UDo-Dateien pflegen und dann ausgeben.
Die Bilder werden momentan noch "von Hand" dann in den 
Calamus-Dokumenten plaziert.


Beispiel:
!begin_verbatim
(im Definitions-Teil:)
!image_path_output[asc,rtf]

!ifdest[asc,rtf]
!image ..\..\foo
!image images\foo2
!endif
!end_verbatim

Beispiel für den zu erzeugenden Ausgabe-Text in ASCII und RTF:
!begin_verbatim
[IMAGE ..\..\foo]
[IMAGE images\foo2]
!end_verbatim

!smallskip
!hline
!label Title-RTF
!subsubnode Titel für Datei (RTF)
(!img [rot2] [Wichtig])~~|~~(!img [gelb3] [Leicht])
Ähnlich dem Title-Tag in HTML (<title>) kann man den RTF-Dateien
einen Titel mitgeben, der statt des Dateinamens angezeigt wird.
Da das in PDF-Dateien auch geht, schlage ich ein allgemeines Kommando
zum Ersatz für (!T)!/html_title(!t) vor: (!nl)
!/docinfo [<kuerzel>] [<title>] foo

In RTF wird es folgendermaßen umgesetzt:
!begin_verbatim
!docinfo [rtf] [title] Ein Buch über UDO
!end_verbatim
ergibt
!begin_verbatim
{\windowcaption Ein Buch \'FCber UDO}
!end_verbatim

(!U)Achtung:(!u) Da Papyrus über (!T)\windowcaption(!t) stolpert, muß
es hinter das erste (!V)\sectd(!v) gesetzt werden, Word kommt damit
trotzdem zurecht.

!smallskip
!hline
!subsubnode Inhaltsverzeichnis (RTF)
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb2] [Schwierig])
Für Word besteht die Möglichkeit das Inhaltsverzeichnis über ein
Feld vor zu definieren. Wahrscheinlich ist es spezifisch für Word,
Papyrus kann es nicht, wie es bei anderen Text!-verar!-beitungen
aussieht, weiß ich nicht.

Die Umsetzung sieht folgendermaßen aus:
!begin_verbatim
{\field{\*\fldinst {TOC \\t "Node1;1;Node2;2;Node3;3;Node4;4" }}{\fldrslt {Bitte erneuern!}}}
!end_verbatim
Auf die gleiche Weise läßt sich wahrscheinlich auch ein Indexverzeichnis
erstellen.

Wenn die Nodes, Subnodes, etc. mit dem Tag (!V)\tc(!v) gekennzeichnet
sind, kann Papyrus aus den Einträgen ein Inhalts!-verzeichnis mit
Seiten!-zahlen erstellen und die Kapitel selbständig im Text numerieren.
Word führt die automatische Nummerierung nicht durch, erkennt jedoch
solche Absätze als Überschriften.


!medskip
!hline
!subsubnode Ungeordnet (RTF)
!begin_itemize
!item Umsetzung von (!V)!/programmimage(!v) und (!V)!/authorimage(!v)
      für RTF.
!item Absatzkontrolle für das gesamte Dokument einschalten durch
      (!V)\widowctrl(!v) im Kopf der RTF-Datei (!nl)
      (!B)Erledigt in r6pl15.(!b) (!nl)
      Später kann man noch über (!V)\nowidctlpar(!v) und
      (!V)\widctlpar(!v) nachdenken (Norbert Hanz)
!item Bei description-Umgebungen sollte hinter das Item ein Linefeed,
      damit die (!nolink [Ausgabe]) genauso aussieht wie bei HTML
      (Norbert Hanz)
!item Überschriften an den folgenden Absatz binden oder an die
      rangniedrigere Überschrift (Norbert Hanz)
!item Titelzeile einer Tabelle festlegen können (Norbert Hanz)
!item (!V)(!/img [] [])(!v) auch für RTF ~~(Thomas Kerkloh) (!nl)
      (!B)Achtung bei absoluten Pfaden:(!b) UDO macht alles richtig
      gibt aber eine (unsinnige) Fehlermeldung aus
!item Freie Wahl ob Fußnoten oder Endnoten ~~(Norbert Hanz)
!item eingebette Bilder ~~(Thomas Kerkloh)
!end_itemize

!medskip
!hline
!subsubnode Bugs (RTF)
!begin_itemize
!item Fehlerhafte Ausgabe, wenn Anführungszeichen innerhalb von
      (!V)(!/xlink ...)(!v) oder (!V)(!/url ...)(!v) benutzt wird.
!item Bei der Benutzung von Anführungszeichen innerhalb von
      (!V)(!/url [""...""] [...])(!v) wird das führende Anführungs!-zeichen
      und Teile des Textes verschluckt.
!item Festes Leerzeichen in (!V)(!/link [...!~...] [...])(!v) wird bei der
      RTF-Ausgabe zu (!V)\\!~(!v) ausgegeben, also zu (!V)\!~(!v) umgesetzt.
!item Optionale Trennzeichen (!V)!/-(!v) wird bei der RTF-Ausgabe innerhalb
      von Tabellen nicht umgesetzt.
!end_itemize 