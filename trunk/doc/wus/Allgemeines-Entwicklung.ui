!subsubnode Neue Tabellenstruktur
!html_name E-Tabell
(!img [rot3] [Sehr wichtig])~~|~~(!img [gelb1] [sehr schwierig])
!include Tabellen-Entwicklung.ui

!smallskip
!hline
!newpage
!subsubnode Mehrsprachigkeit
!html_name E-Proj
(!img [rot3] [sehr wichtig])~~|~~(!img [gelb2] [schwierig])
!include Projekt-Entwicklung.ui

!smallskip
!newpage
!hline
!subsubnode Hierarchiestufen (Ulf Dunkel)
(!img [rot2] [wichtig])~~|~~(!img [gelb3] [leicht]) (!nl)
Erweiterung der Hierarchiestufen auf 7 Stufen, damit Vorschlag für
folgende Kommandos:
!begin_itemize !short
!item !/subsubsubsubnode
!item !/ssssn
!item !/ssssn*
!item !/subsubsubsubsubnode
!item !/sssssn
!item !/sssssn*
!item !/subsubsubsubsubsubnode
!item !/ssssssn
!item !/ssssssn*
!end_itemize
Da sowohl (!TeX)/(!LaTeX) als auch HTML nur 6~Hierarchiestufen anbieten,
wäre es vielleicht von Vorteil nur sechs Stufen festzulegen.

!smallskip
!hline
!subsubnode Mehrzeilige Makros bzw. Defines (Martin Elsässer, Norbert Hanz)
(!img [rot2] [wichtig])~~|~~(!img [gelb2] [schwierig]) (!nl)
Damit mehrzeilige Makros von UDO erkannt werden können, muß das Ende
des Makros eindeutig identifizierbar sein. Aus diesem Grund folgender
Vorschlag:
!begin_verbatim
 !\
 
 !macro UOS UDO-Open-Source (Die Weiterentwicklung von UDO als !\
 Open-Source-Projekt)
!end_verbatim
am Ende einer Zeile, wenn eine weitere Zeile folgt.

!smallskip
!hline
!subsubnode Mehrzeilige Überschriften (Axel Mohr)
(!img [rot2] [wichtig])~~|~~(!img [gelb2] [schwierig]) (!nl)
Damit mehrzeilige Makros von UDO erkannt werden können, muß das Ende
des Makros eindeutig identifizierbar sein. Aus diesem Grund folgender
Vorschlag:
!begin_verbatim
 !\
 
 !/subnode Dies ist eine lange, sehr lange, überlange Überschrift !\
 die in dieser Zeile weitergeht
!end_verbatim
am Ende einer Zeile, wenn eine weitere Zeile folgt.

!smallskip
!hline
!label Label
!subsubnode Setzen von Sprungzielen
(!img [rot1] [Wenig wichtig])~~|~~(!img [gelb2] [schwierig]) (!nl)
Manchmal möchte man Sprungziele an Begriffe/Orte setzen, die mit dem
Kommando (!V)!/label(!v) nicht zugänglich sind, da diese nur alleine
in einer Zeile benutzt werden kann bzw. weil das Zielformat eine
genau Kennzeichnung erfordert (Sprungziel in Tabellen bei HTML).
Deshalb schlage ich folgende Syntaxerweiterung vor:
!begin_verbatim
...blabla (!label [Text] [Verweisziel]) blabla...
!end_verbatim
Damit lassen sich auch Label exakt an Items in Umgebungen knüpfen
und müssen nicht mehr irgendwo in der Luft hängen.


!smallskip
!hline
!subsubnode Kommandozeile (Norbert Hanz)
(!img [rot2] [wichtig])~~|~~(!img [gelb3] [leicht]) (!nl)
Bisher erzeugt UDO die Projektdatei (*.upr) nur beim Übersetzen
eines Projektes. Das kann je nach Umfang eines Projektes hinlänglich
dauern. Daher schlage ich vor einen weiteren Parameter für die
Kommando!-zeile festzulegen, der nur die Projektdatei erzeugt.

(!V)(--)update(!v)

Fällt jemandem vielleicht ein besseres Kommando ein?

Wenn UDO einen Zielordner setzt, sollte gleichzeitig durch eine
Shell das Symbol 'UseFolders' gesetzt werden. Das heißt, dieses
Symbol ist ansonsten Tabu. Daher sollte für UDO intern die Anzahl
der Symbole auf x+1 (derzeit dann 16+1=17) gesetzt werden, damit
für den Benutzer keine Zweifel über die Anzahl der Symbole aufkommt.


!smallskip
!hline
!subsubnode Bilder in UDO
(!img [rot3] [Sehr wichtig])~~|~~(!img [gelb2] [schwierig]) (!nl)
Bisher wurden Bilder auf folgende Art und Weise eingebunden:
!begin_itemize !short
!item (!V)!/image <datei> <titel>(!v) (!lra) ein Zeilenbild
!item (!V)(!/img [<file>] [<text>])(!v) (!lra) ein Bild im Text
!end_itemize
!smallskip
Folgende Punkte sollten, vor allem in Hinsicht auf HTML und RTF,
ergänzt werden:
!begin_itemize !short
!item Größe
!item Abstand
!item Textumfluß
!end_itemize
!smallskip
Um kompatibel zu den alten Angaben zu sein, sollten die zusätzlichen
Angaben entsprechend hinten an abgelegt werden. Eine weitere
möglichkeit wäre die Einführung von neuen Kommandos.


!smallskip
!hline
!subsubnode Textfarben (Norbert Hanz)
(!img [rot2] [wichtig])~~|~~(!img [gelb3] [leicht]) (!nl)
Festlegung von 16 Textfarben als allgemeiner Standard. Die folgenden
Makros für HTML, HTML-Help, Postscript, RTF und WinHelp könnten
dann in UDO übernommen werden, für die anderen Formate würden die
Angaben entsprechend ignoriert. (!B)Gibt es für andere Zielformate
auch die Möglichkeit farbige Texte bzw. ganz allgemein Farben mit
einzubringen?(!b)

Die Makros sind bewusst mit öffnendem und schließendem Teil angelegt,
da so farbige Texte auch über mehrere Zeilen angelegt werden können.

!vinclude d:/udo-tool/colour.ui

!smallskip
Statt des (!V)style(!v)-Attributes bei HTML kann auch das
(!V)class(!v)-Attribut eingesetzt werden und die Farbangaben
über eine CSS-Datei angegeben werden.

!medskip
Für (!TeX) könnten die Farben folgendermaßen umgesetzt werden:
!begin_verbatim
% Farbbefehl bereitstellen
\newcommand{\color}[1]
  {\special{ps: #1 setrgbcolor
   gsave newpath 0 0 moveto 1 0 rlineto stroke grestore}}

% Farbige Quadrate
\newcommand{\colorsquare}[1]
  {\color{#1}\rule{1em}{1em}\color{\black}}

% Einige Farben definieren
\newcommand{\red}{1 0 0}   \newcommand{\white}{1 1 1}
\newcommand{\yellow}{1 1 0}\newcommand{\blue}{0 0 1}
\newcommand{\green}{0 1 0} \newcommand{\black}{0 0 0}
\newcommand{\violet}{1 0 1}\newcommand{\cyan}{0 1 1}
!end_verbatim

Das erfordert aber die Ausgabe über einen Postscripttreiber, ist also
mit den ""normalen"" DVI-Treibern nicht machbar.

(!U)Frage an die (!TeX)-/(!LaTeX)-Kundigen:(!u) Gibt es eine bessere
Möglichkeit Texte und andere Gebilde (z.B. Tabellenhintergrund) farbig
auszugeben? (!V)\usepackage{colortbl}(!v)

!smallskip
!hline
!subsubnode Erweiterung der Enumerate-Umgebung
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb3] [leicht]) (!nl)
Um die Enumerate-Umgebung und vor allem die einzelnen Einträge
besser hervorheben zu können, sollte diese Umgebung folgender!-maßen
erweitert werden:
!begin_verbatim
!begin_benumerate für hervorgehobene Zahlen
!begin_ienumerate für kursive Zahlen
!begin_xenumerate für äquidistante Zahlen
!end_verbatim
Die entsprechenden Gegenstücke für das Ende sollten dann
(!V)!/end_benumerate(!v) etc. lauten. Die Steuerung sollte
sich nur auf die Zahl beziehen. Für die richtige Formatierung
der Absätze eines Items ist der Benutzer zuständig. Dadurch
kann zum Beispiel nur der erste Absatz fett gesetzt werden.

Zusätzlich könnte die Enumerate-Umgebung auch alternativ Klammern
statt Punkte hinter der Zahl ausgeben.

!smallskip
!hline
!subsubnode Icons zur Navigation
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb2] [schwierig]) (!nl)
Hinzufügen von eigenen Icons, die besser zum jeweiligen Layout passen.

!smallskip
!hline
!subsubnode Neue Variablen, Platzhalter
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb3] [leicht]) (!nl)
Die Daten aus !/docinfo sollten als Platzhalter zur Verfügung stehen.

!smallskip
!hline
!subsubnode Spalten in Dokumenten
(!img [rot1] [Weniger wichtig])~~|~~(!img [gelb2] [schwierig]) (!nl)
Manche Dokumente sollen vielleicht in zwei oder mehreren Spalten
als durchfließender Text angeordnet werden. Dazu bieten einige
Formate eine Hilfe an, so daß UDO hierfür nichts weiter tun
muß, als einige Kommandos zu setzen.

Grundsätzlich gibt es zwei verschiedene Formen der Benutzung:
!begin_itemize !short
!item Das ganze Dokument ist in gleichviele Spalten aufgeteilt.
!item Im Dokument ändert sich von Seite zu Seite (Datei zu
Datei) die Anzahl der Spalten.
!end_itemize

Da für die Spalten nicht unendlich viel Platz zur Verfügung steht,
denke ich ist eine Begrenzung auf maximal 3~Spalten sinnvoll.
Näheres zur Ausführung in den einzelnen Kapiteln der Zielformate:
!begin_itemize !short
!item (!link [RTF] [RTF-Spalten])
!item (!link [(!LaTeX)] [LaTeX-Spalten])
!item (PDF-LaTeX)
!end_itemize

!smallskip
!label Sonderzeichen
!include Sonderzeichen.ui

!subsubnode Kommentarzeichen
(!img [rot3] [Sehr wichtig])~~|~~(!img [gelb3] [Leicht]) (!nl)
Damit das Kommentarzeichen (!V)#(!v) zukünftig nicht mehr nur am
Anfang stehen muß und trotzdem benutzt werden kann, sollte es, wie
andere Zeichen auch, maskiert werden durch (!V)(!/#)(!v).
Kommentar!-zeichen sollten dann auch in Tabellen erlaubt sein.

!subsubnode Ausgabe in beliebige Textdateien während des Übersetzungslaufes
(!img [rot2] [wichtig])~~|~~(!img [gelb3] [Leicht]) (!nl)
Einbau von Kommandos zum Schreiben auf Textdateien

Anwendungsmöglichkeiten sind die Erzeugung von beliebigen Indizes und
Verzeichnissen, wie z.~B. Endnoten, Stichwort!-verzeichnisse, etc.

(!/open_file [filename] [dateiname] [modus]) (!nl)
(!V)filename(!v) ist der logische NAme, unter dem die externe Datei innerhalb
von UDO angesprochen wird. (!V)dateiname(!v) ist der externe Dateiname.
(!V)modus = write|append(!v) (bei write wird die evtl. schon bestehende Datei
überschrieben, bei append wird der Inhalt angehangen).

(!/write_file [filename] [text]) (!nl)
(!V)text(!v) ist eine Zeile. Am Schluß wird eine Zeilenschaltung erzeugt
(Achtung: Je nach Betriebssystem unterschiedlich, Unix <-> DOS/Windows)

!/begin_write_file [filename] (!nl)
!/end_write_file (!nl)
um größere Mengen Text (mehrzeilig) zu schreiben.

(!/close_file [filename]) (!nl)
schließt die Datei. Notfalls muß UDO selbständig aufpassen und nicht
geschlossene Dateien beim Beenden des Über!-setzungs!-laufes schließen.

!/if file_exist (!nl)
zum Testen, ob eine Datei bereits existiert.

Frage: Sollten die Kommandos eher als Makros (!...) oder als
Einzelzeilen-Befehle definiert werden?


!medskip
!hline
!subsubnode Ungeordnet (Allgemein)
!begin_itemize
!item Erweiterung des universellen Zeichensatzes für alle Sonderzeichen,
      die nicht auf der Tastatur vorkommen (Ulrich Kretschmer)
!item Anpassung der sprachabhängigen Texte (z.~B. Inhaltsverzeichnis) evtl.
      durch Makros (Ulrich Kretschmer)
!item Zulassung von Links in den (!V)!/docinfo [](!v) Definitionen (Ulrich Kretschmer)
!item Unterstützung von relativen Pfaden für die HTML-Ausgabe durch z.~B.
      (!V)!/html_path(!v). Schwierigkeiten wird nur die Link!-verwaltung
      bringen (Ulrich Kretschmer) (!nl)
      (!B)Geht das vielleicht mit (!V)!/html_dirname(!v) und
      (!V)!/html_use_folders(!v)?(!b)
!item Zusätzliche Schriftarten wie Kapitälchen u.ä. (Ulrich Kretschmer)
!item Erweiterung von (!V)!/html_counter_command(!v), damit auch (!V)(!/nl)(!v),
      (!V)(!/url [] [])(!v) und (!V)(!/link [] [])(!v) umgesetzt werden (Ulrich Kretschmer)
!item Umbennung vieler unterschiedlicher Formatbefehle in ein strukturiertes
      (!V)!/doclayout [] [](!v) (Dirk Hagedorn)
!item Fehlermeldung, wenn Zieldatei schreibgeschützt ist mit Halte-Taste (!nl)
      (Norbert Hanz)
!item Angleichung vorhandener Features an alle Formate ~~(Norbert Hanz) (!nl)
      (z.B. (!V)endash(!v), (!V)emdash(!v), (!V)(!/img [] [])(!v), etc.)
!end_itemize


!subsubnode Bugs (formatunabhängig)
!begin_itemize
!item UDO schreibt in die Projektdatei (*.upr) die kleinen UDO-Bildchen
      doppelt rein (Ausnahme: udo_mw.gif)
!item Umlaute und Paragraphen innerhalb von Links in Tabellen funktionieren
      nicht -- scheint aber vom Zeichensatz abhängig zu sein
!item Beim Frames-Layout und der Benutzung von (!V)!/html_propfont_name(!v)
      wird im Navigationsframe (00toc.html) die Schriftformatierung nicht
      berücksichtigt, da die Formatierung nicht in den Tabellenzellen selbst
      gesetzt wird.
!item UDO stürzt bei Überschreitung der Länge von 1024 Zeichen bei
      (!V)!/html_keywords(!v) ab. Fehlerbehandlung notwendig und Erhöhung
      der Speichergröße
!item Die Kommandofolge (!V)!)(!v) dient eigentlich zur Kennzeichnung von
      sich schließenden Klammern, die eine inhaltliche Bedeutung haben und
      nicht zur Syntax der UDO-Kommandos gehören. Offensichtlich setzt
      dieses Kommando jedoch andere Kommandos außer Gefecht.
!end_itemize
