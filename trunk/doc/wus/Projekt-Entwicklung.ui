In diesem Kapitel soll alles aufgeführt werden, was auf irgendeine Weise
mit Mehr!-sprachig!-keit zu tun hat. Besonderes Augen!-merk ist dabei
sicher!-lich auf die HTML-Ausgabe zu richten, da diese häufig benutzt
wird und AFAIK die meisten Möglich!-keiten bietet. Das ganze ist noch
ziemlich chaotisch aufgeführt, viele Sachen weiß ich auch noch nicht.
Wichtig ist sicherlich erstmal die Umsetzung der Problematik mit den
unterschiedlichen Codepages. Die Unterstützung von mehrsprachigen
Dokumenten ist wohl erstmal schmückendes Beiwerk.

Grundsätzlich müssen wohl zwei Bereiche betrachtet werden:
!begin_itemize !short
!item die Eingabe des UDO-Quelltextes
!item die Ausgabe der Zieldateien
!end_itemize

!medskip
!subsubsubnode Eingabe
Bei der Eingabe des Quelltextes in einem Editor tauchen prinzipiell
zwei Probleme auf. Unter!-schiede zwischen den Betriebs!-systemen und
den ver!-schie!-denen Sprachen.

Damit die Erzeugung der Zieldateien nicht in ein Chaos ausartet, ist die
Pflege der ver!-schiedenen Sprachen in einem Projekt wohl not!-wendig.
Das hat den Vor!-teil, daß auch gemischte Texte erzeugt werden können.
Man hat z.~B. nur den wich!-tigsten Teil eines Dokumentes über!-setzt
und kann trotz!-dem eine voll!-ständige (!nolink [Dokumen!-tation])
erzeugen. Grundsätzlich sollte den Nodes (Subnodes etc.) eine Sprache
zugeordnet sein.

Derzeit werden folgende Codepages von UDO unterstützt:
!begin_itemize !short
!item Atari ST (!V)(!/code [tos])(!v)
!item Apple Macintosh (!V)(!/code [mac])(!v)
!item HP Roman 8 (!V)(!/code [hp8])(!v) (!B)braucht die jemand?(!b)
!item IBM-PC (!V)(!/code [dos])(!v)
!item IBM-PC (!V)(!/code [cp437])(!v)
!item ISO Latin 1, Windows ANSI (!V)(!/code [iso])(!v)
!item ISO Latin 1, Windows ANSI (!V)(!/code [latin1])(!v)
!item ISO Latin 1, Windows ANSI (!V)(!/code [iso-8859-1])(!v)
!item OS/2 (!V)(!/code [os2])(!v)
!item OS/2 (!V)(!/code [cp850])(!v)
!item NeXT (!V)(!/code [next])(!v)
!end_itemize

Im Sinne einer Unterstützung von Standards schlage ich vor, die
weiteren ISO Latin Codepages zu unterstützen, also
!begin_itemize !short
!item (!B)ISO Latin 2(!b) (!nl)
      für Kroatisch, Polnisch, Rumänisch, Slowakisch, Slowenisch,
      Tschechisch, Ungarisch
!item (!B)ISO Latin 3(!b) (!nl)
      für Experanto, Galizisch, Maltesisch, Türkisch
!item (!B)ISO Latin 4(!b) (!nl)
      für Estonisch, Lettisch, Litauisch
!item (!B)ISO Latin 5(!b) (!nl)
      für Bulgarisch, Mazedonisch, Russisch, Serbisch, Ukrainisch
!item (!B)ISO Latin 6(!b) (!nl)
      für Arabisch (!B)(kann wohl erstmal wegfallen wegen der
      verkehrten Schreibweise)(!b)
!item (!B)ISO Latin 7(!b) (!nl)
      für Neugriechisch
!item (!B)ISO Latin 8(!b) (!nl)
      für Hebräisch (!B)(kann wohl erstmal wegfallen wegen der
      verkehrten Schreibweise)(!b)
!item (!B)ISO Latin 9(!b) (!nl)
      für Türkisch
!item (!B)ISO Latin 10(!b) (!nl)
      für Grönländisch (Inuit) und Läppisch (Sami)
!end_itemize

Wenn möglich (Browserunterstützung?) sollten wir auf Windows-Codepages
verzichten und die ISO-Zeichensätze benutzen. (!B)Wer weiß, ob z.~B.
die Codepages cp852 und windows 1252 und ISO Latin 2 alle den gleichen
Inhalt haben?(!b)

Ulrich Kretschmer schlug vor, für die Umsetzung von verschiedenen
Codepages das GNU recode Programm zu benutzen.

!medskip
Hier habe ich folgenden Vorschlag zur Erweiterung der Projektdatei
zu machen. Die Projekt!-datei fristet ja mangels Unter!-stützung
zur Zeit eher ein Mauer!-blümchen!-dasein, da die UDO-Shell für GEM
die einzige ist, die sie unter!-stützt. Die Projekt!-datei könnte
aber in vieler Hinsicht hilf!-reich sein, denn durch sie könnte
eine Shell bestimmte Text!-stellen im Editor direkt anspringen,
z.~B. Nodes, Bilder, Labels, Indizes, etc.. Außer!-dem kann die
Projekt!-datei mehr!-sprachige Texte unter!-stützen, in dem auch
diese direkt ange!-sprungen werden können.

Für die Projektdatei schlage ich daher folgendes vor, um die
Änderungen nicht zu umfang!-reich zu machen und kompatibel
zur alten Projekt!-datei zu bleiben:

Erweiterung des Eintrages Node um die Sprache~~
(!V)node <level> <file> <line> <caption> <lang>(!v)

!begin_verbatim
langon
node	1	index.u	123	Gedanken zum Buchstaben A	de
node	1	index.u	140	Impression to letter A	en
langoff
!end_verbatim

Zugegebenermaßen ist das nicht gerade besonders toll, wie
die Projekt!-datei aufgebaut ist, aber ich will nichts
groß!-artiges ändern, bevor andere potentielle Shell-Ersteller
nicht mitziehen.

Die Nodes (Subnodes, etc.) müssen dann auch entsprechend
gekennzeichnet sein.

!begin_ignore

!begin_verbatim
<?xml standalone="yes"?>
<udoproject>
 <main>
  <node name="Gedanken zum Buchstaben A" lang ="de">
   <subnode name="Gedanken zum Buchstaben Ä" lang="de">
    <index name="Ähnliches" />
   </subnode>
  </node>
  <node name="Gedanken zum Buchstaben B" lang="de">
   <image ref="b.gif" alt="Ein schönes Bild vom B"/>
  </node>
  <node name="Gedanken zum Buchstaben C" lang="de">
   ...
  </node>
  <node name="Impression to letter C" lang="en">
   ...
  </node>
  ...
 </main>
 <appendix>
  <node name="Gedanken zum Alphabet">
   ...
  </node>
 </appendix>
</udoproject>
!end_verbatim

Wie ihr seht, habe ich die Nodes etc. als Bereiche definiert,
die einen Anfang und ein Ende haben. Ob es not!-wendig ist,
daß die Shell weiß, wo ein Node zu Ende ist, weiß ich nicht.
Es könnte aber vielleicht mal später von Bedeutung werden.

Bilder und Index (Labels) habe ich als leere Elemente definiert,
da diese ja an einer bestimmten Stelle im Text stehen.
!end_ignore


!medskip
!subsubsubnode Ausgabe
Bei der Ausgabe in die Formate, die keine besondere Sprachunterstützung
bieten ist es nur wichtig, daß die richtigen Teile des Quell!-textes
über!-setzt werden.

Bei den Zielformaten, die nicht mehr von einem Anwendungsprogramm
interpretiert werden (z.B. ASCII) muß der Benutzer die Ziel-Codepage
wählen können, damit z.~B. auch auf einem Atari ein Windows-Text
erzeugt werden kann. Bei allen anderen Zielformaten muß im einzelnen
geprüft werden, ob die gewünschte Codepage unterstützt wird.

Folgende Formate werden in Bezug auf Sonderzeichen nicht mehr
interpretiert:
!begin_itemize !short
!item Amiga Guide
!item ASCII
!item C-Source (!grin)
!item Pascal-Source (!grin)
!item ST-Guide
!end_itemize

Die folgenden Formate werden bedingt auf Sonderzeichen interpretiert:
!begin_itemize !short
!item Apple Quickview
!item Rich Text Format
!item WinHelp 3 und 4
!end_itemize

Die Hypertext Markup Language hat die meisten Möglichkeiten in
Bezug auf die Interpretation verschiedene Sprachen und Codepages.

!medskip
(!B)Wer kann etwas zu folgenden Ausgabeformaten sagen?(!b)
!begin_itemize !short
!item DRC (Sonderzeichen werden nicht speziell gekennzeichnet)
!item Texinfo (Umlaute werden zu ae, oe ue umgesetzt)
!item OS/2 IPF (Sonderzeichen werden entsprechend der Quell-Codepage
      gesetzt)
!item Linuxdoc SGML (Umlaute werden HTML-kodiert; Ausgabe ist wohl
      ISO Latin-1)
!item LyX (Sonderzeichen werden entsprechend der Quell-Codepage
      gesetzt)
!item Manualpage (Sonderzeichen werden entsprechend der Quell-Codepage
      gesetzt)
!item NROFF (Umlaute werden zu ae, oe ue umgesetzt)
!item Postscript (Umlaute werden oktal umgesetzt, Codepage ist wohl
      Windows ANSI)
!item PureC-Help (Sonderzeichen werden entsprechend der Quell-Codepage
      gesetzt)
!item Turbovision-Help (Sonderzeichen werden entsprechend der
      Quell-Codepage gesetzt)
!end_itemize

!medskip
(!B)Wer weiß, welche Browser welche Codepages unterstützen?(!b)
!begin_itemize !short
!item CAB (anscheinend nur ISO 8859-1)?
!item iCab (Westeuropa/USA, Mitteleuropa, Griechisch, Türkisch, Kyrillisch,
      Baltisch, Arabisch, Hebräisch, Japanisch, Koreanisch, Chinesich Big5,
      Chinesisch GB 2312, Devanagari, Gurmukhi, Gujarati, Thailändisch,
      Symbol, Dingbats)
!item MSIE <= 4
!item MSIE >= 5
!item Netscape 4
!item Netscape 6
!item Opera
!item Konqueror (ISO 8859-1 bis ISO 8859-9 ISO 8859-13, ISO 8859-15
      (wichtig für den Euro &euro;), ISO-10646-UCS-2, big5, cp 1250, cp 1252,
      cp 1253, cp 1254, cp 1255, eucjp, euckr, gb2312, gbk, ibm852,
      jis7, skis, utf16, utf8)
!item Lynx (alle ISO Latin 8859-1 bis 8859-10; windows 1250, 1251,
      1252, 1253, 1255, 1356, 1257; cp 437, cp737, cp755, cp850,
      cp852, cp862, cp864, cp866, cp869; utf-8; us-ascii; euc-cn,
      euc-kr, euc-jp; next; macintosh; und einige mehr)
!item Light of Adamas
!item ...
!end_itemize

!medskip
RTF Version 1.5 unterstützt die ""wichtigen"" Codepages 437 (US-IBM),
819 (Windows 3.1 US und Westeuropa), 852 (Osteuropäisch), 860
(Portugiesisch), 862 (Hebräisch), 863 (Franz.-Kanadisch), 864
(Arabisch), 865 (Norwegisch), 866 (Sowjetisch?), 932 (Japanisch),
1250 (Windows 3.1 Osteuropäisch), 1251 (Kyrillisch)

!medskip
(!TeX)/(!LaTeX) unterstützt die Codepages ascii, ISO Latin-1,
ISO Latin-2, ISO Latin-3, ISO Latin-5, IBM 850, IBM 852, IBM 865,
IBM 437, IBM 437de, Macintosh, Next, Windows 3.1 ANSI, Windows 1252,
Windows 1250; DEC Multinational

(!B)Kann hier ein (!TeX)-Kundiger mal was zu sagen.(!b) Für pdf(!TeX)
gilt wohl das gleiche wie für (!TeX).

!medskip
!label HTML und Sprachen
Für HTML bieten sich vielfältige Möglichkeiten zur Darstellung
unterschiedlicher Sprachen. Existieren z.~B. zusätzlich zu einem
deutschen Dokument (""Leben unter Grund"") auch ein englisches
und ein französisches Dokument, so kann man innerhalb der
HTML-Datei darauf aufmerksam machen.
!begin_verbatim
<link rel="alternate" href="mydoc.en.html" lang="en" title="Underground life">
<link rel="alternate" href="mydoc.fr.html" lang="fr" title="La vie souterrainne">
!end_verbatim
Entsprechend kann man das englisch und französische Dokument
kennzeichnen. Ich weiß aber nicht, ob schon irgendein Browser
darauf reagiert. Nichts desto trotz kann UDO aber automatisch
entsprechende Links mit Flaggen-Bildern auf die anderen Dokumente
machen.

Ebenso können die Dokumente im (!V)<head>(!v)-Bereich entsprechend
gekennzeichnet werden.
!begin_verbatim
<meta http-equiv=Content-Language content="de">
!end_verbatim

!medskip
Durch Content Negotiation (type var oder multiviews) kann der
Browser angeben, welche Sprache er bevorzugt empfangen möchte.
UDO könnte aus einer entsprechend gestalteten Datei mehrsprachige
Dokumente erstellen, die der Apache sofort verwalten könnte.

Zu diesem Zweck müssen die Nodes (Subnodes, etc.) entsprechend
der verwendeten Sprache gekennzeichnet sein. Außerdem lassen
sich dann Subnodes unter Umständen nicht mehr zusammen!-fassen,
wenn nicht für alle Unter-Nodes getrennte Sprachen existieren.
Hier müßte sich der Benutzer also vor Aufbau eines Projektes
entsprechende Gedanken machen.


 