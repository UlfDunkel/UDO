# doc/manual/source/syntax.ui
# letzte Änderungen: 18.09.2005 / last changes: Sep 18, 2005


################################################################################
!iflang [german]
!begin_node Die UDO-Syntax
!endif
!iflang [english]
!begin_node The syntax of UDO
!endif
!html_name syntax.html

################################################################################
################################################################################
!iflang [german]
!begin_node Quelltext-Beispiel
!endif
!iflang [english]
!begin_node A short example
!endif
!html_name syntax_example.html

!iflang [german]
Bevor ich ins Detail gehen werde, möchte ich Ihnen an dieser Stelle ein
Beispiel eines kompletten Quelltextes zeigen, welches Ihnen auch dazu
dienen kann, eigene Quelltexte mit UDO zu erstellen:

!hline
!begin_quote
!vinclude (!EXAMPLES_DIST)example.u
!end_quote
!hline


!subsubheading Erläuterungen

Zu Beginn des Quelltextes ist ein Kommentar angegeben, damit man später
noch auf Anhieb erkennen kann, womit sich der Text befasst. Eine Zeile
bewertet UDO als Kommantar, wenn das erste Zeichen der Zeile ein ''#''
ist.

Es folgt eine spezielle Zeile für den ST-Guide. Hier wird dem ST-Guide
mitgeteilt, in welche Rubrik der Hypertext in den Katalog einzuordnen
ist. Kennen Sie sich nicht mit dem ST-Guide aus, so verwenden Sie
einfach diese Zeile zu Beginn Ihres Quelltextes.


!index (!kw [docinfo])
!index (!kkw [today])
Nun werden die Informationen für die Titelseite und die Kopfzeilen
gesetzt, die bei einigen Formaten automatische erzeugt werden.
(!KW [docinfo] [[title!!]]) und (!KW [docinfo] [[program!!]])
bilden eine Einheit, daher sollte
beides zusammengenommen einen Sinn ergeben. Hier würde bei einigen
Formaten in den Kopfzeilen ""Ein UDO-Bespiel-Quelltext"" ausgegeben. Bei
(!KW [docinfo] [[date!!]]) wird der Platzhalter (!KKW [today]) durch das aktuelle
Systemdatum expandiert. Sie können natürlich auch manuell für die
Angabe des Datums sorgen (z.B. (!T)!/docinfo [date] 31. Dezember 1999(!t)).

!index (!kw [subsubtoc])
!index (!kw [subtoc])
Im Vorspann werden nun noch einige Schalter gesetzt. Die ersten beiden
Schalter sorgen bei Hypertexten, deren Kürzel Sie in den eckigen
Klammern erkennen, für die Ausgabe sogenannter
''Unterinhaltsverzeichnisse''. In diesen werden dann alle Abschnitte und
Unterabschnitte eines Kapitels bzw. alle Unterabschnitte eines
Abschnittes in Form eines Inhaltsverzeichnisses aufgelistet. Dem Leser
eines Hypertextes wird es dadurch ermöglicht, direkt zu den zugehörigen
Abschnitten weiterzuklicken. Theoretische wäre es auch möglich, bei
jedem Kapitel durch die Angabe des Befehls (!KW [subtoc]) bzw. bei
jedem Abschnitt durch die Angabe des Befehls (!KW [subsubtoc]) diese
Unterinhaltsverzeichnisse einzufügen. Bei kleineren Texten empfiehlt es
sich jedoch, diese Ausgabe zu automatisieren.

!index (!kw [no_effects])
Der Schalter (!KW2 [no_effects] [[asc!!]]) sorgt für die Unterdrückung der
Schriftarten für das ASCII-Format. Würde dieser Schalter nicht
angegeben, so würde UDO beim ASCII-Format die in der DFÜ gebräuchlichen
Zeichen zur Schriftartumschaltung benutzen.

!index (!kw [use_justification])
Der Schalter (!KW2 [use_justification] [[asc,stg!!]]) sorgt dafür, dass UDO beim
ASCII- und ST-Guide-Format Blocksatz erzeugt.

!index (!kw [begin_document])
Das Kommando (!KW [begin_document]) teilt UDO mit, dass nun der
Hauptteil des Quelltextes beginnt. Dieses Kommando darf in keinem
Quelltext fehlen, da hier unverzichtbare Informationen für die
Ausgabeformate ausgegeben werden!

!index (!kw [maketitle])
Zu Anfang geben wir eine Titelseite aus, die aus den Informationen aus
der im oberen Teil des Vorspanns gebildet wird. Das Kommando
(!KW [maketitle])) sollte -- wenn es benutzt wird -- direkt hinter
(!KW [begin_document]) angegeben werden. UDO erlaubt zwar auch den
Einsatz an späterer Stelle, jedoch ist dies weder sinnvoll noch
unproblematisch.

!index (!kw [tableofcontents])
Danach möchten wir, dass UDO ein Inhaltsverzeichnis ausgibt. In diesem
sind alle Kapitel, Abschnitte und Unterabschnitte des Quelltextes
aufgelistet. Das oben Gesagte gilt auch hier. Wird der Befehl
(!KW [tableofcontents]) benutzt, so sollte er direkt hinter
(!KW [maketitle]) oder (bei Verzicht auf die Ausgabe der Titelseite)
hinter (!KW [begin_document]) angegeben werden.

!index (!kw [node])
Endlich! Nach dem ganzen Vorgeplänkel beginnen wir mit dem Befehl
(!KW [node]) das erste Kapitel. Beachten Sie bitte auch den Inhalt
dieses Kapitels, da er weitere Informationen enthält.

Die folgenden Zeilen demonstrieren, wie man Kapitel, Abschnitte und
Unterabschnitte erzeugt. Auch hier sollten Sie einen Blick auf den Text
werfen.

!index (!kw [end_document])
Unser Quelltext ist nun beendet. Dies zeigen wir UDO mit dem Befehl
(!KW [end_document]) an. Auch dieser Befehl darf in keinem Quelltext
fehlen!

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Before going into details I want to show you how an UDO source file may
look like. You can use this example to make your own source files if
you want to.

!hline
!begin_quote
!vinclude (!EXAMPLES_DIST)example.u
!end_quote
!hline


!subsubheading Explanations

At the beginning of this example you can see a comment. A comment is a
line that begins with a ''#'' immediately.

The next line is a special line. This line contains a special command
for the ST-Guide. If you don't know the ST-Guide just add this line at
the beginning of your source file so that are all the people are able
to build a hypertext if they want to.

!index (!kw [docinfo])
!index (!kkw [today])
Now the information for the title page and the headlines are set.
(!KW [docinfo] [[title!!]]) and
(!KW [docinfo] [[program!!]]) should make sense if you read them one after
another. In this example it would be ""An example for UDO"". If you look
at the line containing (!KW [docinfo] [[date!!]])
 you will see the placeholder (!KKW [today]) that
is replaced by the current system date. You can set the date to April
16th, 1996 manually, if you want to.

!index (!kw [subsubtoc])
!index (!kw [subtoc])

The preamble contains some switches. The first to switches are set for
the output of ''sub-tables-of-contents'' in hypertexts. The abbreviations
of these hypertexts you will see inside the brackets. In a ''subtoc'' all
subnodes of a node are printed like a table of contents so that readers
of a hypertext are enabled to directly switch to an interesting
subnode.

!index (!kw [no_effects])
The switch (!KW2 [no_effects] [[asc!!]]) suppresses the usage of Usenet text effect
commands like stars for bold and slashes for italic text.

!index (!kw [use_justification])
The switch (!KW2 [use_justification] [[asc!!]]) tells UDO to layout the
ASCII file with justified text.

!index (!kw [begin_document])
The command (!KW [begin_document]) tells UDO that now the main part of the
document begins. This command has to be part of any source file!

!index (!kw [maketitle])
In first place we output the title page that is built with the
information set in the preamble of this example. You should use
(!KW [maketitle]) directly after (!KW [begin_document]) if you use it. It's possible
to use it later but I don't think that it would work without problems.

!index (!kw [tableofcontents])
Then we want that UDO prints a table of contents. There you can see all
chapters, sections and subsections of the source file. Like (!KW [maketitle])
you should use (!KW [tableofcontents]) directly after (!KW [begin_document]) or
(!KW [maketitle]) if you use this command.

!index (!kw [node])
Now we can enter the first chapter of our text. Chapters are marked
with (!KW [node]). Please read the contents of this chapter that contains
additional information.

The following lines demonstrate how to use chapters, sections and
subsections. You should also read the text of these chapters to get
more information.

!index (!kw [end_document])
Finally we end our text with the command (!KW [end_document]). This command
has to be part of every source file and should be the last command of a
source file!
!endif

!end_node

################################################################################
################################################################################
!iflang [german]
!begin_node Grundlagen
!endif
!iflang [english]
!begin_node Basics
!endif
!html_name basics.html

################################################################################
!begin_node Let's talk about text, Baby!
!html_name text.html

!index Carriage Return
!index Linefeed
!iflang [german]
!index Textdatei
UDO erwartet als Quelldatei eine Textdatei, wie sie mit jedem
ASCII-Editor erstellt werden kann. Außer ASCII~9 (Tabulator), ASCII~10
(Linefeed) und ASCII~13 (Carriage Return) sollten keine Steuerzeichen
(d.h. keine Zeichen mit einem ASCII-Wert kleiner als 32) benutzt
werden! Eine Zeile darf nicht länger als 512 Zeichen sein.

UDO kümmert sich bei der Umwandlung selbständig um die Formatierung des
Textes, sprich um den Zeilenumbruch und die Absatzabstände:

!begin_description

!index Wort
!item [Wörter] sind Zeichenfolgen, die durch ein oder mehrere Leerzeichen
oder Tabulatoren voneinander getrennt sind. UDO gibt Wörter durch
ein Leerzeichen voneinander getrennt aus.

!index Absatz
!item [Absätze] sind Folgen von Wörter, die durch eine oder mehrere
Leerzeilen voneinander getrennt in der Quelldatei auftreten. UDO
sorgt selbständig für den Zeilenumbruch innerhalb von Absätzen
und gibt automatisch die passende Anzahl von Leerzeilen zwischen
zwei Absätzen aus.

!end_description

!index Zeichensatz
Quelltexte können in verschiedenen Zeichensätzen erstellt werden. UDO
versteht folgende Zeichensätze:

!begin_itemize !short
!item Atari ST                  ((!KW [code] [[tos!!]])) (!index [!/code])
!item Apple Macintosh           ((!KW [code] [[mac!!]])) (!index [!/code])
!item HP Roman 8                ((!KW [code] [[hp8!!]])) (!index [!/code])
!item IBM-PC                    ((!KW [code] [[dos!!]])) (!index [!/code])
!item IBM-PC                    ((!KW [code] [[cp437!!]])) (!index [!/code])
!item ISO Latin 1, Windows ANSI ((!KW [code] [[iso!!]])) (!index [!/code])
!item ISO Latin 1, Windows ANSI ((!KW [code] [[latin1!!]])) (!index [!/code])
!item ISO Latin 1, Windows ANSI ((!KW [code] [[iso-8859-11!!]])) (!index [!/code])
!item OS/2                      ((!KW [code] [[os2!!]])) (!index [!/code])
!item OS/2                      ((!KW [code] [[cp850!!]])) (!index [!/code])
!item NeXT                      ((!KW [code] [[next!!]])) (!index [!/code])
!end_itemize

Beim Start der Konvertierung erwartet UDO den aktuellen
Systemzeichensatz. Sollen Quelltexte konvertiert werden, die andere
Zeichensätze benutzen, muss man UDO dies mit den obigen Befehlen
kenntlich machen. Mehr zu diesem Thema findet man im Kapitel
""Sonderzeichen"".

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO expects a text file that you can edit with every ASCII editor. You
should use only printable characters. That means you shouldn't use any
characters below ""space"" except ASCII~9 (tab), ASCII~10 (line feed) and
ASCII~13 (carriage return). A line of a source file shouldn't contain more
than 512 characters.

UDO layouts the destination file itself. That means that it fills in spaces
between words and lines between paragraphs:

!begin_description

!index word
!item [Words] are characters that are divided by one or more blank or tab.
UDO prints words divided by one blank.

!index paragraph
!item [Paragraphs] consist of words. Paragraphs are divided by one or more
empty line(s) or UDO commands. UDO divides paragraphs by one empty line when
printing the destination file.

!end_description

!index Character set

You can compose the source file using different charsets. UDO supports the
following character sets:

!begin_itemize !short
!item Atari ST                  ((!KW [code] [[tos!!]])) (!index [!/code])
!item Apple Macintosh           ((!KW [code] [[mac!!]])) (!index [!/code])
!item HP Roman 8                ((!KW [code] [[hp8!!]])) (!index [!/code])
!item IBM-PC                    ((!KW [code] [[dos!!]])) (!index [!/code])
!item IBM-PC                    ((!KW [code] [[cp437!!]])) (!index [!/code])
!item ISO Latin 1, Windows ANSI ((!KW [code] [[iso!!]])) (!index [!/code])
!item ISO Latin 1, Windows ANSI ((!KW [code] [[latin1!!]])) (!index [!/code])
!item ISO Latin 1, Windows ANSI ((!KW [code] [[iso-8859-11!!]])) (!index [!/code])
!item OS/2                      ((!KW [code] [[os2!!]])) (!index [!/code])
!item OS/2                      ((!KW [code] [[cp850!!]])) (!index [!/code])
!item NeXT                      ((!KW [code] [[next!!]])) (!index [!/code])
!end_itemize

When UDO starts the conversion it excepts the character set that is used on
the current operating system. If you want to convert source files that use
characters from a different operating system you have to tell it to UDO by
using the upper commands. Additional information can be found in the chapter
""Special characters"".
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Kommandos, Schalter und Platzhalter
!endif
!iflang [english]
!begin_node Commands, switches and placeholders
!endif
!html_name commands_switches_placeholders.html

!iflang [german]
!begin_blist [Platzhalter:]
!index Kommando

!item [Kommandos:] Ein UDO-Kommando ist eine mit einem ""!"" beginnende
Zeilenfolge, die am Anfang einer Zeile, eventuell eingerückt durch
Leerzeichen oder Tabs, steht. Ein Kommando bewirkt eine Aktion, wie
z.B. die Ausgabe eines Inhaltsverzeichnisses (siehe (!KW [tableofcontents])).

!index Schalter
!item [Schalter:] Ein UDO-Schalter ist eine mit einem ""!"" beginnende
Zeichenfolge, die die Aktionen von UDO oder einem Kommando
beeinflussen. So gibt es z.B. einen Schalter, der bewirkt, dass 
Bezeichnungen in englischer Sprache(!N)""Appendix"" statt ""Anhang""(!n)
ausgegeben werden (siehe (!KW [language])).

Ein Schalter wird nur erkannt, wenn er am Anfang einer Zeile, eventuell
eingerückt durch Leerzeichen oder Tabs eingerückt, steht.

!index Platzhalter

!item [Platzhalter:] Ein Platzhalter ist eine mit ""!"" beginnende
Zeichenfolge, die durch runde Klammern eingefasst ist. Ein Platzhalter
wird von UDO durch eine dem Ausgabeformat zugehörige Zeichenfolge
ersetzt (z.B. ''(!KK1 [B])'' durch ''(!V){\bf(!v)'').

Platzhalter können an jeder beliebigen Stelle einer Zeile stehen.

!end_blist

!endif
# ------------------------------------------------------------------------------
!iflang [english]
!begin_xlist [Placeholders:]
!index Command
!item [Commands:]
An UDO command begins with a single ""!"" at the beginning of a line, it may be
indented by spaces or tabs. A command tells UDO to do something where you
used it e.g. to output the table of contents with
(!KW [tableofcontents]).

!index Swicth
!item	[Switches:]
An UDO switch begins with a single ""!"" at the beginning of a line, it may be
indented by spaces or tabs. A switch tells UDO how to handle some commands
e.g. (!KW [language] [[english!!]]) that switches the language of the destination file to
English so that UDO will print ""Appendix"" instead of ""Anhang"".

!index Placeholder
!item [Placeholders:]
An UDO placeholder begins with a ""(!"" and ends with a single "")"". A
placeholder is replaced by certain characters e.g. ''(!KK1 [B])'' by ''{\bf'' for
(!LaTeX). You can use placeholders wherever you want.

!end_xlist

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Kommentare
!endif
!iflang [english]
!begin_node Comments
!endif
!html_name comments.html

!iflang [german]
!index Kommentar
Es besteht die Möglichkeit, in einer Quelldatei Kommentare einzufügen.
Ist das erste Zeichen einer Zeile ein ""#"", so fasst UDO diese Zeile als
Kommentar auf und wertet diese Zeile nicht aus.

Das ""#"" darf nicht eingerückt sein, muss also das erste Zeichen einer
Zeile sein!

Keine Regel ohne Ausnahme: Innerhalb einer verbatim- oder raw-Umgebug
werden alle Zeilen ausgegeben, also auch die Zeilen, die mit einem ""#""
beginnen. Innerhalb dieser Umgebung können also keine Kommentare
benutzt werden.
!endif
# ------------------------------------------------------------------------------
!iflang [english]
A source file can contain comments. UDO ignores a line if the first
character of a line is a ''#''. This character mustn't be indented
by spaces or tabs!

Inside a verbatim environment or raw environment you cannot use comments
because UDO prints every line of such an environment.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Vorspann und Hauptteil
!endif
!iflang [english]
!begin_node Preamble and main part
!endif
!html_name preamble_mainpart.html

!iflang [german]
!index Hauptteil
!index Vorspann

Eine Quelldatei besteht immer aus einem Vorspann(!N)auch ""Preambel""(!n) und
einem Hauptteil.

!index (!kw [begin_document])

Im Vorspann werden grundsätzliche Informationen über den umzuwandelnden
Text selbst deklariert. Desweiteren können im Vorspann spezielle
Kommandos plaziert werden, die UDO mitteilen, wie er die Quelldatei
umwandeln soll(!N)z.B. ob ein kurzes oder ausführliches
Inhaltsverzeichnis ausgegeben werden soll, ob Begriffe und
Datumsangaben in deutscher oder englischer Sprache erfolgen sollen
etc.(!n). Zum Vorspann zählen alle Zeilen, die vor dem Kommando
(!KW [begin_document]) stehen.

!index (!kw [end_document])

Im Hauptteil schließlich befindet sich der nach Kapiteln, Abschnitten
und Unterabschnitten strukturierte Inhalt des umzuwandelnden Textes.
Der Hauptteil schließt mit dem Kommando (!KW [end_document]).

!endif
# ------------------------------------------------------------------------------
!iflang [english]
!index Preamble
!index Main Part

Each source file has to contain a preamble and a main part.

!index (!KW [begin_document])

In the preamble you define general information about the source file like
information for the title page or the switches that tell UDO how to convert
the source file. The preamble ends with the command
(!KW [begin_document]).

!index (!KW [end_document])

The main part contains the text structured into chapters, sections or
subsections. The main part ends with the command (!KW [end_document]).
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Umgebungen
!endif
!iflang [english]
!begin_node Environments
!endif
!html_name environments.html

!iflang [german]
Eine Umgebung ist ein Teil der Quelldatei, der speziell behandelt
werden soll. Umgebungen werden jeweils mit (!I)!/begin_(!i) eingeleitet und mit
(!I)!/end_(!i) beendet. Diese Befehle müssen dabei jeweils am Anfang einer
Zeile stehen, eventuell eingerückt durch Leerzeichen und/oder
Tabulatoren.

Es gibt zahlreiche Umgebungen, die Ihnen die Arbeit erleichtern können
und die die jeweiligen ausgabeformatspezifischen Besonderheiten
berücksichtigen. Hier eine Übersicht:

!begin_xlist [description-Umgebung:] !short
!item [appendix-Umgebung:]     Anhang
!item [center-Umgebung:]       Zentrierungen
!item [comment-Umgebung:]      Kommentare
!item [description-Umgebung:]  Beschreibungen
!item [document-Umgebung:]     Dokument-Inhalt
!item [enumerate-Umgebung:]    nummerierte Aufzählungen
!item [flushleft-Umgebung:]    linksbündiger Text
!item [flushright-Umgebung:]   rechtsbündiger Text
!item [ignore-Umgebung:]       Textpassagen ignorieren
!item [itemize-Umgebung:]      einfache Aufzählungen
!item [linedraw-Umgebung:]     Screenshots darstellen
!item [preformatted-Umgebung:] vorformatierter Text
!item [quote-Umgebung:]        Einrückungen
!item [raw-Umgebung:]          spezielle Befehle des Ausgabeformats
!item [table-Umgebung:]        Tabellen
!item [verbatim-Umgebung:]     vorformatierter Text
!item [xlist-Umgebung:]        Listen
!item [sourcecode-Umgebung:]   Sourcecode
!end_xlist

Wie der Text, der innerhalb dieser Umgebungen steht, behandelt wird,
lesen Sie bitte in den zugehörigen Kapiteln nach.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
An environment is a part of a source file that has to be converted in a
special way. Environments will be started with (!I)!/begin_(!i) and finished
with (!I)!/end_(!i). The commands have to be the first words of a line. They
may be indented by spaces or tabs.

UDO offers you a large range of environments that will help you to layout
your text and to insert special commands:

!begin_xlist [description environment:] !short
!item [appendix environment:]     appendix
!item [center environment:]       centered text
!item [comment environment:]      comments
!item [description environment:]  descriptions
!item [document environment:]     documentation contents
!item [enumerate environment:]    enumerations
!item [flushleft environment:]    left justified text
!item [flushright environment:]   right justified text
!item [ignore environment:]       ignore text
!item [itemize environment:]      itemizations
!item [linedraw environment:]     display graphic screenshots
!item [preformatted environment:] preformatted text
!item [quote environment:]        indented text
!item [raw environment:]          special commands for the destination format
!item [table environment:]        tables
!item [verbatim environment:]     preformatted text
!item [xlist environment:]        lists
!item [sourcecode environment:]   source code
!end_xlist

How the text of an environment is formatted you can find in the according
sections.
!endif

!end_node

!end_node

################################################################################
################################################################################
!iflang [german]
!begin_node Gliederung
!endif
!iflang [english]
!begin_node Structuring
!endif
!html_name structuring.html

!iflang [german]
In diesem Abschnitt werden Sie erfahren, welche Möglichkeiten Ihnen
UDO bietet, um Ihren Text zu strukturieren.
!endif
!iflang [english]
In this chapter you will get to know what commands are offered to structure
your documentation.
!endif

################################################################################
!iflang [german]
!begin_node Titelseite
!endif
!iflang [english]
!begin_node Title page
!endif
!html_name titlepage.html

!index (!kw [maketitle])
!iflang [german]
Durch das Kommando (!KW [maketitle]) erzeugt UDO in der Ausgabedatei
eine Titelseite und greift bei der Erzeugung dieser Titelseite auf die
Informationen zurück, die Sie im Vorspann Ihrer Quelldatei mit den
Kommandos der folgenden Tabelle setzen:

!begin_xlist [docinfo   programimage:] !short

!item [(!KW [docinfo] [[title!!]]):]
Der Titel des Textes, z.B. ""Die Anleitung zu"", ""Das
Handbuch zu"" oder ""Die Einführung in"".

!item [(!KW [docinfo] [[program!!]]):]     Der Name des im Text behandelten Themas. Hier kann man
den beispielsweise den Namen des Programms angeben.

!item [(!KW [docinfo] [[programimage!!]]):] Eine Grafik, die anstelle der durch
                     (!KW [docinfo] [[program!!]]) gesetzten Information ausgegeben werden soll.

!item [(!KW [docinfo] [[version!!]]):]     Versionsinformationen, z.B. ""Version 47.11""

!item [(!KW [docinfo] [[date!!]]):]        Das Datum, an dem der Text verfasst oder das Programm
geschrieben wurden.

!item [(!KW [docinfo] [[author!!]]):]      Der Name des Autors des vorliegenden Textes.

!item [(!KW [docinfo] [[authorimage!!]]):] Eine Grafik, die zusätzlich oberhalb des Namen des
Autors ausgegeben werden soll.

!item [(!KW [docinfo] [[company!!]]):]      Firma, für die ein Dokument erstellt wird.

!item [(!KW [docinfo] [[address!!]]):]      Die Straße, Wohnort, Land etc. in der der Autor wohnt.
                   Optional kann man natürlich irgendetwas anderes angeben, was dann
                   unterhalb des Namens des Autors ausgegeben wird, wie z.B. Email-Adressen.

!end_xlist

Diese Kommandos müssen nicht alle angegeben werden. Zumindest eine
Titelseiteninformation sollte jedoch gesetzt werden, falls man das
Kommando (!KW [maketitle]) verwendet.

(!KW [maketitle]) sollte nur direkt hinter (!KW [begin_document])
eingesetzt werden. UDO erlaubt zwar auch die Erzeugung der Titelseite
an späterer Stelle, allerdings ist dies weder sinnvoll noch
unproblematisch.

Die Titelseite wird innerhalb des ST-Guide und WinHelp als eigene Seite
angelegt. Von dieser aus lässt sich dann zum Inhaltsverzeichnis
verzweigen. Dies ist besonders eine große Hilfe für Benutzer mit
kleinen Monitoren, die sonst vor lauter Informationen das
Inhaltsverzeichnis nicht wiederfinden würden.

Bei (!TeX) hingegen wird aus den angegebenen Informationen eine eigene
Titelseite mittels der titlepage-Umgebung erstellt.

Um beim ST-Guide eine eigene Titelseite zu erstellen (sei es, falls
einem die von UDO erzeugte Titelseite nicht gefällt), so muss man etwas
tiefer in die Trickkiste greifen. Die UDO-Distribution enthält einen
Beispiel-Quelltext, der zeigt, wie man eigene Titelseiten erstellen
kann.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Using the command (!KW [maketitle]) you can tell UDO to generate a title
page built with information you set in the preamble with the following
commands:

!begin_xlist [programimage:] !short

!item [(!KW [docinfo] [[title!!]]):]
		The title of the documentation e.g. ""The guide to"" or ""The
		introduction to"".

!item [(!KW [docinfo] [[program!!]]):]
		The name of the software or theme you describe inside the
		documentation.

!item [(!KW [docinfo] [[programimage!!]]):]
		The filename of an image UDO shall display on the title page
		instead of (!KW [docinfo] [[program!!]]).

!item [(!KW [docinfo] [[version!!]]):]
		This is used for version information e.g. ""Release 6"" or ""Version
		42"".

!item [(!KW [docinfo] [[date!!]]):]
		The date you have written the documentation or the program.

!item [(!KW [docinfo] [[author!!]]):]
		The name of the author of the documentation.

!item [(!KW [docinfo] [[authorimage!!]]):]
		The filename of an image UDO shall display on the title page above
		the name of the author.

!item [(!KW [docinfo] [[address!!]]):]
		The street, town, country etc. where the author lives. Optionally you can enter any
		other text that will be displayed below the name of the author on
		the title page, such as email addresses.

!end_xlist

You don't have to use all commands but you should use one command at least
if you are using the command (!KW [maketitle]).

When used (!KW [maketitle]) should only be used directly after
(!KW [begin_document]). To use this command at another place of the
source file is allowed but there could be problems.

The title page will be printed on a single page when converting to ST-Guide
or Windows Help. This is a great help for people with small screens.  From
the title page you will be able to jump to the table of contents.

Converting to (!LaTeX) UDO generates a single page using the title page
environment built with the information from the preamble.

If you want to make your own title page you have to use some tricks. You
will find an example inside the UDO distribution that shows you how to make
userdefined title pages.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Inhaltsverzeichnisse
!endif
!iflang [english]
!begin_node Tables of contents
!endif
!html_name tocs.html

!index (!kw [tableofcontents])

!iflang [german]
Durch das Kommando (!KW [tableofcontents]) erzeugt UDO in der
Ausgabedatei ein Inhaltsverzeichnis. In das Inhaltsverzeichnis gelangen
alle Überschriften der Kapitel, Abschnitte und Unterabschnitte.

(!KW [tableofcontents]) sollte direkt nach (!KW [maketitle]) bzw.
direkt nach (!KW [begin_document]) eingesetzt werden. UDO erlaubt zwar
auch die Verwendung an anderer Stelle im Quelltext, jedoch ist dies
nicht unproblematisch.

!index (!kw [toc])
Der Umfang dieses Inhaltsverzeichnisses lässt sich durch den Schalter
(!KW [toc]) beeinflussen. Wird dieser Schalter im
Vorspann mit dem jeweiligen Kürzel des betroffenen Ausgabeformats
angegeben, so sorgt UDO dafür, dass ein entsprechend eingeschränktes
Inhaltsverzeichnis ausgegeben wird.

!index (!kw [subsubsubtoc])
!index (!kw [subsubtoc])
!index (!kw [subtoc])
Neben (!KW [tableofcontents]) gibt es die Befehle (!KW [subtoc]), (!KW [subsubtoc])
und (!KW [subsubsubtoc]), mit denen Sie alle einem Kapitel
zugehörigen Abschnitte bzw. alle einem Abschnitt zugehörigen
Unterabschnitte etc. in der Form eines kleinen Inhaltsverzeichnisses
angeben können. Sinn und Zweck dieser sogenannten
""Unterinhaltsverzeichnisse"" ist es, dem Leser eines Hypertextformates
(ST-Guide, Pure-C-Help, HTML, WinHelp) das direkte Weiterlesen zu
ermöglichen. Besonders beim Einsatz von (!KW [tableofcontents]) !/depth
empfiehlt sich der Gebrauch dieser Inhaltsverzeichnisse.

!index (!kw [use_auto_subsubsubtocs])
!index (!kw [use_auto_subsubtocs])
!index (!kw [use_auto_subtocs])
Die Ausgabe dieser Unterinhaltsverzeichnisse kann man auch
automatisieren, indem man im Vorspann die Schalter
(!KW [use_auto_subtocs]), (!KW [use_auto_subsubsubtocs]) und
(!KW [use_auto_subsubtocs]) verwendet. Dann werden von UDO bei jedem
Kapitel und Abschnitt automatisch Unterinhaltsverzeichnisse angelegt,
in denen man den Inhalt eines Kapitels oder Abschnitts erkennen kann.

!index (!kw [ignore_subsubsubtoc])
!index (!kw [ignore_subsubtoc])
!index (!kw [ignore_subtoc])
Jedoch kann es sein, dass Sie gerne im ganzen Text genau diese
Unterinhaltsverzeichnisse erzeugt haben möchten, bei einigen Kapiteln
jedoch lieber darauf verzichten würden. Für diesen Zweck gibt es die
Befehle (!KW [ignore_subtoc]), (!KW [ignore_subsubtoc]) und
(!KW [ignore_subsubsubtoc]). Taucht in einem Kapitel
(!KW [ignore_subtoc]) auf, wird in diesem Kapitel kein
Unterinhaltsverzeichnis ausgegeben. Analog gilt dies für Abschnitte und
(!KW [ignore_subsubtoc]).


!subsubsubheading Zusammenfassung der Befehle und Schalter

!begin_xlist [use_auto_subsubsubtocs:] !short

!item [(!KW [tableofcontents]):]       Ausgabe des Inhaltsverzeichnisses auf einer
eigenen Seite
!item [(!KW [toc]):]                   Ausgabe des Inhaltsverzeichnisse im Text
!item [(!KW [subtoc]):]                Ausgabe aller Abschnitte eines Kapitels
!item [(!KW [subsubtoc]):]             Ausgabe aller Unterabschnitte eines
Abschnitts
!item [(!KW [subsubsubtoc]):]          Ausgabe aller Paragraphen eines
Unterabschnitts
!item [(!KW [use_auto_subtocs]):]      Bei jedem Kapitel automatisch alle zugehörigen Abschnitte auflisten
!item [(!KW [use_auto_subsubtocs]):]   Bei jedem Abschnitt automatisch alle zugehörigen Unterabschnitte auflisten
!item [(!KW [use_auto_subsubsubtocs]):] Bei jedem Unterabschnitt alle zugehörigen
Paragraphen auflisten
!item [(!KW [ignore_subtoc]):]         Im aktuellen Kapitel nicht die zugehörigen
Abschnitte auflisten
!item [(!KW [ignore_subsubtoc]):]      Im aktuellen Abschnitt nicht die zugehörigen
Unterabschnitte auflisten
!item [(!KW [ignore_subsubsubtoc]):]   Im aktuellen Unterabschnitt nicht die zugehörigen Paragraphen auflisten

!end_xlist

(!HINTS)

!begin_enumerate
!item Bei der Ausgabe in HTML erfolgt die Ausgabe der Titelseite und
des Inhaltsverzeichnisses in die Datei, deren Name Sie UDO in der
Kommandozeile übergeben.

!item Bei der Ausgabe ins Rich Text Format wird kein Inhaltsverzeichnis
ausgegeben! Dieses sollten Sie durch entsprechende Funktionen
Ihrer bevorzugten Textverarbeitung, mit der Sie das RTF-File
weiterbearbeiten, erzeugen.

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Using the command (!KW [tableofcontents]) you can tell UDO to generate a
table of contents that lists all chapters, sections and subsections of the
source file.

You should use (!KW [tableofcontents]) directly after (!KW [maketitle])
or (!KW [begin_document]) to avoid problems.

!index (!kw [toc])
By using the switch (!KW [toc]) you can
decrease the size of the table of contents. This is useful when writing
large hypertexts.

!index (!kw [subsubsubtoc])
!index (!kw [subsubtoc])
!index (!kw [subtoc])
!index (!kw [use_auto_subsubsubtocs])
!index (!kw [use_auto_subsubtocs])
!index (!kw [use_auto_subtocs])
If you want to list all sections of a chapter, all subsections of section or
all paragraphs of a subsection you can output this so called ""sub-table of
contents"" with the commands called (!KW [subtoc]), (!KW [subsubtoc])
and (!KW [subsubsubtoc]). This is useful for hypertexts where you then
have the possibility to switch directly to an interesting section or
subsection. UDO enables you to automatize the output of these ""subtoc's""
using the switches (!KW [use_auto_subtocs]),
(!KW [use_auto_subsubtocs]) and (!KW [use_auto_subsubsubtocs]).

!index (!kw [ignore_subsubsubtoc])
!index (!kw [ignore_subsubtoc])
!index (!kw [ignore_subtoc])
If you use the upper switches to print subtocs automatically but you don't
want to print them in specific chapters you can insert the commands
(!KW [ignore_subtoc]), (!KW [ignore_subsubtoc]) or
(!KW [ignore_subsubsubtoc]). If a chapter contains one of these commands
there will be printed no table of contents neither automatically nor
manually by using (!KW [subtoc]) etc.


!subsubsubheading Summary of all commands and switches

!begin_xlist [use_auto_subsubsubtocs:] !short

!item [(!KW [tableofcontents]):]
		Prints the table of contents on a separate page.
!item [(!KW [toc]):]
		Prints the table of contents inside the text.
!item [(!KW [subtoc]):]
		Prints all sections of a chapter.
!item [(!KW [subsubtoc]):]
		Prints all subsections of a section.
!item [(!KW [subsubsubtoc]):]
		Prints all paragraphs of a subsection.
!item [(!KW [use_auto_subtocs]):]
		Print all sections of a chapter automatically.
!item [(!KW [use_auto_subsubtocs]):]
		Print all subsections of a section automatically.
!item [(!KW [use_auto_subsubsubtocs]):]
		Print all paragraphs of a subsection automatically.
!item [(!KW [ignore_subtoc]):]
		Don't print the sections of the current chapter.
!item [(!KW [ignore_subsubtoc]):]
		Don't print the subsections of the current section.
!item [(!KW [ignore_subsubsubtoc]):]
		Don't print the paragraphs of the current subsection.
!end_xlist

(!HINTS)

!begin_enumerate

!item When converting to HTML the title page and the table of contents will
be printed in the file you passed via the command line.

!item When converting to RTF no table of contents will be generated! You
should make this with the functions of your text processor that is used to
import the converted RTF file.

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Gliederungsebenen
!endif
!iflang [english]
!begin_node Structuring Layers
!label Chapters, sections, subsections and paragraphs
# !begin_node Chapters, sections, subsections and paragraphs
!endif
!html_name structuring_layers.html

!iflang [german]
UDO bietet vier Gliederungsebenen an, die im Folgenden als Kapitel,
Abschnitte, Unterabschnitte und Paragraphen bezeichnet werden.

!index (!kw [node])
!index (!kw [subnode])
!index (!kw [subsubnode])
!index (!kw [subsubsubnode])
!index (!kw [begin_node])

Durch das Kommando (!KW [node]) setzen Sie den Anfang für ein neues
Kapitel und übergeben zugleich die Kapitelüberschrift. Genauso
funktionieren die Kommandos (!KW [subnode]) für einen Abschnitt,
(!KW [subsubnode]) für einen Unterabschnitt und (!KW [subsubsubnode]) für
einen Paragraph. Optional können sie die einzelnen Gliederungsebenen
auch mit (!KW [begin_node]) und (!KW [end_node]) schachteln.

Da Bilder oft mehr sagen als tausend Worte, hier ein kleines
Beispiel. Die (hier inhaltsleere) Befehlsfolge...

!begin_quote
!begin_verbatim
!node          Ein Kapitel
!subnode       Ein Abschnitt
!subsubnode    Ein Unterabschnitt
!subsubsubnode Ein Paragraph
!node          Ein neues Kapitel
!end_verbatim
!end_quote

!..stellt UDO im Inhaltsverzeichnis folgendermaßen dar:

!begin_quote
!begin_verbatim
1  Ein Kapitel
   1.1  Ein Abschnitt
        1.1.1  Ein Unterabschnitt
               1.1.1.1  Ein Paragraph

2  Ein neues Kapitel
!end_verbatim
!end_quote

WinHelp und ST-Guide bieten die Möglichkeit, Texte auch in kleinen
Dialogen, sogenannten Popups darzustellen. Möchten Sie, dass ein
Kapitel, Abschnitt oder Unterabschnitt in einem Popup dargestellt
wird, so benutzen Sie hierfür die Befehle

!index (!kw [pnode])
!index (!kw [psubnode])
!index (!kw [psubsubnode])
!index (!kw [psubsubsubnode])
!begin_itemize !short
!item (!KW [pnode]) für Popup-Kapitel,
!item (!KW [psubnode]) für Popup-Abschnitte,
!item (!KW [psubsubnode]) für Popup-Unterabschnitte und
!item (!KW [psubsubsubnode]) für Popup-Paragraphen
!end_itemize

Sie können auch Kapitel erstellen, die nicht in Inhaltsverzeichnissen
aufgeführt werden. Dazu benutzen Sie die Befehle

!index (!kw [node*])
!index (!kw [pnode*])
!index (!kw [psubnode*])
!index (!kw [psubsubnode*])
!index (!kw [psubsubsubnode*])
!index (!kw [subnode*])
!index (!kw [subsubnode*])
!index (!kw [subsubsubnode*])
!begin_itemize !short
!item (!KW [node*]) für Kapitel,
!item (!KW [subnode*]) für Abschnitte,
!item (!KW [subsubnode*]) für Unterabschnitte,
!item (!KW [subsubsubnode*]) für Paragraphen
!item (!KW [pnode*]) für Popup-Kapitel,
!item (!KW [psubnode*]) für Popup-Abschnitte,
!item (!KW [psubsubnode*]) für Popup-Unterabschnitte und
!item (!KW [psubsubsubnode*]) für Popup-Paragraphen.
!end_itemize

(!HINTS)

!begin_enumerate
!item Kapitel, die nicht in Inhaltsverzeichnissen erscheinen, werden
auch referenziert, werden aber nicht nummeriert.

!index (!kw [no_numbers])
!item UDO nummeriert Kapitel automatisch. Falls man auf die Angabe
dieser Nummern verzichten möchte, so sollte man den Schalter
(!KW [no_numbers]) im Vorspann setzen.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO offers you four layers for structuring your documentation. These layers
are called chapters, sections, subsections and paragraphs.

!index (!kw [node])
!index (!kw [subnode])
!index (!kw [subsubnode])
!index (!kw [subsubsubnode])
!index (!kw [begin_node])

Using the command (!KW [node]) you tell UDO that a new chapter begins and
you tell it how the chapter is named. The commands (!KW [subnode]),
(!KW [subsubnode]) and (!KW [subsubsubnode]) do the same for a section,
subsection and paragraph. You can also use the commands (!KW [begin_node])
and (!KW [end_node]) to structure your documentation.

Da Bilder oft mehr sagen als tausend Worte, hier ein kleines
Beispiel. Die (hier inhaltsleere) Befehlsfolge...

Watch this example (without text) to understand what I want to say:

!begin_quote
!begin_verbatim
!node          A chapter
!subnode       A section
!subsubnode    A subsection
!subsubsubnode A paragraph
!node          And a different chapter
!end_verbatim
!end_quote

The table of contents should look like this:

!begin_quote
!begin_verbatim
1  A chapter
   1.1  A section
        1.1.1  A subsection
               1.1.1.1  A Paragraph

2  And a different chapter
!end_verbatim
!end_quote

Windows Help and ST-Guide may display text in dialog boxes, too. These so
called popup nodes can be used with the following commands:

!index (!kw [pnode])
!index (!kw [psubnode])
!index (!kw [psubsubnode])
!index (!kw [psubsubsubnode])
!begin_itemize !short
!item (!KW [pnode]) for popup chapters,
!item (!KW [psubnode]) for popup sections,
!item (!KW [psubsubnode]) for popup subsections and
!item (!KW [psubsubsubnode]) for popup paragraphs
!end_itemize

Furthermore you can create chapters that don't appear in the table of
contents. Use these commands!..

!index (!kw [node*])
!index (!kw [pnode*])
!index (!kw [psubnode*])
!index (!kw [psubsubnode*])
!index (!kw [psubsubsubnode*])
!index (!kw [subnode*])
!index (!kw [subsubnode*])
!index (!kw [subsubsubnode*])
!begin_itemize !short
!item (!KW [node*]) for chapters,
!item (!KW [subnode*]) for sections,
!item (!KW [subsubnode*]) for subsections,
!item (!KW [subsubsubnode*]) for paragraphs
!item (!KW [pnode*]) for popup chapters,
!item (!KW [psubnode*]) for popup sections,
!item (!KW [psubsubnode*]) for popup subsections and
!item (!KW [psubsubsubnode*]) for popup paragraphs.
!end_itemize

(!HINTS)

!begin_enumerate

!item Chapters that aren't listed in the table of contents aren't numbered,
too. UDO will create hypertext links to them as it does for all other
chapters.

!index (!kw [no_numbers])
!item UDO enumerates the chapters automatically. If you want to display the
chapter names without numbers you can use the switch (!KW [no_numbers])
inside the preamble.

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Anhang
!endif
!iflang [english]
!begin_node Appendix
!endif
!html_name appendix-env.html
!label appendix-Umgebung

!index (!kw [begin_appendix])
!index (!kw [end_appendix])

!iflang [german]
UDO kann auch einen (!) Anhang verwalten. Der Anhang steht innerhalb
einer appendix-Umgebung, sprich: der Anhang wird durch das Kommando
(!KW [begin_appendix]) begonnen und mit (!KW [end_appendix]) beendet.

Kapitel, die im Anhang stehen, werden mit Großbuchstaben
gekennzeichnet; Abschnitte und Unterabschnitte werden auch hier
durchnummeriert. Auch hier zur Verdeutlichung ein kleines Beispiel:

!begin_quote
!begin_verbatim
!node Ein Kapitel außerhalb des Anhangs
!begin_appendix
!node          Ein Kapitel
!subnode       Ein Abschnitt
!subsubnode    Ein Unterabschnitt
!subsubsubnode Ein Paragraph
!end_appendix
!end_verbatim
!end_quote

Im Inhaltsverzeichnis werden Sie dann folgendes lesen können:

!begin_quote
!begin_verbatim
5  Ein Kapitel außerhalb des Anhangs

Anhang

A  Ein Kapitel
   A.1  Ein Abschnitt
        A.1.1 Ein Unterabschnitt
              A.1.1.1 Ein Paragraph
!end_verbatim
!end_quote

(!HINTS)

!begin_enumerate

!item Der Anhang sollte ganz am Ende des Quelltextes stehen, sprich
(!KW [end_appendix]) sollte das vorletzte Kommando vor (!KW [end_document])
sein. Nach dem Ende des Anhangs sollte man keine
weiteren Kapitel angeben, da die Kapitelnummerierung von UDO dann
fürchterlich durcheinandergeraten könnte.

!item Aufgrund der Tatsache, dass UDO die Kapitel des Anhangs mit
Buchstaben nummeriert, sollte man im Anhang nicht mehr als 26 Kapitel
benutzen.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO can manage one (!) appendix. The contents of the appendix has to be used
inside the appendix environment. This environment is started with
(!KW [begin_appendix]) and finished with (!KW [end_appendix]).

Chapters that are part of the appendix are enumerated using letters instead
of numbers. A short example:

!begin_quote
!begin_verbatim
!node  A chapter outside the appendix
!begin_appendix
!node           A chapter
!subnode        A section
!subsubnode     A subsection
!subsubsubnode  A paragraph
!end_appendix
!end_verbatim
!end_quote

The table of contents should look like this:

!begin_quote
!begin_verbatim
5  A chapter outside the appendix

Appendix

A  A chapter
   A.1  A section
        A.1.1  A subsection
               A.1.1.1  A paragraph
!end_verbatim
!end_quote


(!HINTS)

!begin_enumerate

!item You should use the appendix at the end of your source file. In other
words (!KW [end_appendix]) should be the last but one command before
(!KW [end_document]). You shouldn't use any additional chapters behind
(!KW [end_appendix]) because UDO will get confused especially while
enumerating the chapters.

!item Because UDO uses letters for creating the numbers for the chapters of
the appendix you shouldn't use more than 26 chapters inside the appendix.

!end_enumerate
!endif

!end_node

!end_node

################################################################################
################################################################################
!iflang [german]
!begin_node Texthervorhebungen
!endif
!iflang [english]
!begin_node Emphasizing text
!endif
!html_name emphasizing.html

!iflang [german]
In diesem Abschnitt werden Sie erfahren, mit welchen Kommandos und
Platzhaltern Sie Ihren Text formatieren können. UDO ermöglicht die
Zentrierung, links- und rechtsbündige Ausrichtung sowie die Einrückung
von Textpassagen, bietet verschiedene Aufzählungsumgebungen sowie eine
Umgebung für Klartext.

Darüber hinaus stehen selbstverständlich verschiedene Texteffekte
sowie die Möglichkeit, Fußnoten direkt im Text anzugeben, zur
Verfügung.
!endif
# ------------------------------------------------------------------------------
!iflang [english]
In this section you will get to know how to layout passages in different
ways. UDO supports centered, left justified, right justified and indented
text, different kinds of lists, environments for preformatted text and
tables. Furthermore you can use different text styles and footnotes.
!endif

################################################################################
!iflang [german]
!begin_node Aufzählungen
!label itemize-Umgebung
!endif
!iflang [english]
!begin_node Itemizations
!label itemize environment
!endif
!html_name itemizations.html

!iflang [german]
Mit der itemize-Umgebung lassen sich auf einfache Art und Weise
Aufzählungen erstellen, bei denen die Aufzählungspunkte (""Items"") durch
Punkte und Striche gekennzeichnet werden.

Eine itemize-Umgebung wird mit (!KW [begin_itemize]) eingeleitet und
mit (!KW [end_itemize]) beendet. Die einzelnen Aufzählungspunkte werden
jeweils mit dem Kommando (!KW [item]) gekennzeichnet.

Die Befehle zum Einleiten oder Beenden der Umgebung bzw. zum Einleiten
eines Aufzählungspunktes müssen am Zeilenanfang stehen, eventuell
eingerückt durch Leerzeichen oder Tabulatoren.

Die itemize-Umgebung kann mehrfach verschachtelt benutzt werden und
lässt sich auch mit anderen Umgebungen kombinieren.

Aus diesem kurzen Beispiel...

!begin_quote
!vinclude (!EXAMPLES)itemize1.ui
!end_quote

!.. wird:

!begin_quote
!include (!EXAMPLES)itemize1.ui
!end_quote

Und aus diesem kleinen Beispiel, in dem die itemize-Umgebung
verschachtelt benutzt wird, !..

!begin_quote
!vinclude (!EXAMPLES)itemize2.ui
!end_quote

!..erhält man

!begin_quote
!include (!EXAMPLES)itemize2.ui
!end_quote

!smallskip

!index (!kw [short])
UDO gibt nach jedem Item eine Leerzeile aus, um die Items voneinander
abzuheben. Dies ist jedoch nicht immer erwünscht, besonders dann
nicht, wenn die Items nur wenig Text enthalten und die gesamte
Aufzählung dadurch unschön auseinandergezogen würde.

Um nun Aufzählungen ""komprimiert"" auszugeben, können Sie den Schalter
(!KW [short]) direkt hinter dem Befehl (!KW [begin_itemize]) angeben.
Dies bewirkt, dass die zusätzlichen Zwischenräume in dieser nicht
ausgegeben werden. Zusätzlich wird die Unterdrückung der Ausgabe der
Zwischenräume an innere Umgebungen vererbt.

Es folgen zwei kurze Beispiele, die Ihnen zeigen sollen, wie der
Schalter (!KW [short]) eingesetzt wird und welche Auswirkungen er hat.
Im ersten Beispiel wird auf (!KW [short]) verzichtet, im zweiten
Beispiel wird er eingesetzt:

Ohne (!KW [short])!..

!begin_quote
!vinclude (!EXAMPLES)itemize3.ui
!end_quote

... ergibt dies:

!begin_quote
!include (!EXAMPLES)itemize3.ui
!end_quote

Mit (!KW [short])!..

!begin_quote
!vinclude (!EXAMPLES)itemize4.ui
!end_quote

!.. ergibt dies:

!begin_quote
!include (!EXAMPLES)itemize4.ui
!end_quote

Falls Sie keinen Unterschied erkennen sollten, so ist es in dem Format,
in dem Sie gerade dieses Handbuch lesen, nicht möglich, die
Zwischenräume zu unterdrücken.

!smallskip

(!HINTS)

!begin_enumerate

!item Als Markierung für die erste Ebene dieser Umgebung wird ein
Bullet verwendet, welches in den Systemzeichensätzen der verschiedenen
Rechner, auf denen UDO läuft, jeweils an anderer Stelle definiert ist.

!index (!kw [no_umlaute])
!item Verwendet man im Vorspann den Schalter (!KW [no_umlaute]), so
wird als Markierung für die Ebene ein 'o' statt des Bullets verwendet.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
ou can use the itemize environment for itemizations where every
single item is marked with a bullet, star, dash or point. The itemize
environment is started with (!KW [begin_itemize]) and finished with
(!KW [end_itemize]). Each item has to be marked with the
(!KW [item]) command.

You can use the itemize environment inside other environments or inside
another itemize environment.

This short example shows how to write a simple itemize environment:

!begin_quote
!vinclude (!EXAMPLES)itemize1.ui
!end_quote

!.. will be printed this way:

!begin_quote
!include (!EXAMPLES)itemize1.ui
!end_quote

And this example, where an itemize environment is used inside another
one !..

!begin_quote
!vinclude (!EXAMPLES)itemize2.ui
!end_quote

!.. will be printed this way:

!begin_quote
!include (!EXAMPLES)itemize2.ui
!end_quote

!smallskip

!index (!kw [short])
UDO separates the text of each item by an empty line. In some cases it's not
a good idea to separate the items e.g. if an item contains only some text.
In this case it would be better to suppress the empty lines to get a
compressed environment.

For printing compressed environment UDO offers you the command named
(!KW [short]) you can add to the (!KW [begin_itemize]) command. If you
add (!KW [short]) UDO won't separate the items by inserting empty lines.
Furthermore in all environments you use inside this itemize environment no
empty lines will be printed.

The following two examples show how to use the (!KW [short]) command and
which effects this command has. The first example doesn't, the second one
uses (!KW [short]):

Without (!KW [short])!..

!begin_quote
!vinclude (!EXAMPLES)itemize3.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)itemize3.ui
!end_quote

With (!KW [short])!..

!begin_quote
!vinclude (!EXAMPLES)itemize4.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)itemize4.ui
!end_quote

If you can't see any difference the destination format doesn't allow it to
suppress the item separation.

!smallskip

(!HINTS)

!begin_enumerate

!item	The items of the first itemize environment will be marked with a
bullet that is defined on different positions inside the character set of
each operating system.

!index (!kw [no_umlaute])
!item	If you use the switch (!KW [no_umlaute]) inside the preamble of
the source file the items of the first itemize environment will be marked
with an ''o'' instead of a bullet.

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Nummerierungen
!label enumerate-Umgebung
!endif
!iflang [english]
!begin_node Enumerations
!label enumerate environment
!endif
!html_name enumerations.html

!iflang [german]
Die enumerate-Umgebung ist ebenso wie die itemize-Umgebung dafür
geeignet, schnell und komfortabel durchnummerierte Aufzählungen zu
erstellen, bei denen die Aufzählungspunkte durch Zahlen oder Buchstaben
gekennzeichnet werden.

Eine enumerate-Umgebung wird mit (!KW [begin_enumerate]) eingeleitet
und mit (!KW [end_enumerate]) beendet. Die einzelnen Aufzählungspunkte
werden jeweils mit dem Kommando (!KW [item]) gekennzeichnet.

Die enumerate-Umgebung ist auch mehrfach schachtelbar und mit anderen
Umgebungen kombinierbar. Hier ein kleines, unverschachteltes Beispiel:
Aus!..

!begin_quote
!vinclude (!EXAMPLES)enum1.ui
!end_quote

!.. wird:

!begin_quote
!include (!EXAMPLES)enum1.ui
!end_quote

Und aus diesem kleinen Beispiel, in dem die enumerate-Umgebung
verschachtelt und mit dem Schalter (!KW [short]) benutzt wird,!..

!begin_quote
!vinclude (!EXAMPLES)enum2.ui
!end_quote

!..erhält man

!begin_quote
!include (!EXAMPLES)enum2.ui
!end_quote

(!HINTS)

!begin_enumerate
!item Bei den Formaten, die von Hause aus eine vergleichbare Umgebung
     anbieten (z.B. HTML) werden die Punkte nicht von UDO nummeriert.
     Daher sollte man vorsichtig mit Angaben wie ""siehe Punkt~1"" oder
     ""vergleiche Punkt~b)"" sein.

!item Die dritte Ebene dieser Umgebung wird relativ gesehen etwas
     weiter eingerückt, da die Nummerierung durch römische Zahlen mehr
     Platz benötigt.

!item Bei vielen Punkten sollte man aufpassen, nicht die Grenzen zu
     überschreiten. Wird eine Ebene mit Buchstaben nummeriert, sollte
     man nicht mehr als 26~Aufzählungspunkte benutzen.

!item Eine ausführliche Erläuterung des Schalters (!KW [short]) finden Sie in
     der Beschreibung zur itemize-Umgebung.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
The enumerate environment is useful for lists where the items have to be
enumerated with numbers or letters. It is started with
(!KW [begin_enumerate]) and finished with (!KW [end_enumerate]). Each
item has to be marked with (!KW [item]).

You can use the itemize environment inside other environments or inside
another itemize environment.

This short example shows how to write a simple itemize environment:

!begin_quote
!vinclude (!EXAMPLES)enum1.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)enum1.ui
!end_quote

In the following example the enumerate environment is used twice and it will
be compressed because of the usage of (!KW [short]):

!begin_quote
!vinclude (!EXAMPLES)enum2.ui
!end_quote

!.. becomes:

!begin_quote
!include (!EXAMPLES)enum2.ui
!end_quote

(!HINTS)

!begin_enumerate

!item	UDO doesn't enumerate the items for all destination formats. E.g.
HTML and (!LaTeX) enumerate the items themselves so you have to be cautious
with using text like ""see item~1"" or ""see point~b)"".

!item	The third layer of enumerate environments will be indented deeper
than the other layers because Roman numbers need a little bit more space.

!item	Because the second layer is enumerated with letters you shouldn't
use more than 26~items.

!item	A description of the (!KW [short]) command is part of the chapter
""Itemizations"".

!end_enumerate

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Beschreibungen
!label description-Umgebung
!endif
!iflang [english]
!begin_node Descriptions
!label description environment
!endif
!html_name descriptions.html

!iflang [german]
Die description-Umgebung ist dafür geeignet, eine Beschreibung von
mehreren Begriffen zu erzeugen, wobei Begriffe fett dargestellt werden.

Ein Aufzählungspunkt wird durch (!KW [item] [[<text>!!]]) gekennzeichnet,
wobei ""<text>"" in der Aufzählung fett dargestellt wird.

Die description-Umgebung ist mehrfach schachtelbar und lässt sich auch
mit anderen Umgebungen kobinieren. Hier ein kleines, unverschachteltes
Beispiel: Aus!..

!begin_quote
!vinclude (!EXAMPLES)descript1.ui
!end_quote

!.. wird:

!begin_quote
!include (!EXAMPLES)descript1.ui
!end_quote

Aus diesem Beispiel, in dem die description-Umgebung verschachtelt und
mit dem Schalter (!KW [short]) benutzt wird!..

!begin_quote
!vinclude (!EXAMPLES)descript2.ui
!end_quote

!..erhält man

!begin_quote
!include (!EXAMPLES)descript2.ui
!end_quote

(!HINTS)

!begin_enumerate
!item Wenn der zu beschreibende Text eine schließende eckige Klammer
     beinhaltet, so muss man dieser Klammer ein Ausrufezeichen
     voranstellen, damit UDO erkennt, dass die folgende eckige Klammer
     auch fett dargestellt werden soll.

!item Der in den eckigen Klammer angegebene Text wird auch in HTML fett
     ausgegeben, obwohl dies eher untypisch für HTML ist. In einer der
     nächsten Versionen wird man dies ändern können.

!item Eine ausführliche Erläuterung des Schalters (!KW [short]) finden Sie in
     der Beschreibung zur itemize-Umgebung.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Use the description environment for describing some words. Start the
environment with (!KW [begin_description]) and finish it using
(!KW [end_description]).

A word that has to be described is used with the (!KW [item])
command inside brackets and will be displayed with bold text.

The description environment can be used inside other (description)
environments. This example!..

!begin_quote
!vinclude (!EXAMPLES)descript1.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)descript1.ui
!end_quote

In this example the description environment is used inside another one and
the (!KW [short]) is used, too:

!begin_quote
!vinclude (!EXAMPLES)descript2.ui
!end_quote

!.. becomes:

!begin_quote
!include (!EXAMPLES)descript2.ui
!end_quote

(!HINTS)

!begin_enumerate

!item	If the word that shall be displayed in bold text contains a ""]""
you have to quote it with an exclamation mark to tell UDO that it has to
be printed in bold text, too.

!item	The HTML version of your source file will print the descriptions in
bold text, too, even if this not typical for HTML. The next versions of UDO
will offer a command to disable the bold text inside descriptions for HTML.

!item	A description of the (!KW [short]) command is part of the chapter
""Itemizations"".

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Listen
!label xlist-Umgebung
!endif
!iflang [english]
!begin_node Lists
!label xlist environment
!endif
!html_name lists.html

!iflang [german]
Die xlist-Umgebung eignet sich, genau wie die description-Umgebung, zur
Erläuterung von Begriffen. Bei dieser Umgebung werden die
Beschreibungen der Begriffe jedoch alle untereinander aufgeführt. Wie
weit die Beschreibungen eingerückt wird, hängt von der Länge des bei
(!KW [begin_xlist] [[<text>!!]]) übergebenen Textes ab. Die beiden eckigen
Klammern werden dabei nicht mitgezählt.

Die Umgebung wird mit (!KW [begin_xlist] [[<text>!!]]) eingeleitet und mit
(!KW [end_xlist]) beendet. Ein Aufzählungsbegriff wird wie bei der
description-Umgebung durch (!KW [item] [[<text>!!]]) gekennzeichnet.

Die Umgebungen können mehrfach verschachtelt benutzt werden und lassen
sich auch mit anderen Umgebungen kombinieren.

Aus!..

!begin_quote
!vinclude (!EXAMPLES)xlist1.ui
!end_quote

!.. wird:

!begin_quote
!include (!EXAMPLES)xlist1.ui
!end_quote


Der bereits in den vorherigen Kapiteln besprochene Schalter
(!KW [short]) lässt sich auch bei den Listen einsetzen. Um eine
""komprimierte"" Liste zu erzeugen, geben Sie einfach den Schalter am
Ende der Zeile an. Auch hier ein Beispiel:

!begin_quote
!vinclude (!EXAMPLES)xlist2.ui
!end_quote

!.. wird so ausgegeben:

!begin_quote
!include (!EXAMPLES)xlist2.ui
!end_quote


!label blist-Umgebung
!label ilist-Umgebung
!label tlist-Umgebung
Seit Release 6 gibt es drei weitere Umgebungen, die genauso
funktionieren wie die hier gezeigte xlist-Umgebung. Bei diesen
Umgebungen werden jedoch die Texte, die sich innerhalb der eckigen
Klammern befinden, automatisch mit anderen Schriftarten ausgegeben.

!begin_enumerate

!item Bei der blist-Umgebung (bold list) werden die Items fett
ausgegeben. Die blist-Umgebung wird mit (!KW [begin_blist]) eingeleitet
und mit (!KW [end_blist]) beendet.

!item Bei der ilist-Umgebung (italic list) werden die Items kursiv
ausgegeben. Die ilist-Umgebung wird mit (!KW [begin_ilist]) eingeleitet
und mit (!KW [end_ilist]) beendet.

!item Bei der tlist-Ugebung (typewritered list) werden die Items
nichtproportinal ausgegeben. Die tlist-Umgebung wird mit
(!KW [begin_tlist]) eingeleitet und mit (!KW [end_tlist]) beendet.

!end_enumerate

!smallskip

Das folgende Beispiel soll demonstrieren, wie das Ergebnis aussieht.
Zunächst der UDO-Quelltext:

!begin_quote
!vinclude (!EXAMPLES)xlist3.ui
!end_quote

Das Ergebnis sieht dann so aus:

!begin_quote
!include (!EXAMPLES)xlist3.ui
!end_quote

!smallskip

Bezüglich dieser Listen-Umgebungen gibt es einige Dinge zu beachten:

!begin_enumerate
!item Wenn der zu beschreibende Text eine schließende eckige Klammer
beinhaltet, so muss man dieser Klammer ein Ausrufezeichen
voranstellen, damit UDO erkennt, dass die folgende eckige Klammer
noch zum ""linken Teil"" des Punktes zählt.

!index (!kw [html_no_xlist])
!item Bei HTML erzeugt für diese Listen Tabellen Leider
unterscheiden sich Navigator und IE bei der Ausgabe der Tabellen.
Falls nicht gewünscht kann man per (!KW [html_no_xlist]) veranlassen,
dass die Listen als description-Umgebungen ausgeben werden.
# !item HTML, Linuxdoc-SGML und Texinfo bietet keine direkte
# Unterstützung für Listen diesen Typs, daher werden Listen wie
# Beschreibungen behandelt. Benutzt man jedoch den Schalter
# (!KW [use_xlist]) im Vorspann, werden diese Listen wie beim
# ASCII-Format ausgegeben, jedoch dann als vorformatierter Text,

!index (!kw [rtf_charwidth])
!index (!kw [win_charwidth])
!item UDO kennt nicht die Schriftbreiten der benutzten Fonts für
WinHelp und RTF. Falls die Einrückungen zu groß oder zu klein
ausfallen, kann man die Tiefe durch die Schalter (!KW [rtf_charwidth])
bzw. (!KW [win_charwidth]) korrigieren.

!item Eine ausführliche Erläuterung des Schalters (!KW [short]) finden Sie in
der Beschreibung zur itemize-Umgebung.

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Like the description environment this set of commands is useful to
describe words. Using this environment the description of each word
is displayed beneath one another.

The xlist environment starts with (!KW [begin_xlist]) and
finishes with (!KW [end_xlist]). You have to tell UDO in brackets
how wide it should indent the descriptions of each item. Usually you
use the longest word in brackets. Each word that has to be described
has to used inside the brackets of the (!KW [item]) command.

You can use the xlist environment inside other (xlist) environments, too.

This short example!..

!begin_quote
!vinclude (!EXAMPLES)xlist1.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)xlist1.ui
!end_quote

The command (!KW [short]) can also be used for xlist environments. To get
a compressed list just add (!KW [short]) at the end of the line that
contains (!KW [begin_xlist]). Once more a short example:

!begin_quote
!vinclude (!EXAMPLES)xlist2.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)xlist2.ui
!end_quote


!label blist environment
!label ilist environment
!label tlist environment
Since Release 6 UDO offers three additional environments that are similar
to the xlist environment. In contrast to the xlist environment the items
will be displayed in bold, italic or typewritered text.

!begin_enumerate

!item	When using the blist environment (bold list) the items will be
displayed in bold text. A blist environment will be started with
(!KW [begin_blist]) and finished with (!KW [end_blist]).

!item	When using the ilist environment (italic list) the items will be
displayed in italic text. A blist environment will be started with
(!KW [begin_ilist]) and finished with (!KW [end_ilist]).

!item	When using the tlist environment (typewritered list) the items will be
displayed in typewritered text. A tlist environment will be started with
(!KW [begin_tlist]) and finished with (!KW [end_tlist]).

!end_enumerate

!smallskip

The following example shall demonstrate the results:

!begin_quote
!vinclude (!EXAMPLES)xlist3.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)xlist3.ui
!end_quote

!smallskip

You have to notice some aspects:

!begin_enumerate
!item	If the text inside the brackets contains a ""]"" you have to quote
it with an exclamation mark so that UDO will recognize that this ""]"" shall
be part of the item and shall be displayed on the ""left side"".

!index (!kw [html_no_xlist])
!item Bei HTML erzeugt für diese Listen Tabellen Leider
unterscheiden sich Navigator und IE bei der Ausgabe der Tabellen.
Falls nicht gewünscht kann man per (!KW [html_no_xlist]) veranlassen,
dass die Listen als description-Umgebungen ausgeben werden.
# !item	HTML, Linuxdoc-SGML and Texinfo don't support an environment like
# UDO's xlist environment. In these formats the xlist environments are
# displayed like a description environment by default. But if you use the
# switch (!KW [use_xlist]) inside the preamble UDO will print xlist
# environments like in ASCII, but with preformatted text.

!item	UDO doesn't know the character widths when converting the source
file to RTF and Windows Help. If the indents are too wide you can adjust the
indent by using the commands (!KW [rtf_charwidth]) and
(!KW [win_charwidth]).

!item	A description of the (!KW [short]) command is part of the chapter
""Itemizations"".

!end_enumerate

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Zentrieren von Zeilen
!label center-Umgebung
!endif
!iflang [english]
!begin_node Centered text
!label center environment
!endif
!html_name centered.html

!iflang [german]
Zeilen, die innerhalb einer center-Umgebung stehen, werden in der
Ausgabedatei zentriert dargestellt, sofern das jeweilige Ausgabeformat
zentrierten Text unterstützt.

Die center-Umgebung kann innerhalb anderer Umgebungen verwendet werden,
auch innerhalb einer anderen center-Umgebung (so sinnlos das auch sein
mag).

Werden andere Umgebungen innerhalb der center-Umgebung verwendet, dann
werden diese wie sonst auch ausgegeben. Erst wenn die center-Umgebung
wieder aktiv ist, wird Text zentriert ausgegeben.

Falls das folgende kleine Beispiel nicht zentriert wird, liegt das
daran, dass das Format der Dokumentation, die Sie gerade lesen, keine
Zentrierungen zulässt. Aus!..

!begin_quote
!vinclude (!EXAMPLES)center.ui
!end_quote

!..wird:

!begin_quote
!include (!EXAMPLES)center.ui
!end_quote

Wie man sieht, formatiert UDO Absätze auch hier. Um einen manuellen
Zeilenumbruch zu setzen, bedient man sich des Befehls (!KKW [nl]).

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Lines that are part of a center environment will be displayed centred if
the destination format centers text.

You can use the center environment inside other environments. You can also
use it inside another center environment, even if this may be senseless.

If you use other environments inside a center environment they will be
layouted like in all other cases. Only when the center environment is the
active one text will be printed centered.

If the following example isn't centered the current documentation format
doesn't allow it to use centered text.

!begin_quote
!vinclude (!EXAMPLES)center.ui
!end_quote

!.. will be printed in this way:

!begin_quote
!include (!EXAMPLES)center.ui
!end_quote

You see that UDO layouts paragraphs of a center environment, too. To insert
a manual line break use the (!KKW [nl]) command.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Rechtsbündiger Text
!label flushright-Umgebung
!endif
!iflang [english]
!begin_node Right justified text
!label flushright environment
!endif
!html_name justifiedright.html

!iflang [german]
Zeilen, die innerhalb einer flushright-Umgebung stehen, werden in der
Ausgabedatei rechtsbündig dargestellt, sofern das jeweilige
Ausgabeformat rechtsbündigen Text unterstützt.

Die flushright-Umgebung kann innerhalb anderer Umgebungen verwendet
werden, auch innerhalb einer anderen flushright-Umgebung (so sinnlos
das auch sein mag).

Werden andere Umgebungen innerhalb der flushright-Umgebung verwendet,
dann werden diese wie sonst auch ausgegeben. Erst wenn die
flushright-Umgebung wieder aktiv ist, wird Text rechtsbündig
ausgegeben.

Falls das folgende kleine Beispiel nicht rechtsbündig dargestellt wird,
so liegt das daran, dass das Format der Dokumentation, die Sie gerade
lesen, keinen rechtsbündigen Text zulässt. Aus!..

!begin_quote
!vinclude (!EXAMPLES)flushright.ui
!end_quote

!..wird:

!begin_quote
!include (!EXAMPLES)flushright.ui
!end_quote

Wie man sieht, formatiert UDO Absätze auch hier. Um einen manuellen
Zeilenumbruch zu setzen, bedient man sich des Befehls (!KKW [nl]).

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Lines that are part of a flushright environment will be displayed right
justified if the destination format supports right justified text.

You can use the flushright environment inside other environments. You can also
use it inside another flushright environment, even this may be senseless.

If you use other environments inside a flushright environment they will be
layouted like in all other cases. Only when the flushright environment is the
active one text will be printed right justified.

If the following example isn't printed right justified the current
documentation format doesn't allow it to use right justified text.

!begin_quote
!vinclude (!EXAMPLES)flushright.ui
!end_quote

!.. will be printed in this way:

!begin_quote
!include (!EXAMPLES)flushright.ui
!end_quote

You see that UDO layouts paragraphs of a flushright environment, too. To
insert a manual line break use the (!KKW [nl]) command.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Linksbündiger Text
!label flushleft-Umgebung
!endif
!iflang [english]
!begin_node Left justified text
!label flushleft environment
!endif
!html_name justifiedleft.html

!iflang [german]
Zeilen, die innerhalb einer flushleft-Umgebung stehen, werden in der
Ausgabedatei linksbündig ohne Blocksatz dargestellt.

Die flushleft-Umgebung kann innerhalb anderer Umgebungen verwendet
werden, auch innerhalb einer anderen flushleft-Umgebung, so sinnlos
das auch sein mag.

Werden andere Umgebungen innerhalb der flushleft-Umgebung verwendet,
dann werden diese wie sonst auch ausgegeben. Erst wenn die
flushleft-Umgebung wieder aktiv ist, wird Text linksbündig ausgegeben.

Die flushleft-Umgebung eignet sich dafür, Text bei den Formaten
linksbündig auszugeben, die sonst standardmäßig Blocksatz erzeugen.
Ein Beispiel:

Aus!..

!begin_quote
!vinclude (!EXAMPLES)flushleft.ui
!end_quote

!..wird:

!begin_quote
!include (!EXAMPLES)flushleft.ui
!end_quote

Wie man sieht, formatiert UDO Absätze auch hier. Um einen manuellen
Zeilenumbruch zu setzen, bedient man sich des Befehls (!KKW [nl]).

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Lines that are part of a flushleft environment will be displayed left
justified without justification.

Er, do you understand that? No? OK, one more try. If you use the switch
(!KW [use_justification]) UDO adjusts the lines by inserting spaces between
the words so that you have a proper right margin. But UDO won't insert
spaces between words of a flushleft environment.

You can use the flushleft environment inside other environments. You can also
use it inside another flushleft environment, even this may be senseless.

If you use other environments inside a flushleft environment they will be
layouted like in all other cases. Only when the flushleft environment is the
active one text will be printed without justification.

This short example!..

!begin_quote
!vinclude (!EXAMPLES)flushleft.ui
!end_quote

!.. will be printed in this way:

!begin_quote
!include (!EXAMPLES)flushleft.ui
!end_quote

You see that UDO layouts paragraphs of a flushleft environment, too. To
insert a manual line break use the (!KKW [nl]) command.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Einrücken von Absätzen
!label quote-Umgebung
!endif
!iflang [english]
!begin_node Indented paragraphs
!label quote environment
!endif
!html_name indentations.html

!iflang [german]
Die quote-Umgebung dient dazu, Passagen eingerückt darzustellen. Diese
Umgebung wird mit (!KW [begin_quote]) eingeleitet und mit (!KW [end_quote]) beendet.
Die quote-Umgebung lässt sich mehrfach ineinander benutzen, man kann
Sie auch mit anderen Umgebungen kombinieren.

Diese Umgebung eignet sich dazu, Textpassagen deutlicher vom
restlichen Text abzuheben. Dieser Effekt wurde auch bei folgendem
Beispiel erzielt:

!begin_quote
!vinclude (!EXAMPLES)quote.ui
!end_quote

!..wird:

!begin_quote
!include (!EXAMPLES)quote.ui
!end_quote

(!HINT)

Bei HTML werden die Einrückungen durch (!V)<BLOCKQUOTE>(!v) erzeugt.
Netscape und CAB geben solche Absätze auch eingerückt aus; Mosaic
hingegen rückt diese Absätze nicht ein, sondern ermöglicht lediglich
die Zuweisung eines speziellen Fonts. Als Defaulteinstellung wird hier
ein kursiver Font benutzt.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
o display indented paragraphs you can use the quote environment which is
started with (!KW [begin_quote]) and finished with (!KW [end_quote]).
You can use the quote environment inside another quote environment or inside
other environments.

This environment is useful to emphasize passages. This effect is used in the
following example:

!begin_quote
!vinclude (!EXAMPLES)quote.ui
!end_quote

!.. becomes:

!begin_quote
!include (!EXAMPLES)quote.ui
!end_quote

(!HINT)

When converting to HTML the tag (!V)<BLOCKQUOTE>(!v) is used.
Netscape and CAB display paragraphs indented but Mosaic displays them just
with another font.
!endif

!end_node

################################################################################
# 22.01.1996: Hinweis auf die raw-Umgebung
!iflang [german]
!begin_node Vorformatierter Text
!label verbatim-Umgebung
!endif
!iflang [english]
!begin_node Preformatted text
!label verbatim environment
!endif
!html_name preformatted_text.html

!iflang [german]
UDO sorgt selbständig für die Formatierung des auzugebenden Textes.
Dies ist jedoch nicht immer erwünscht. Will man beispielsweise
Schnippsel eines Sourcecodes darstellen, wäre es fatal, würde UDO hier
eine Formatierung vornehmen.

Zur Ausgabe von vorformatiertem Text kann man sich daher der
verbatim-Umgebung bedienen, welche mit (!KW [begin_verbatim]) begonnen
und mit (!KW [end_verbatim]) beendet wird.

Der Text, der innerhalb dieser Umgebung steht, wird nicht besonders
behandelt, sprich es wird der Zeilenumbruch exakt übernommen und es
werden keine UDO-Kommandos (bis auf (!KW [end_verbatim])) bearbeitet.
Steht eine verbatim-Umgebung allerdings in einer anderen Umgebung, so
wird der vorformatierte Text zusätzlich eingerückt. Beachten Sie dazu
auch den Hinweis am Ende dieses Abschnitts.

Bei der Ausgabe ins (!LaTeX)-Format werden die gleichnamigen Befehle
(!V)\begin{verbatim}(!v) und (!V)\end{verbatim}(!v) ausgegeben, bei den
anderen Formaten wird (falls nötig) ein nichtproportionaler Font
eingestellt und Sonderzeichen automatisch angepasst.

!index (!kw [tabwidth])
Tabulatoren, die innerhalb einer verbatim-Umgebung auftauchen, werden
von UDO automatisch durch Leerzeichen ersetzt. Durch den Schalter (!KW [tabwidth])
können Sie UDO mitteilen, mit welcher Tabulatorbreite der
Text geschrieben wurde.

!smallskip

!index (!kw [vinclude])
Da innerhalb einer verbatim-Umgebung keine UDO-Kommandos und somit auch
nicht (!KW [include]) beachtet werden, wäre es nicht möglich, eine
externe Datei einzuladen und diese unformatiert darzustellen. Aus
diesem Grund bietet UDO den Befehl (!KW [vinclude]) an, der eine
Befehlskombination aus (!KW [begin_verbatim]), (!KW [include]) und
(!KW [end_verbatim]) darstellt.

Falls Sie jedoch Passagen benutzen wollen, die bereits im Ausgabeformat
geschrieben wurden (z.B. eine mit (!LaTeX) gesetzte Tabelle), so muss man
sich der raw-Umgebung bedienen.

!smallskip

(!HINTS)

!begin_enumerate

!item Da andere Umgebungen im Quelltext eingerückt werden können,
erscheint es verlockend, auch eine verbatim-Umgebung im Quelltext
passend einzurücken. Bedenken Sie allerdings, dass führende Leerzeichen
bei der Ausgabe des vorformatierten Textes übernommen werden und dieser
dann in der späteren Ausgabedatei zuweit rechts stehen wird, falls Sie
den Text der verbatim-Umgebung einrücken.

!item Der Unterschied zur raw-Umgebung besteht darin, dass der Text der
verbatim-Umgebung 1:1 dargestellt wird. Text der raw-Umgebung wird
hingegen 1:1 übernommen und dient daher der Einbindung spezieller
Formatbefehle.

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO layouts the text of the source file on its own. But sometimes you don't
want that because you want to display preformatted things like parts of a
source code or something else.

To display preformatted text you can use the verbatim environment that
is started with (!KW [begin_verbatim]) and finished with
(!KW [end_verbatim]). No UDO commands(!N)except
(!KW [end_verbatim])(!n) or placeholders will be converted. Text
inside this environment will be indented like normal text.

When converting into (!LaTeX) the commands of UDO will be just
replaced by the (!LaTeX) commands (!V)\begin{verbatim}(!v) and
(!V)\end{verbatim}(!v). When converting to another format UDO adjusts
special chars and displays the text with a non-proportional font.

!index (!kw [tabwidth])
If the lines of the verbatim environment contain tabs (ASCII~9) UDO will
replace them by spaces according to the (!KW [tabwidth]) setting.

!smallskip

Because no commands inside a verbatim environment are noticed you
cannot use the (!KW [include]) command inside this environment.

!index (!kw [vinclude])
To enable you to include an external file and display it as it would
be inside a verbatim environment UDO offers you the command
(!KW [vinclude]). This command is a mixture of
(!KW [begin_verbatim]), (!KW [include]) and
(!KW [end_verbatim]).

To write special commands for the destination format you cannot use
this environment. You have to use the raw environment instead.

!smallskip

(!HINTS)

!begin_enumerate

!item	Because the text of a verbatim environment is indented like
normal text you shouldn't use extra spaces at the beginning of each
line.

!item	The difference between the raw environment and the verbatim
environment is that text of a verbatim environment will be displayed an you
entered it, but text of a raw environment will be saved into the destination
file as you entered it.

!end_enumerate

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Text-Screenshots darstellen
!label linedraw-Umgebung
!endif
!iflang [english]
!begin_node Display line graphics
!label linedraw environment
!endif
# "Text-" ergänzt (zur Klarstellung) - U. Kretschmer 07.12.2003
!html_name linegraphics.html

!iflang [german]
Normalerweise ersetzt UDO DOS-Grafikzeichen durch die ASCII-Zeichen ""+"",
""-"" und ""|"", um z.B. DOS-Screenshots halbwegs realistisch
darzustellen. Eine direkte Einbindung von Screenshots, die DOS-Grafikzeichen
enthalten, ist daher nicht möglich.

Zur Ausgabe von Screenshots kann man sich daher der
linedraw-Umgebung bedienen, welche mit (!KW [begin_linedraw]) begonnen
und mit (!KW [end_linedraw]) beendet wird.

Der Text, der innerhalb dieser Umgebung steht, wird wie in einer
verbatim-Umgebung dargestellt, d.h. nicht besonders
behandelt, der Zeilenumbruch wird exakt übernommen und es
werden keine UDO-Kommandos (bis auf (!KW [end_linedraw])) bearbeitet.
Steht eine linedraw-Umgebung allerdings in einer anderen Umgebung, so
wird der vorformatierte Text zusätzlich eingerückt.

Bei Nicht-RTF-Formaten wird auf den DOS-Zeichensatz umgeschaltet,
bei RTF wird der Zeichensatz ""(!url [MS Linedraw] [http://www.kostis.net/charsets/mslinedr.htm])""
benutzt. Bei der Ausgabe ins (!LaTeX)-Format werden die Befehle
(!V)\begin{verbatim}(!v) und (!V)\end{verbatim}(!v) ausgegeben, bei den
anderen Formaten wird (falls nötig) ein nichtproportionaler Font
eingestellt und Sonderzeichen automatisch angepasst.

!index (!kw [tabwidth])
Tabulatoren, die innerhalb einer linedraw-Umgebung auftauchen, werden
von UDO automatisch durch Leerzeichen ersetzt. Durch den Schalter (!KW [tabwidth])
können Sie UDO mitteilen, mit welcher Tabulatorbreite der
Text geschrieben wurde.

!index (!kw [ldinclude])
Da innerhalb einer linedraw-Umgebung keine UDO-Kommandos und somit auch
nicht (!KW [include]) beachtet werden, wäre es nicht möglich, eine
externe Datei einzuladen und diese unformatiert darzustellen. Aus
diesem Grund bietet UDO den Befehl (!KW [ldinclude]) an, der eine
Befehlskombination aus (!KW [begin_linedraw]), (!KW [include]) und
(!KW [end_linedraw]) darstellt.

!smallskip

(!HINTS)

!begin_enumerate
!item Da andere Umgebungen im Quelltext eingerückt werden können,
     erscheint es verlockend, auch eine linedraw-Umgebung im Quelltext
     passend einzurücken. Bedenken Sie allerdings, dass führende
     Leerzeichen bei der Ausgabe des vorformatierten Textes übernommen
     werden und dieser dann in der späteren Ausgabedatei zuweit rechts
     stehen wird, falls Sie den Text der linedraw-Umgebung einrücken.

!item Word für Windows zeigt die Passagen korrekt an, WordPad95 hingegen nicht (warum auch immer).

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Normally UDO will replace all DOS graphic characters by the ASCCI characters
""+"", ""-"" and ""|"". So including DOS screenshots is not possible.

To display DOS screenshots you can use the linedraw environment,
which is started with (!KW [begin_linedraw]) and finished with
(!KW [end_linedraw]).

No UDO commands(!N)except
(!KW [end_linedraw])(!n) or placeholders will be converted. Text
inside this environment will be indented like normal text.

When converting into RTF, the font ""(!url [MS Linedraw] [http://www.kostis.net/charsets/mslinedr.htm])""
will be used, other formats will use the DOS character set.
When converting into (!LaTeX) the commands of UDO will be just
replaced by the (!LaTeX) commands (!V)\begin{verbatim}(!v) and
(!V)\end{verbatim}(!v). When converting to another format UDO adjusts
special chars and displays the text with a non-proportional font.

!index (!kw [tabwidth])
If the lines of the linedraw environment contain tabs (ASCII~9) UDO will
replace them by spaces according to the (!KW [tabwidth]) setting.

!index (!kw [ldinclude])
Because no commands inside a verbatim environment are noticed you
cannot use the (!KW [include]) command inside this environment.

To enable you to include an external file and display it as it would
be inside a linedraw environment UDO offers you the command
(!KW [ldinclude]). This command is a mixture of
(!KW [begin_linedraw]), (!KW [include]) and
(!KW [end_linedraw]).

!smallskip

(!HINTS)

!begin_enumerate

!item	Because the text of a linedraw environment is indented like
normal text you shouldn't use extra spaces at the beginning of each
line.

!item Word for Windows displays the graphics correctly,
whereas WordPad95 does not.

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Fußnoten
!endif
!iflang [english]
!begin_node Footnotes
!endif
!html_name footnotes.html

!iflang [german]
Text, der durch (!KK1 [N]) und (!KK1 [n]) eingefasst wird, wird in eine Fußnote
umgewandelt, sofern das Ausgabeformat Fußnoten unterstützt. Bei den
anderen Ausgabeformaten wird (!KK1 [N]) einfach durch ""~("" und (!KK1 [n]) durch
"")"" ersetzt; die Fußnote erscheint hier also einfach in Klammern.

Wichtig: Vor (!KK1 [N]) sollte kein Leerzeichen stehen, da sonst die
Fußnotenmarkierung später in der Ausgabedatei frei im Raum steht und
der Bezug weniger klar erkenntlich wird! Unterstützt das Ausgabeformat
keine Fußnoten, gibt UDO vor der öffnenden Klammer zusätzlich noch das
fehlende Leerzeichen aus.

Aus!..

!begin_quote
!vinclude (!EXAMPLES)footnotes.ui
!end_quote

wird!..

!begin_quote
!include (!EXAMPLES)footnotes.ui
!end_quote

Fußnoten werden von folgenden Formaten unterstützt:

!begin_itemize !short
!item (!LaTeX)
!item Linuxdoc-SGML
!item LyX
!item Texinfo
!item RTF
!end_itemize

(!HINTS)

!begin_enumerate
!item Dass UDO bei den Formaten, die keine Fußnoten unterstützen, den
     Fußnotentext einfach in Klammern setzt, ist natürlich etwas
     unglücklich. Besser wäre es, UDO würde hier die Fußnotentexte
     sammeln und am Ende eines Kapitels ausgeben. Leider ist dies eine
     recht kniffelige Angelegenheit, die nicht von heute auf morgen
     gelöst werden kann.

!item Denken Sie daran, vor (!KK1 [N]) kein Leerzeichen zu verwenden.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Text that is used between (!KKW [N]) and (!KK1 [n]) will be shown as a
footnote when converting to a format that supports footnotes. Otherwise
(!KK1 [N]) will be replaced by ''~('', (KK1 [n]) will be replaced by
'')''.

Important hint: Before (!KK1 [N]) you shouldn't use a blank. If you do so
the footnote mark would ""fly"" without context or before the ''('' you
could read two blanks.

This example!..

!begin_quote
!vinclude (!EXAMPLES)footnotes.ui
!end_quote

wird!..

!begin_quote
!include (!EXAMPLES)footnotes.ui
!end_quote

Footnotes are supported by these formats:

!begin_itemize !short
!item (!LaTeX)
!item Linuxdoc-SGML
!item LyX
!item Texinfo
!item RTF
!end_itemize

(!HINTS)

!begin_enumerate

!item	I'm a bit unlucky that UDO just prints brackets if the destination
format doesn't support footnotes. It will be better if UDO saves the
footnote text and prints it at the end of a chapter or page. Unfortunately
this is a very tricky problem that cannot be solved in some days.

!item	Don't forget not to use a space or tab before (!KK1 [N]).

!end_enumerate

!endif

!end_node

################################################################################
# ToDo: 31.01.1996: Hinweis auf !no_effects
!iflang [german]
!begin_node Schriftarten
!endif
!iflang [english]
!begin_node Text styles
!endif
!html_name styles.html

!iflang [german]
UDO ermöglicht es Ihnen, bereits im Quelltext festzulegen, in welcher
Schriftart Worte oder Sätze im Ausgabeformat erscheinen soll.

!include (!EXAMPLES)effects.ui

Um für eine Textpassage eine passende Schriftart zu setzen, müssen Sie
diese mit den zugehörigen Platzhaltern klammern. Lange Rede, kurzer
Sinn, hier der Quelltext, der den oberen Absatz erzeugt hat:

!vinclude (!EXAMPLES)effects.ui

In der folgenden Tabelle können Sie ablesen, durch welche Kommandos
die Schriftarten im jeweiligen Format erzeugt werden:

#Ausgabe-Formate
!begin_table [|l|l|l|l|l|l|l|] !hline
UDO        !! ASCII         !! ST-Guide         !! LaTeX               !! RTF          !! WinHelp         !! HTML
!hline
(!KK1 [B]) !! (!V)*(!v)     !! (!V)@{B}(!v)     !! (!V){\bf(!v)        !! (!V){\b(!v)  !! (!V){\b(!v)     !! (!V)<B>(!v)
(!KK1 [b]) !! (!V)*(!v)     !! (!V)@{b}(!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</B>(!v)
(!KK1 [I]) !! (!V)/(!v)     !! (!V)@{I}(!v)     !! (!V){\it(!v)        !! (!V){\i(!v)  !! (!V){\i(!v)     !! (!V)<I>(!v)
(!KK1 [i]) !! (!V)/(!v)     !! (!V)@{i}(!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</I>(!v)
(!KK1 [U]) !! (!V)_(!v)     !! (!V)@{U}(!v)     !! (!V){\underline(!v) !! (!V){\ul(!v) !! (!V){\ul(!v)    !! (!V)<U>(!v)
(!KK1 [u]) !! (!V)_(!v)     !! (!V)@{u}(!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</U>(!v)
(!KK1 [V]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V)\verb+(!v)      !! (!V){\f1(!v) !! (!V){\f1(!v)    !! (!V)<PRE>(!v)
(!KK1 [v]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V)+(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</PRE>(!v)
(!KK1 [T]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V){\tt(!v)        !! (!V){\f1(!v) !! (!V){\f1(!v)    !! (!V)<TT>(!v)
(!KK1 [t]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</TT>(!v)
!hline
!end_table

Wie man sieht, werden bei der Ausgabe ins ASCII-Format die Zeichen zur
Einschaltung von Schriftarten benutzt, wie sie im Usenet üblich
sind. Die Zeichen werden bei der Ermittlung von Zeilenlängen nicht
berücksichigt.

!index (!kw [no_effects])
Wenn man bei einem Ausgabeformat keine Schriftarten benutzen möchte,
so kann man die Ausgabe der Schriftartbefehle durch die Angabe des
Schalter (!KW [no_effects]) unterdrücken. Der Schalter muss dabei zusammen mit
dem/den gewünschten Format(en) im Vorspann angegeben werden. Um z.B.
keine Schriftarten beim ASCII- und Manualpage-Format zu benutzen, so
benutzt man dafür (!KW [no_effects] [[asc,man!!]]).

(!HINT)

Mit Definitionen lassen sich leicht benutzerdefinierte Schriftarten
erstellen. Dazu muss man natürlich Kenntnis der Formatbefehle des
jeweiligen Formates haben. Im folgenden Beispiel wird gezeigt, wie man
die vom ST-Guide unterstützte helle Schrift ein- und ausschalten kann:

!begin_quote
!begin_verbatim
!ifdest [stg]
  !define G @{G}
  !define g @{g}
!else
  !define G
  !define g
!endif

Normal und (!G)ghosted(!g).
!end_verbatim
!end_quote

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO enables you to set text styles right inside the source file.

!include (!EXAMPLES)effects.ui

If you want to display a single word or some words in a certain text style
you have to use them between the according placeholders. Look, how the upper
paragraph was made:

!vinclude (!EXAMPLES)effects.ui

In this table you will see in which way the placeholders will be replaced:

#Ausgabe-Formate
!begin_table [|l|l|l|l|l|l|l|] !hline
UDO        !! ASCII         !! ST-Guide         !! LaTeX               !! RTF          !! WinHelp         !! HTML
!hline
(!KK1 [B]) !! (!V)*(!v)     !! (!V)@{B}(!v)     !! (!V){\bf(!v)        !! (!V){\b(!v)  !! (!V){\b(!v)     !! (!V)<B>(!v)
(!KK1 [b]) !! (!V)*(!v)     !! (!V)@{b}(!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</B>(!v)
(!KK1 [I]) !! (!V)/(!v)     !! (!V)@{I}(!v)     !! (!V){\it(!v)        !! (!V){\i(!v)  !! (!V){\i(!v)     !! (!V)<I>(!v)
(!KK1 [i]) !! (!V)/(!v)     !! (!V)@{i}(!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</I>(!v)
(!KK1 [U]) !! (!V)_(!v)     !! (!V)@{U}(!v)     !! (!V){\underline(!v) !! (!V){\ul(!v) !! (!V){\ul(!v)    !! (!V)<U>(!v)
(!KK1 [u]) !! (!V)_(!v)     !! (!V)@{u}(!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</U>(!v)
(!KK1 [V]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V)\verb+(!v)      !! (!V){\f1(!v) !! (!V){\f1(!v)    !! (!V)<PRE>(!v)
(!KK1 [v]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V)+(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</PRE>(!v)
(!KK1 [T]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V){\tt(!v)        !! (!V){\f1(!v) !! (!V){\f1(!v)    !! (!V)<TT>(!v)
(!KK1 [t]) !! (!V) (!v)     !! (!V)    (!v)     !! (!V)}(!v)           !! (!V)}(!v)    !! (!V)}(!v)       !! (!V)</TT>(!v)
!hline
!end_table

!index (!kw [no_effects])
As you see here for the ASCII format there will be used the text style
commands as they are used in Usenet. If you don't like them you can use the
switch called (!KW [no_effects]) to suppress them. Use
(!KW [no_effects] [[asc!!]]) to suppress the text style commands when
converting to ASCII.

(!HINT)

Definitions are great for programming user-defined text styles. It's
for sure that you need some knowledge about the destination forma to do
this. The following example shows how to use ghosted text which is available
for the ST-Guide:

!begin_quote
!begin_verbatim
!ifdest [stg]
  !define G @{G}
  !define g @{g}
!else
  !define G
  !define g
!endif

Normal and (!G)ghosted(!g).
!end_verbatim
!end_quote
!endif

!end_node

################################################################################
# ToDo: Englisch
!iflang [german]
!begin_node Schriftfarben
!endif
!iflang [english]
!begin_node Schriftfarben
!endif
!html_name colour.html

UDO ermöglicht es Ihnen, bereits im Quelltext festzulegen, in welcher
Schriftfarbe Worte oder Sätze im Ausgabeformat erscheinen soll. Dazu stehen
Ihnen mehere Platzhalter zur Verfügung:

!begin_flushleft
!begin_table [ll]
(!kkw [black])   !! (!black)black(!coloff)
(!kkw [silver])  !! (!black)silver(!coloff)
(!kkw [gray])    !! (!black)gray(!coloff)
(!kkw [white])   !! (!black)white(!coloff)
(!kkw [maroon])  !! (!black)maroon(!coloff)
(!kkw [red])     !! (!black)red(!coloff)
(!kkw [purple])  !! (!black)purple(!coloff)
(!kkw [fuchsia]) !! (!black)fuchsia(!coloff)
(!kkw [green])   !! (!black)green(!coloff)
(!kkw [lime])    !! (!black)lime(!coloff)
(!kkw [olive])   !! (!black)olive(!coloff)
(!kkw [yellow])  !! (!black)yellow(!coloff)
(!kkw [navy])    !! (!black)navy(!coloff)
(!kkw [blue])    !! (!black)blue(!coloff)
(!kkw [teal])    !! (!black)teal(!coloff)
(!kkw [aqua])    !! (!black)aqua(!coloff)
!end_table
!end_flushleft
Mit dem Platzhalter (!kkw [coloff]) wird das ganze abgeschlossen.

Aus...
!begin_verbatim
(!red) Farbe in UDO (!coloff)
!end_verbatim

...wird:

(!red) Farbe in UDO (!coloff)

Das setzen der Farben wird nur bei den Formaten HTML, RTF, WinHelp, DRC und
Postscript unterstürzt.

!end_node

################################################################################
!iflang [german]
!begin_node Tabellen
!label table-Umgebung
!endif
!iflang [english]
!begin_node Tables
!label table environment
!endif
!html_name tables.html

!iflang [german]
Seit Release 5 besteht die Möglichkeit, einfache Tabellen mit UDO
setzen zu lassen. Sie können festlegen, wie Spalten ausgerichtet werden
und wo horizontale oder vertikale Linien in der Tabelle benutzt werden
sollen.

!index !/!/
!index (!kw [begin_table])
!index (!kw [end_table])
!index (!kw [hline])
!index (!kw [table_caption])
Um mit UDO Tabellen zu setzen, benötigen Sie folgende Kommandos:

!begin_enumerate !short
!item (!KW [table_caption] [<text>])
!item (!KW [begin_table] [[...!!]]) {(!KW [hline])}
!item (!KW [end_table])
!item (!KW [hline])
!item (!KW [!/])
!end_enumerate

Das Kommando (!KW [table_caption]) legt die Überschrift der folgenden Tabelle
fest. (!KW [table_caption]) muss vor der table-Umgebung eingesetzt werden,
darf also nicht innerhalb dieser Umgebung stehen.

Das Kommando (!KW [begin_table]) leitet eine Tabelle ein. Das Ende der
Tabelle wird mit (!KW [end_table]) angegeben. Direkt nach
(!KW [begin_table]) können Sie angeben, wie die Spalten der Tabelle
ausgerichtet werden sollen (l=linksbündig, c=zentriert, r=rechtsbündig)
und vor und nach welchen Spalten vertikale Linien gezogen werden sollen
(durch das Symbol ""|""). Folgt diesen Angaben noch das Kommando
(!KW [hline]), beginnt die Tabelle mit einer horizontalen Linie.

Nachdem Sie das Format der Tabelle angegeben haben, folgt der
eigentliche Tabelleninhalt. Jede Tabellenzeile muss auch in einer
Textzeile angegeben werden, wobei die einzelnen Zellen durch zwei
Ausrufezeichen voneinander getrennt werden. Leere Tabellenfelder
sollten im Quelltext stets mit einer Tilde (!~) gefüllt werden, da
diese Tabellen sonst in einigen Browsern unschön dargestellt werden.

Möchten Sie eine horizontale Linie in der Tabelle ausgeben, so benutzen
Sie dazu das Kommando (!KW [hline]). Dieser Befehl muss am Anfang einer
Zeile und alleine in dieser Zeile stehen.

Falls Sie die obigen Erklärungen mehr verwirrt haben sollten, als Ihnen
den Tabellensatz zu erläutern, so sehen sich einfach mal folgendes
kleines Beispiel an:

!begin_quote
!begin_verbatim
!table_caption Tabellen mit UDO
!begin_table [|l|c|r|] !hline
links !! mitte !! rechts
unten links !! unten mitte !! unten rechts
!hline
!end_table
!end_verbatim
!end_quote

Dieses Beispiel erzeugt folgende Tabelle, die aus zwei Zeilen und drei
Spalten besteht, wobei die erste Spalte linksbündig, die zweite Spalte
zentriert und die dritte Spalte rechtsbündig ausgegeben wird:

!table_caption Tabellen mit UDO
!begin_table [|l|c|r|] !hline
links !! mitte !! rechts
unten links !! unten mitte !! unten rechts
!hline
!end_table

Da vor und nach jeder Spalte ein ""|"" angegeben ist, werden die Spalten
durch vertikale Linien voneinander getrennt. Die Tabelle beginnt mit
einer horizontalen Linie, da bereits in der Zeile mit
(!KW [begin_table]) ein (!KW [hline]) angegeben wurde. Schließlich endet die
Tabelle mit einer horizontalen Linie, da vor (!KW [end_table]) wiederum
ein (!KW [hline]) angegeben wurde.

Hier noch ein weiteres Beispiel einer Tabelle, die den gleichen Inhalt
zeigt, wie die obige Tabelle, aber bei der keine Linien benutzt
werden. Dies wird dadurch ermöglicht, indem man kein ""|"" und kein
(!KW [hline]) verwendet. Das Ergebnis:


!table_caption Ein weiteres Beispiel
!begin_table [lcr]
links !! mitte !! rechts
unten links !! unten mitte !! unten rechts
!end_table


!index (!kw [use_ansi_tables])
UDO bietet einen Schalter an, um die Linien der Tabelle nicht mit den
ASCII-Zeichen (!T)+(!t), (!T)-(!t) und (!T)|(!t) zu erzeugen. Wird im Vorspann der Schalter
(!KW [use_ansi_tables]) benutzt, so werden die Linien der Tabelle mit
Hilfe der Grafikzeichen aus dem PC-Zeichensatz erzeugt. Auf die Formate
WinHelp, RTF, HTML und (!LateX) hat dieser Schalter keinen Einfluss.

!smallskip

(!HINTS)

!begin_enumerate
!item Tabellen werden immer zentriert ausgegeben.

!item In HTML kann man die Benutzung von Linien nicht frei festlegen,
daher werden Tabellen dort immer mit frame=box erzeugt, falls man in
der Zeile mit (!KW [begin_table]) den Befehl (!KW [hline]) benutzt.

!item Für WinHelp werden die Möglichkeiten zur Tabellenausgabe
ausgeschöpft. Leider ist es hier nicht möglich, eine Tabelle zentriert
auszugeben oder Linien frei zu setzen. Daher werden alle Zellen der
Tabelle umrahmt dargestellt, falls man in der Zeile mit
(!KW [begin_table]) das Kommando (!KW [hline]) benutzt. Benutzt man es
nicht, wird die komplette Tabelle ohne Linien dargestellt.

!item Beim ST-Guide werden die Tabellenlinien durch den Grafikbefehl
(!T)@line(!t) erzeugt. Hier ist es nicht möglich, mehrere Linien
zwischen den Spalten zu erzeugen, wenn man keine ANSI-Tabellen ausgeben
lässt.

!item In den Feldern der Tabelle sind natürlich alle sonstigen
UDO-Kommandos erlaubt. Sie können dort also auch Schriftarten,
Querverweise, Indizes etc. verwenden.

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Since Release 5 you are able to print simple tables with UDO. You can define
the justification of the columns and where UDO shall print vertical and/or
horizontal lines.

!index !/!/
!index (!kw [begin_table])
!index (!kw [end_table])
!index (!kw [hline])
!index (!kw [table_caption])
To print tables with UDO you need the following commands:

!begin_enumerate !short
!item (!KW [table_caption] [<text>])
!item (!KW [begin_table] [[...!!]]) {(!KW [hline])}
!item (!KW [end_table])
!item (!KW [hline])
!item (!KW [!/])
!end_enumerate

The command (!KW [table_caption]) defines the title of the next table. It
has to be used before the table environment, not inside this environment!

The command (!KW [begin_table]) starts a table, (!KW [end_table])
finishes and prints the table. After (!KW [begin_table]) you can define
the justification of the table columns and the usage of vertical lines. Use
''c'' for a centred row, ''l'' for a left justified row, ''r'' for a
right justified row and ''|'' for vertical lines inside brackets. If you add
a (!KW [hline]) command to this line the table starts with a horizontal
line.

After having described the layout of the table with the upper line
you can insert the cells of the table. You have to insert a column in
one source line and you have to divide the cells by using ''!!''.

If you want to insert a horizontal line you can use the (!KW [hline])
command. (!KW [hline]) has to be at the beginning of the line and it has
to be the only command of this line.

Here you will see a short example that demonstrates the usage of the upper
described commands:

!begin_quote
!begin_verbatim
!table_caption Tables with UDO
!begin_table [|l|c|r|] !hline
upper left !! up !! upper right
lower left cell !! lower cell !! lower right cell
!hline
!end_table
!end_verbatim
!end_quote

This example prints a table with two rows and three columns. The first
column is left justified, the second columns is centred and the third
columns is printed right justified:

!table_caption Tables with UDO
!begin_table [|l|c|r|] !hline
upper left !! up !! upper right
lower left cell !! lower cell !! lower right cell
!hline
!end_table

Because I used a ''|'' before and after every column they are divided by
vertical lines. The table starts with a horizontal line because the
(!KW [hline]) command was added at the end of (!KW [begin_table]).
Finally the table ends with a horizontal line because the (!KW [hline])
command is used right before (!KW [end_table]).

The following example shows the upper table without any lines:

!table_caption Another example
!begin_table [lcr]
upper left !! up !! upper right
lower left cell !! lower cell !! lower right cell
!end_table

!smallskip

!index (!kw [use_ansi_tables])
UDO offers you a switch called (!KW [use_ansi_tables]). If you use this
switch inside the preamble the lines of the table are printed by using some
characters of the IBM
PC graphic character set instead of (!T)+(!t), (!T)-(!t) and (!T)|(!t) when
converting into an ASCII like format like ASCII or ST-Guide. This switch has
no effect if you convert to Windows Help, RTF, HTML or (!LaTeX).

!smallskip

(!HINTS)

!begin_itemize

!item	Tables are always printed centred.

!item	HTML doesn't allow to define where to use lines. If you use the
(!KW [hline]) command at the end of (!KW [begin_table]) the table is
printed via (!V)frame=box(!v). If you don't use (!KW [hline]) it is
printed without any lines.

!item	Windows Help doesn't allow it to print centred tables or to print
lines where you want to. If you use (!KW [hline]) in the
(!KW [begin_table]) line all cells will be printed with a box. If you
don't use (!KW [hline]) there will be no line at all in this table.

!item	Converting to ST-Guide the lines of a table are generated with
(!T)@line(!t). It's not possible to use more than one vertical line between
columns or more than one horizontal line.

!item	Inside the cells you can use all other UDO commands like text
styles, links or indices.

!end_itemize
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Sourcecode
!label sourcecode-Umgebung
!endif
!iflang [english]
!begin_node Source code
!label sourcecode environment
!endif
!html_name sourcecode.html

!iflang [german]
Zeilen, die in einer sourcecode-Umgebung stehen, werden für die
Sourcecode-Formate 1:1 ausgegeben. Bei den ""normalen"" Zielformaten
werden diese Zeilen so ausgegeben, als stünden sie in einer
verbatim-Umgebung, die wiederum in einer quote-Umgebung steht.

Ein kleines Beispiel für einen C-Sourcecode mit UDO:

!begin_quote
!vinclude (!EXAMPLES)csource.u
!end_quote

Eine weitere Möglichkeit, Sourcecode auszugeben, bietet der
Befehl (!KW [sinclude]).

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Lines that are part of a sourcecode environment
will be displayed without conversion when converting
to one of the source code formats.
When converting to one of the other destination formats,
these lines will be displayed like being part of
a verbatim environment inside a quote environment.

A small example for a C source code with UDO:

!begin_quote
!vinclude (!EXAMPLES)csource.u
!end_quote

Another possibility to include source code
is offered by the command (!KW [sinclude]).
!endif

!end_node

!end_node


################################################################################
################################################################################
!iflang [german]
!begin_node Sonderzeichen
!endif
!iflang [english]
!begin_node Special characters
!endif
!html_name special_characters.html
# 22.01.1996: UDOs Vorgehen bei doppelten Apostrophen


################################################################################
!iflang [german]
!begin_node Doppelte Anführungszeichen
!endif
!iflang [english]
!begin_node Double quotes
!endif
!html_name double_quotes.html

!iflang [german]
!index Anführungszeichen !! typographische
!index Typographische Anführungszeichen
Doppelte Anführungszeichen werden bei der Umwandlung durch
typographische Anführungszeichen(!N)z.B. ""Gänsefüßchen"" unten und oben(!n)
ersetzt, falls diese vom jeweiligen Format unterstützt werden. Werden
diese nicht unterstützt, so werden die doppelten Anführungszeichen
durch einfache ersetzt.

In der folgenden ASCII-Simulation wird gezeigt, wie das Ergebnis in
später aussehen kann, wenn das jeweilige Ausgabeformat echte
Anführungszeichen unterstützt.

!begin_quote
!begin_verbatim
Echte ""Gänsefüßchen""

Echte  Gänsefüßchen"
      "
!end_verbatim
!end_quote

Wenn Sie in der Ausgabedatei doppelte Anführungszeichen sehen möchten,
so müssen Sie stattdessen (!T)(!link [((""!)!)] [((""!)!)])text(!link [((""!)!)] [((""!)!)])(!t) angeben.

(!HINTS)

!begin_enumerate
!index (!kw [no_quotes])
!item Die Umwandlung in typographische Anführungszeichen kann man durch
den Schalter (!KW [no_quotes] [[~!!]]) im Vorspann ausschalten.

!item Bei der Ausgabe ins Rich Text Format werden spezielle
RTF-Kommandos verwendet. Manche Textverarbeitungen wandeln diese
Kommandos jedoch nicht in deutsche Anführungszeichen um, sondern in die
englischen Versionen. Daran kann UDO leider nichts ändern.

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
index Typographical quotes
!index Quotes !! typographical

Double quotes of the source file will be converted to typographical quotes
if they are supported by the destination format. The following ASCII
simulation demonstrates how it works:

!begin_quote
!begin_verbatim
Double ""quotes""

       66       99
Double    quotes
!end_verbatim
!end_quote

If you want to display two quotes you have to use
(!T)(!link [((""!)!)] [((""!)!)])text(!link [((""!)!)] [((""!)!)])(!t) instead.

(!HINTS)

!begin_enumerate
!index (!kw [no_quotes])
!item The conversion of these double quotes can be suppressed using the
switch called (!KW [no_quotes] [[~!!]]).

!item When converting to RTF special RTF commands will be used.

!end_enumerate

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Doppelte Apostrophe
!endif
!iflang [english]
!begin_node Double apostrophes
!endif
!html_name double_apostrophes.html

!iflang [german]
!index Apostrophe !! doppelte
Genau wie bei doppelten Anführungszeichen passt UDO auch hier doppelt
vorkommende Apostrophe an.

Aus!..

!begin_quote
!begin_verbatim
Hier stehen ''doppelte Apostrophe''.
!end_verbatim
!end_quote

!.. wird

!begin_quote
Hier stehen ''doppelte Apostrophe''.
!end_quote

Wenn Sie in der Ausgabedatei doppelte Apostrophe sehen möchten, so
müssen Sie stattdessen (!T)(!link [((''!)!)] [((''!)!)])text(!link [((''!)!)] [((''!)!)])(!t) angeben.

(!HINT)

!index (!kw [no_quotes])
Der Schalter (!KW [no_quotes] [[~!!]]) hat genau wie auf die doppelten
Anführungszeichen Einfluss auf die Umsetzung der doppelten Apostrophe.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Like double quotes UDO can convert double apostrophes into typographical
apostrophes:

!begin_quote
!begin_verbatim
double ''apostrophes''
!end_verbatim
!end_quote

will become

!begin_quote
double ''apostrophes''
!end_quote

If you want to display two apostrophes you have to use
(!T)(!link [((''!)!)] [((''!)!)])text(!link [((''!)!)] [((''!)!)])(!t) instead.

(!HINT)

!index (!kw [no_quotes])
The switch (!KW [no_quotes] [[~!!]]) switches off the conversion of
these double apostrophes, too.

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Feste Leerzeichen
!endif
!iflang [english]
!begin_node Non breaking spaces
!label Non breaking space
!endif
!html_name nonbreaking_spaces.html

!iflang [german]
!index Leerzeichen
!index Tilde
!index ~
Möchten Sie zwischen zwei Wörtern ein festes oder mehrere feste
Leerzeichen angeben, so benutzen Sie dafür die Tilde ((!link [!~] [Festes Leerzeichen])).
Feste Leerzeichen eignen sich (auch) dafür, den Zeilenumbruch an der
jeweiligen Stelle zu unterbinden.

Bei den Dateien, die im ASCII-Format ausgegeben werden und vom
zugehörigen Konverter nicht mehr nachformatiert werden, ersetzt UDO die
Tilde durch ein Leerzeichen und achtet selber darauf, wann kein
Zeilenumbruch erfolgen darf.

Bei den anderen Formaten ersetzt UDO die Tilde durch folgende
formatspezifische Zeichenfolgen, die den gleichen Zweck erfüllen:

!begin_xlist [WinHelp:] !short
!item [(!LaTeX):]   (!T)!~(!t)
!item [HTML:]       (!T)&nbsp;(!t)
!item [RTF:]        (!T)\!~(!t)
!item [WinHelp:]    (!T)\!~(!t)
!end_xlist

Wenn Sie die Tilde selber ausgeben möchten, so müssen Sie die Zeichenfolge (!link [!!~] [Tilde]) benutzen.

(!HINT)

Bei externen Verweisen ((!KKW [url]), (!KKW [xlink])) wird die Tilde nicht in ein festes Leerzeichen
umgewandelt, wird also von UDO direkt übernommen.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
!index Blanks
!index Tilde
!index ~
If you want to insert non-breaking spaces between two words you have to use
the tilde ((!link [!~] [Non breaking space])).
Non-breaking spaces are also useful to stop UDO and
the other formats from breaking lines between two words.

Converting to an ASCII format UDO replaces this tildes by blanks. Converting
to other formats UDO replaces this tildes by commands that have the same
effect.

!begin_xlist [WinHelp:] !short
!item [(!LaTeX):]   (!T)!~(!t)
!item [HTML:]       (!T)&nbsp;(!t)
!item [RTF:]        (!T)\!~(!t)
!item [WinHelp:]    (!T)\!~(!t)
!end_xlist

If you want to display a tilde you have to use (!link [!!~] [Tilde]) instead.

(!HINT)

If you use a tilde inside an external link ((!KKW [url]), (!KKW [xlink])) UDO won't convert it.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Gedankenstriche
!endif
!iflang [english]
!begin_node Dashes
!endif
!html_name dashes.html

!iflang [german]
!index Minuszeichen
UDO bietet --- wie sollte es auch anders sein --- eine Möglichkeit,
Gedankenstriche (wie hier) bereits im Quelltext anzugeben.

Gedankenstriche werden von (!LaTeX), RTF und WinHelp unterstützt. Bei den
anderen Formaten werden zwei bzw. drei Minuszeichen durch eines
ersetzt.

Mit (!T)(---)(!t) können Sie einen langen, mit (!T)(--)(!t) einen kurzen Gedankenstrich
ausgeben. Wenn Sie drei Minuszeichen ausgeben möchten, so müssen Sie
im Quelltext (!T)(!link [((---!)!)] [((---!)!)])(!t) benutzen. Wenn Sie zwei Minuszeichen ausgeben
möchten, so müssen Sie im Quelltext (!T)(!link [((--!)!)] [((--!)!)])(!t) benutzen.
!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO supports --- did you think anything else --- dashs like in this
sentence.

Dashs are supported by (!LaTeX), Windows Help and RTF. Converting to other
formats UDO will replace ''(---)'' and ''(--)'' by a single ''-''.

If you want to display three or two ''-'' you have to use
(!T)(!link [((---!)!)] [((---!)!)])(!t) or
(!T)(!link [((--!)!)] [((--!)!)])(!t).
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Umwandlung von 8-bit-Zeichen
!endif
!iflang [english]
!begin_node Converting 8 bit chars
!endif
!html_name converting_8bit-characters.html

!iflang [german]
!index Systemzeichensatz
!index Umlautumwandlung
!index Umwandlung !! Umlaute
!index Zeichensatz
In einem Quelltext können Sie, anders als bei (!LaTeX), HTML, WinHelp oder
RTF, auch Zeichen aus dem oberen Teil Ihres Systemzeichensatzes
verwenden. Es ist also nicht erforderlich, sich zu überlegen, wie denn
wohl ein ""ß"" oder ein ""ä"" in der Ausgabedatei auszusehen hat; UDO
erledigt die Umwandlung für Sie automatisch.

UDO erwartet Quelltexte mit dem jeweiligen Systemzeichensatz. Nutzen
Sie UDO auf einem DOS-kompatiblen Rechner, so erwartet UDO Quelltexte,
die mit dem DOS-Zeichensatz geschrieben wurden. Die Atari-Version
erwartet Quelltexte mit Zeichen des Atari-Zeichensatzes usw.

UDO kann aber auch Quelltexte verarbeiten, die mit systemfremden
Zeichensätzen erstellt wurden. Und um es richtig komfortabel zu machen,
können Quelltexte sogar aus einem Mischmasch von benutzten
Zeichensätzen bestehen.

Sie müssen UDO lediglich mittels (!T)!/code [(!CODE)](!t) mitteilen, mit welchem
Zeichensatz die folgenden Zeilen erstellt wurden.

Hier eine Übersicht, welches Kürzel für den Zeichensatz benutzt werden kann:

!index (!kw [code])
!index DOS-Zeichensatz
!index Zeichensatz !! DOS
!index OS/2-Zeichensatz
!index Zeichensatz !! OS/2
!index HP-Roman-8-Zeichensatz
!index Zeichensatz !! HP-Roman-
!index ANSI-Zeichensatz
!index ISO-Latin1-Zeichensatz
!index Windows-Zeichensatz
!index Zeichensatz !! ANSI
!index Zeichensatz !! ISO Latin 1
!index Zeichensatz !! Windows
!index Macintosh-Zeichensatz
!index Zeichensatz !! Macintosh
!index Atari-Zeichensatz
!index Zeichensatz !! Atari
!index NeXT-Zeichensatz
!index Zeichensatz !! NeXT

!include charsets.ui

!begin_ignore
# auskommentiert 14.01.2003 - Ulrich Kretschmer (stattdessen include-Datei)

Folgende Befehle stehen zur Verfügung, in den Klammern sehen Sie die Bezeichnung des
jeweiligen Zeichensatzes:
!begin_xlist [code [dos:!]] !short

!index DOS-Zeichensatz
!index Zeichensatz !! DOS
!index (!kw [code])
!item [(!KW [code] [[dos!!]]):]
IBM-PC, MS-DOS

!index OS/2-Zeichensatz
!index Zeichensatz !! OS/2
!index (!kw [code])
!item [(!KW [code] [[os2!!]]):]
OS/2

!index HP-Roman-8-Zeichensatz
!index Zeichensatz !! HP-Roman-8
!index (!kw [code])
!item [(!KW [code] [[hp8!!]]):]
HP Roman 8

!index ANSI-Zeichensatz
!index ISO-Latin1-Zeichensatz
!index Windows-Zeichensatz
!index Zeichensatz !! ANSI
!index Zeichensatz !! ISO Latin 1
!index Zeichensatz !! Windows
!index (!kw [code])
!item [(!KW [code] [[iso!!]]):]
ISO Latin 1, Windows ANSI

!index Macintosh-Zeichensatz
!index Zeichensatz !! Macintosh
!index (!kw [code])
!item [(!KW [code] [[mac!!]]):]
Apple Macintosh

!index Atari-Zeichensatz
!index Zeichensatz !! Atari
!index (!kw [code])
!item [(!KW [code] [[tos!!]]):]
Atari ST

!index NeXT-Zeichensatz
!index Zeichensatz !! NeXT
!index (!kw [code])
!item [(!KW [code] [[next!!]]):]
NeXT

!end_xlist
!end_ignore

!smallskip

!index Anpassung !! Sonderzeichen
!index Grafikzeichen
!index Sonderzeichen !! Anpassung

Die Anpassung der Sonderzeichen hat jedoch ihre Grenzen. So enthalten
alle Zeichensätze ein paar Zeichen,die in anderen Zeichensätzen fehlen.
So ist die Benutzung der Grafikzeichen des DOS-Zeichensatzes oder der
hebräischen Zeichen des Atari-Zeichensatzes problematisch, da diese zu
systemspezifisch sind und in anderen Formaten nicht nachgebildet werden
können. Auch auf die Verwendung mathematischer Zeichen sollte möglichst
verzichtet werden, da diese zumeist in anderen Zeichensätzen fehlen.

!index Systemfremde Zeichensätze
!index Zeichensatz !! systemfremde
Werden systemfremde Zeichensätze verarbeitet, sind die Einschränkungen
noch etwas größer, da UDO intern zunächst Texte in den
ISO-Latin-1-Zeichensatz umwandelt, der als größter gemeinsamer Nenner
angesehen werden kann. Erst dann wird von ISO-Latin-1 in den jeweiligen
Systemzeichensatz umgewandelt. Auf diesem Wege können im ungünstigen
Fall manche Zeichen nicht umgewandelt werden.

!index Fehlermeldung
UDO wird in einem solchen Fall eine Fehlermeldung ausgeben. Sie
sollten dann auf die Verwendung dieser Zeichen verzichten.

(!HINT)

Es kann durchaus sein, dass das eine oder andere Zeichen fehlt oder Zeichen falsch umgesetzt werden.
Sollten Sie auf solche Zeichen stoßen, so (!link [melden] [Kontaktadresse]) Sie dies bitte unverzüglich.
Vielen Dank!

!endif
# ------------------------------------------------------------------------------
!iflang [english]
In an UDO source file you can use ""higher"" characters without having to
know how a character has to look like in a destination format like (!LaTeX)
or Windows Help. So you can enter a German ''ß'' without any fear, UDO
converts it for you and it knows that this has to be (!V)&szlig;(!v) for
HTML or (!V){\ss}(!v) for (!LaTeX).

UDO expects files containing chars of the system charset of your operating
system. If you run UDO on a MS-DOS computer UDO expects text files that are
written with the IBM PC character set by default. If UDO runs on an Atari
computer UDO will expect the TOS character set by default.

But UDO can manage file that are written with another character set, too.
You have simply to tell UDO which character set your source file uses with
(!T)!/code [(!CODE)](!t).

Below is an overview of the character sets UDO knows about:

!index DOS character set
!index Character set !! DOS
!index OS/2 character set
!index Character set !! OS/2
!index HP-Roman-8 character set
!index Character set !! HP-Roman-8
!index ANSI character sect
!index ISO-Latin1 character set
!index Windows character set
!index Character set !! ANSI
!index Character set !! ISO Latin 1
!index Character set !! Windows
!index Macintosh character set
!index Character set !! Macintosh
!index Atari character set
!index Character set !! Atari
!index NeXT character set
!index Character set !! NeXT

!include charsets.ui

# the following commands:

!begin_ignore
!begin_xlist [code [dos:!]] !short

!index DOS character set
!index Character set !! DOS
!index (!kw [code])
!item [(!KW [code] [[dos!!]]):]
IBM-PC, MS-DOS

!index OS/2 character set
!index Character set !! OS/2
!index (!kw [code])
!item [(!KW [code] [[os2!!]]):]
OS/2

!index HP-Roman-8 character set
!index Character set !! HP-Roman-8
!index (!kw [code])
!item [(!KW [code] [[hp8!!]]):]
HP Roman 8

!index ANSI character sect
!index ISO-Latin1 character set
!index Windows character set
!index Character set !! ANSI
!index Character set !! ISO Latin 1
!index Character set !! Windows
!index (!kw [code])
!item [(!KW [code] [[iso!!]]):]
ISO Latin 1, Windows ANSI

!index Macintosh character set
!index Character set !! Macintosh
!index (!kw [code])
!item [(!KW [code] [[mac!!]]):]
Apple Macintosh

!index Atari character set
!index Character set !! Atari
!index (!kw [code])
!item [(!KW [code] [[tos!!]]):]
Atari ST

!index NeXT character set
!index Character set !! NeXT
!index (!kw [code])
!item [(!KW [code] [[next!!]]):]
NeXT

!end_xlist
!end_ignore

!smallskip

There are some things you have to remember. Some character sets contain
characters that aren't available in another one. So you shouldn't use
characters from the PC graphic character set or the Hebraic characters of
the Atari character set because they can't be printed in formats like
(!LaTeX), Windows Help, RTF or HTML. In this case UDO prints an error
message. You should remove these characters from your source file and find
another solution.

If source files are converted that don't use the character set of the
operating system UDO is running on the limitations are even higher. In the
first step UDO will convert the characters into ISO Latin 1. In  the second
step UDO will convert the ISO Latin 1 characters into the character set of
the current operating system. In some cases there's is no possibility to
convert the characters without any loss. In such a case UDO will print an
error message.

(!HINT)

If any character was forgotten or a character is converted in
a wrong way please (!link [send a bug report] [Contact addresses])!
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Universeller Zeichensatz
!endif
!iflang [english]
!begin_node Universal charset
!endif
!html_name universal_charset.html

!iflang [german]
!index Zeichensatz !! universeller
Mit den im vorherigen Abschnitt beschriebenen Befehlen ist es möglich,
Quelltexte auch mit 8-Bit-Zeichen systemweit weiterzugeben.

Werden Quelltexte jedoch über das Internet ausgetauscht, kann es
passieren, dass irgendwo auf dem Übertragungswege 8-Bit-Zeichen
umgewandelt oder angepasst werden. Dies wäre bei Quelltexten, die
mehrere Zeichensätze verwenden fatal.

Um nun den Austausch von Quelltexten auch hier zur ermöglichen, bietet
UDO einen ""universellen Zeichensatz"" an. Es handelt sich hierbei nicht
wirklich um einen Zeichensatz, sondern vielmehr um eine Möglichkeit,
8-Bit-Zeichen durch Folgen mehrere 7-Bit-Zeichen zu emulieren.

!index (!kw [universal_charset])
Da die nötigen Abfragen und Umwandlungen sehr rechenintensiv sind, muss
man UDO mitteilen, dass die folgenden Zeilen ""universelle Zeichen""
beinhalten. Dies geschieht durch den Einsatz des Schalters
(!KW [universal_charset]).

Nach der Angabe von (!KW [universal_charset] [[on!!]]) betrachtet UDO
jede einzelne Zeile und wandelt enthaltene universelle Zeichen in
8-Bit-Zeichen um. Die folgende Tabelle zeigt, welche Zeichen wie
umgewandelt werden:


!universal_charset [on]
!begin_table [|l|l|l|] (!hline)
Platzhalter  !! x aus           !! Beispiel
!hline
(!/"x)       !! aeiosuyAEIOU    !! (!T)(!/"a)(!t) = (!"a)
(!/'x)       !! aeiouyAEIOUY    !! (!T)(!/'e)(!t) = (!'e)
(!/`x)       !! aeiouAEIOU      !! (!T)(!/`i)(!t) = (!`i)
(!/^x)       !! aeiouAEIOU      !! (!T)(!/^o)(!t) = (!^o)
(!/&x)       !! ae, oe, AE, OE  !! (!T)(!/&AE)(!t) = (!&AE)
(!/!~x)      !! anoANO          !! (!T)(!/!~n)(!t) = (!~n)
(!/,x)       !! cC              !! (!T)(!/,C)(!t) = (!,C)
(!/.x)       !! aA              !! (!T)(!/.A)(!t) = (!.A)
(!/_x)       !! ao              !! (!T)(!/_a)(!t) = (!_a)
(!/\x)       !! oO              !! (!T)(!/\O)(!t) = (!\O)
!hline
!end_table

Das deutsche ''(!"s)'' wird durch den Platzhalter (!/"s) erzeugt. Kennt das
Zielformat ein Zeichen nicht, so wird das naheliegendste Zeichen
benutzt, z.B. ''a'' statt ''(!^a)''.
!universal_charset [off]

!endif
# ------------------------------------------------------------------------------
!iflang [english]
!index Character set !! universal
With the commands described in the previous section it is possible
to transport document files with 8-bit characters systemwide.

If you transport files over the internet, however, that somewhere
on the way these characters get converted or changed. This
would be fatal with soruce files using more
than one character code set.

To enable the exchange of files in this case, UDO offers a
""universal character set"". This is not really a character set,
but a way to emulate 8-bit characters by using a sequence of
several 7-bit characters.

!index (!kw [universal_charset])
Since the necessary queries and conversions are quite
computer-bound, you have to tell that the following
contain ""universal characters"". This is done by
using the switch (!KW [universal_charset]).

After using (!KW [universal_charset] [[on!!]]) UDO will
look at every input line and converts universal characters
to 8-bit characters. The following table shows which input
sequences are converted to which characters:

!universal_charset [on]
!begin_table [|l|l|l|] (!hline)
Placeholder  !! x from          !! Example
!hline
(!/"x)       !! aeiosuyAEIOU    !! (!T)(!/"a)(!t) = (!"a)
(!/'x)       !! aeiouyAEIOUY    !! (!T)(!/'e)(!t) = (!'e)
(!/`x)       !! aeiouAEIOU      !! (!T)(!/`i)(!t) = (!`i)
(!/^x)       !! aeiouAEIOU      !! (!T)(!/^o)(!t) = (!^o)
(!/&x)       !! ae, oe, AE, OE  !! (!T)(!/&AE)(!t) = (!&AE)
(!/~x)       !! anoANO          !! (!T)(!/~n)(!t) = (!~n)
(!/,x)       !! cC              !! (!T)(!/,C)(!t) = (!,C)
(!/.x)       !! aA              !! (!T)(!/.A)(!t) = (!.A)
(!/_x)       !! ao              !! (!T)(!/_a)(!t) = (!_a)
(!/\x)       !! oO              !! (!T)(!/\O)(!t) = (!\O)
!hline
!end_table

The german ''(!"s)'' will be created with the placeholder (!/"s).
If the destination format does not know a character, the best
possible character will be used, for example ''a'' instead
of ''(!^a)''.

!universal_charset [off]
!endif

!end_node

!end_node

################################################################################
################################################################################
!iflang [german]
!begin_node Silbentrennung
!endif
!iflang [english]
!begin_node Syllabification
!endif
!html_name syllabification.html
# 31.01.1996: Hinweise auf zu kurze Zeilen

!iflang [german]
UDO bietet für das ASCII-, ST-Guide-, Pure-C-Help- und
Manualpage-Format eine halbautomatische Silbentrennung. Halbautomatisch
bedeutet, dass Sie in einem Quelltext die Stellen markieren müssen, an
denen ein Wort getrennt werden darf.

Es gibt zwei Möglichkeiten, diese Trennstellen zu setzen:

!index (!k1 [/-])
!begin_enumerate !short
!item lokales Setzen durch Trennmarken (!KW [/-])
!index (!kw [hyphen])
!item globales Setzen durch das Kommando (!KW [hyphen])
!end_enumerate

Bei der Umwandlung ins (!LaTeX)-Format werden die angegebenen Trennstellen
durch ""\-"" ersetzt. (!LaTeX) weiß dann, dass das Wort nur an den Stellen
getrennt werden darf.

Bei der Umwandlung ins Rich Text, WinHelp- und HTML-Format werden die
Trennmarken einfach gefiltert.

!index (!k1 [//-])
Falls Sie die Zeichenfolge (!T)!/-(!t) ausgeben möchten, so müssen Sie im
Quelltext (!T)(!K1 [//-])(!t) angeben.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
DO supports a semi-automatic syllabification for ASCII, ST-Guide, Pure C
Help and Manualpage. ""Semi-automatic"" means that you have to tell UDO at
which position a word can be divided into two pieces.

You have two possibilities to set the syllabification patterns:

!index (!k1 [/-])
!begin_enumerate !short
!item Local definition ((!KW [/-]))
!index (!kw [hyphen])
!item Global definition using the (!KW [hyphen]) command
!end_enumerate

When converting to (!LaTeX) the marks will be replaced by ""\-"". Then
(!LaTeX) knows that a word can be split at these positions.

When converting to RTF, Windows Help and HTML the marks are deleted.

!index (!k1 [//-])
If you want to display (!T)!/-(!t) you have to use (!T)(!K1 [//-])(!t).
!endif

################################################################################
!iflang [german]
!begin_node Lokales Setzen von Trennstellen
!endif
!iflang [english]
!begin_node Local definition of syllabification patterns
!endif
!html_name syllabification_patterns_local.html

!iflang [german]
Im Quelltext kann man in einem Wort durch ""(!K1 [/-])"" die Stellen markieren, an
denen UDO (bzw. (!LaTeX)) das Wort trennen darf. Ein Beispiel:

!begin_quote
!begin_verbatim
eine halbautomatische Sil!-ben!-tren!-nung.
!end_verbatim
!end_quote

Bei der Umwandlung ins (!LaTeX-Format) werden alle ""(!K1 [/-])"" durch ""\-"" ersetzt;
es wird also ""Sil\-ben\-tren\-nung"" ausgegeben. Bei der Umwandlung ins
ASCII-, ST-Guide-, Pure-C-Help- und Manualpage-Format wird das Wort
passend aufgetrennt, falls es nicht mehr komplett in eine Zeile passt
(z.B. in ""Sil-~bentrennung"" oder ""Silben-~trennung""). Bei allen
anderen Ausgabeformaten werden die Trennmarken einfach entfernt.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
You can set the syllabification marks in the source file using ""(!K1 [/-])"". At
these marks UDO is allowed to split up a word. A short example:

!begin_quote
!begin_verbatim
semi-automatic syl!-labi!-fi!-cation
!end_verbatim
!end_quote

When converting to (!LaTeX) UDO replaces all ""(!K1 [/-])"" by ""\-"". So it would
look like ""syl\-labi\-fi\-cation"".

When converting to ASCII, ST-Guide, Pure C Help and Manualpage the word is split
up into different parts if it doesn't have enough place at the end of a
line. So it can look like ""syl-~labification"", ""syllabi-~fication"" or
""syllabifi-~cation"".

When converting to other formats the marks are simply deleted.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Globales Setzen von Trennstellen
!endif
!iflang [english]
!begin_node Global definition of syllabification patterns
!endif
!html_name syllabification_patterns_global.html

!index (!kw [hyphen])
!iflang [german]
Trennstellen können durch das Kommando (!KW [hyphen]) global gesetzt werden.
Global bedeutet, dass Sie die Trennstelle nur einmal im Vorspann des
Quelltextes angeben müssen, UDO dann bei der Umwandlung alle Zeilen
nach dem zugehörigen Wort durchsucht und die nötigen Anpassungen
durchführt.

Sobald in Ihrem Quelltext mehrere problematische Worte (also Worte,
die ungetrennt einen hässlichen rechten Flatterrand erzeugen)
auftauchen, sollten Sie sich überlegen, ob es nicht vielleicht
sinnvoller ist, im Vorspann einmal (!KW [hyphen]) zu benutzen.

In diesem Beispiel wird davon ausgegangen, dass in Ihrem Quelltext das
Wort "Dokumentation" mehrfach auftaucht. Damit Sie nicht bei jedem
Wort die Trennstellen lokal setzen müssen, fügen Sie folgenden
Zeile(n) in den Vorspann des Quelltextes ein:

!begin_quote
!begin_verbatim
!hyphen Do!-ku!-men!-ta!-tio!-nen
!hyphen Do!-ku!-men!-ta!-tion
!end_verbatim
!end_quote

In diesem Beispiel wurde zusätzlich der Trennvorschlag für den Plural
angegeben, da dieser anders getrennt werden muss. Der Plural muss, wenn
er angegeben werden wird, (!I)vor(!i) dem Singular stehen. Der Grund: UDO
speichert alle Trennvorschläge in einer Liste, die es bei der
Umwandlung im FIFO-Prinzip(!N)first in first out(!n) abarbeitet.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
You can set these marks at the beginning of a source file with the
(!KW [hyphen]) command for often used words. ""Global"" means that you only
have to define the marks once.

If a word hasn't enough place at the end of a line when converting to ASCII,
ST-Guide, Pure C Help or Manualpage UDO looks for a global definition in its
internal list.

In the following example I expect that the word ""documentation"" is used
many times in your source file:

!begin_quote
!begin_verbatim
!hyphen docu!-men!-ta!-tion
!end_verbatim
!end_quote
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Hinweise auf zu kurze Zeilen
!endif
!iflang [english]
!begin_node Short lines
!endif
!html_name shortlines.html

!iflang [german]
Bei der Umwandlung ins ASCII-, Manualpage-, Pure-C-Help- und
ST-Guide-Format kann UDO durch seine halbautomatische Silbentrennung
dafür sorgen, dass im Ausgabetext ein relativ gleichmäßiger rechter Rand
erzeugt bzw. beim Blocksatz eine Zeile mit wenig Leerzeichen aufgefüllt
wird.

Dies ist dann nicht der Fall, wenn manche Zeilen zu kurz geraten. UDO
bemängelt diese Zeilen in der Logdatei und zeigt Ihnen dort auch das
Wort, welches durch seine Länge dazu führte, dass ein ungleichmäßiger
rechter Rand erzeugt bzw. die Zeile mit zuviel Leerzeichen aufgefüllt
wurde.

Versuchen Sie nun, durch Einsetzen von Trennmarken UDO zu erlauben,
dieses Wort zu trennen und damit einen gleichmäßigeren rechten Rand zu
erzeugen.

(!HINT)

!index (!kw [fussy])
!index (!kw [sloppy])
Durch den Befehl (!KW [sloppy]) werden die Hinweise auf solche kurzen Zeilen
ausgeschaltet. Durch den Befehl (!KW [fussy]) lassen sich die Warnungen
wieder einschalten.

Gerade in der Entwicklungsphase einer Dokumentation interessieren
einen die Warnungen eher weniger. Benutzen Sie dann einfach zu Beginn
des Dokumentes den Befehl (!KW [sloppy]), so dass in der Logdatei nur noch die
""wichtigen"" Dinge zu erkennen sind. Vor der Veröffentlichung der
Dokumentation sollte man dann den Befehl auskommentieren und die
Formatierung überprüfen.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
When converting to ASCII, Pure C Help, ST-Guide or Manualpage UDO can
generate a relative regular right margin due to its semi-automatic
syllabification.

The right margin becomes irregular when long words haven't enough place at
the end of a line. UDO will print a warning containing the specific word and
you should try to insert some syllabification marks.

(!HINT)

!index (!kw [fussy])
!index (!kw [sloppy])

The command (!KW [sloppy]) switches of these warnings, (!KW [fussy])
switches them back on. While developing a documentation you should use
(!KW [sloppy]). At the end of developing a text you should comment this
switch and you should look after warnings according short lines.
!endif

!end_node

!end_node

################################################################################
################################################################################
!iflang [german]
!begin_node Bilder
!endif
!iflang [english]
!begin_node Images
!endif
!html_name pictures.html
# 20.01.1996: Einbindung von GIF, MSP und PCX erklärt
# 22.01.1996: Erläuterungen zu (!/img) eingefügt

!iflang [german]
UDO ermöglicht die Einbindung von Bildern in den Ausgabeformaten
ST-Guide, HTML, WinHelp und (!TeX). Dieses Kapitel soll Ihnen erläutern,
wie Sie die Einbindung realsieren können und welche Kommandos UDO im
jeweiligen Ausgabeformat erzeugt.

!index (!kw [image])
Zur Einbindung von Bilder bedient man sich des Kommandos (!KW [image]),
bei dem man den Dateinamen der einzubindenden Datei (ohne Endung!)
angeben muss sowie optional eine Bildunterschrift angeben kann.

!index (!kkw [img])
Um Bilder bei HTML und WinHelp mitten im Text zu plazieren, kann man
sich des Platzhalters (!KKW [img]) bedienen. Bei den anderen
Ausgabeformaten ist es hingegen nicht möglich, Bilder mitten im Text
auszugeben. Eine genauere Erklärung dieses Platzhalters finden Sie im
Befehlsindex.

Seit Release 6 werden Bilder umgebungsabhängig positioniert. Wurden
Bilder einst immer zentriert ausgegeben, so werden Bilder nun nur noch
dann zentriert ausgegeben, wenn der (!KW [image])-Befehl Teil einer
center-Umgebung ist.

Bilder können also --- wie normaler Text auch --- linksbündig, zentriert
und rechtsbündig ausgegeben werden.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO enables you to include images into your destination format if it
supports images like ST-Guide, (!LaTeX), HTML and Windows Help.
This chapter explains how to include images into a destination
file and what destination commands UDO generates.

!index (!kw [image])
To display an image you can use the (!KW [image]) command. You have to add
the name of the image (!I)without(!i) suffix and an optional image title.

!index (!kkw [img])
To display images right inside the text you can use the placeholder
(!KKW [img]) when converting into Windows Help or HTML. The other
formats don't allow to use images inside the text or it is so difficult that
UDO can't automatize it.

Since Release 6 images will not be centred in all cases. To display a
centred image you have to insert the (!KW [image]) command into a center
environment. To display a right justified image you have to insert the
(!KW [image]) command inside a flushright environment. In all other cases
images will be displayed left justified.
!endif

################################################################################
# ToDo: englisch
#       Beschreibung richtig?
!begin_node *.eps & te(!TeX)
!html_name pictures_tex_te.html

!index (!kw [tex_tetex])
!iflang [german]
Wenn man EPS-Grafiken in ein (!LaTeX)-File einbinden möchte, welches mit dem
te(!TeX) weiterverabeitet werden soll, so (!B)muss(!b) im
Vorspann das Kommando (!KW [tex_tetex]) gesetzt werden.

!endif

!iflang [english]
If you are using CS-(!TeX) or Multi(!TeX) and you want to include a GEM
image into your DVI file you have to add (!KW [tex_strunk]) to your
preamble.

Because the drivers of CS-(!TeX) support the macros of Lindner-(!TeX) the
same is done here as in the upper section.
!endif

!end_node

################################################################################
!begin_node *.img & ST-Guide
!html_name pictures_stg.html

!iflang [german]
Beispiel: (!KW [image]) tiger Ein Tiger

UDO öffnet die Datei (!T)tiger.img(!t) und ermittelt die Ausmaße des Bildes,
erzeugt in der Ausgabedatei das ST-Guide-Kommando (!T)@limage(!t) und fügt dort
einen Wert ein, um den das Bild eingerückt werden soll. Dieser Wert
wird ausgehend von der Breite eines Zeichens aus dem
Standard-10pt-Systemfont berechnet.

Falls wie in diesem Beispiel eine Bildunterschrift angegeben wird,
wird diese, versehen mit ""(Abbildung x: Ein Tiger)"", ebenfalls unter
dem Bild ausgegeben.

Beachten Sie auch die Hinweise für das Lindner-(!TeX).

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Example: (!KW [image]) tiger A Tiger

UDO opens the file (!T)tiger.img(!t) and reads the size of this image. A
special ST-Guide command called (!T)@limage(!t) is generated and the needed
parameters are calculated due to the information of the GEM image header.

If you want to display a subtitle add it right after the name of the image
file. This subtitle will look like ""(Figure x: A tiger)"".

!endif

!end_node

################################################################################
!begin_node *.img & Lindner-(!TeX)
!html_name pictures_tex_lindner.html

!index (!kw [tex_lindner])
!iflang [german]
Wenn man GEM-Images in ein (!LaTeX)-File einbinden möchte, welches mit dem
Linder-(!TeX) weiterverabeitet werden soll, so (!B)muss(!b) im Vorspann das
Kommando (!KW [tex_lindner]) gesetzt werden. Daran erkennt UDO, dass ein
spezielles Lindner-(!TeX)-Makro zur Einbindung des Bildes erzeugt werden
soll.

UDO macht das dem Lindner-(!TeX) beiliegende Zusatzprogramm namens
(!T)IMGTOTEX(!t) überflüssig! UDO beinhaltet alle Aufgaben, für die sonst
(!T)IMGTOTEX(!t) zuständig ist, nämlich das Eintragen bestimmter
Auflösungswerte in den Header des jeweiligen GEM-Images. Ein Beispiel:

!index (!kw [tex_dpi])
!begin_quote
!begin_verbatim
!tex_dpi 100
!image tiger Ein GEM-Image
!end_verbatim
!end_quote

UDO liest zunächst den Header der Datei (!V)tiger.img(!v) ein, ermittelt daraus
die Ausmaße des Bildes und paßt den Header an 100 dpi an, was für die
spätere Ausgabe via DVI-Treibern wichtig ist. In der Zieldatei wird nun
ein (!TeX)-Makro mit Spezialbefehlen erzeugt, die die Einbindung eines
Bildes ermöglichen.

(!HINT)

Bei 100 dpi erscheinen Screenshots(!N)jedenfalls auf meinem HP DeskJet
510(!n) im Ausdruck in der Originalgröße. (!KW [tex_dpi]) kann vor jedem
Bild neu gesetzt werden, jedoch sollten das selbe Bild immer in der
gleichen Größe ausgedruckt werden, da der Image-Header jeweils passend
verändert wird.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
If you are using Lindner-(!TeX) and you want to include a GEM image into
your DVI file you have to add (!KW [tex_lindner]) to your preamble.

UDO replaces the tool called (!T)IMGTOTEX(!t) that is part of
Lindner-(!TeX). UDO has all functions of this tool built in.

To set the size of an image you have to use the (!I)!/tex_dpi(!i) command.
An example:

!begin_quote
!begin_verbatim
!tex_dpi 100
!image tiger A GEM image
!end_verbatim
!end_quote

UDO reads in the header of (!V)tiger.img(!v), calculates its size and
adjusts the header to 100 dpi. In the destination file a (!TeX) macro will
be generated that includes this image and displays it with 100 dpi.

!smallskip

(!HINT)

Using 100 dpi screenshots are displayed in the original screen
size on my HP DeskJet 510. (!KW [tex_dpi]) can be used before any image.
If you are using an image more than once you shouldn't try to display it in
different resolutions. Use a copy of your image instead and display the
original one with the first and the copy with the second resolution.
!endif

!end_node

################################################################################
!begin_node *.img & CS-(!TeX)/Multi(!TeX)
!html_name pictures_tex_csmulti.html

!index (!kw [tex_strunk])
!iflang [german]
Wenn man GEM-Images in ein (!LaTeX)-File einbinden möchte, welches mit dem
CS-(!TeX) oder Multi(!TeX) weiterverabeitet werden soll, so (!B)muss(!b) im
Vorspann das Kommando (!KW [tex_strunk]) gesetzt werden.

Da die Treiber des CS-(!TeX) auch die Spezialbefehle des Lindner-(!TeX)
unterstützen, werden hier die gleichen Dinge durchgeführt wie bei der
Umwandlung für das Lindner-(!TeX).
!endif

!iflang [english]
If you are using CS-(!TeX) or Multi(!TeX) and you want to include a GEM
image into your DVI file you have to add (!KW [tex_strunk]) to your
preamble.

Because the drivers of CS-(!TeX) support the macros of Lindner-(!TeX) the
same is done here as in the upper section.
!endif

!end_node

################################################################################
!begin_node *.msp & em(!TeX)
!html_name pictures_emtex_msp.html

!index (!kw [tex_emtex])
!iflang [german]
Um MSPs in einem em(!TeX)-File einzubinden, müssen Sie im Vorspann den
Befehl (!KW [tex_emtex]) angeben sowie die Auflösung des jeweiligen
Ausgabegeräts mit (!KW [tex_dpi]) setzen.

Die Einbindung erfolgt gemäß der Beschreibung aus (!V)dvidrv.doc(!v) vom em(!TeX).

!index Fehlermeldung
UDO versucht bei der Angabe von "(!KW [image] [tiger Ein Tiger])" die
Datei (!V)tiger.msp(!v) zu öffnen und die Ausmaße auszulesen. Schlägt dies
fehl, wird eine Fehlermeldung ausgegeben und stattdessen versucht,
(!V)tiger.pcx(!v) zu lesen.

Im Beispiel würde UDO folgendes Makro erzeugen ((!V)<w>(!v) und (!V)<h>(!v) werden
dabei durch die Ausmaße des Bildes ersetzt):

!begin_quote
!begin_verbatim
\begin{figure}[htb]
\begin{...}
\begin{picture}(<w>,<h>)
    \put(0,<h>){\special{em:graph tiger.msp}}
\end{picture}
\end{...}
\caption{Ein Tiger}
\end{figure}
!end_verbatim
!end_quote

(!HINT)

Bei einem HP DeskJet 510, der mit 300 dpi druckt, müssen Sie
(!KW [tex_dpi] [[300!!]]) benutzen. Den Auflösungswert können Sie für jedes Bild
neu setzen.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
If you are using em(!TeX) and you want to include an MSP image to your DVI
file you have to add (!KW [tex_emtex]) to your preamble. Furthermore you
have to set the resolution of an image via (!KW [tex_dpi]).

The macros for em(!TeX) are generated according to the information of
(!V)dvidrv.doc(!v) of em(!TeX).

In first place UDO tries to read in the header of (!V)tiger.msp(!v) when
reading the command (!KW [image] [tiger A tiger]). If UDO doesn't find
(!V)tiger.msp(!v) it will try to find (!V)tiger.pcx(!v).

An example shows what kind of macro UDO generates for em(!TeX). ''w'' and
''h'' represent the width and height of the image:

!begin_quote
!begin_verbatim
\begin{figure}[htb]
\begin{...}
\begin{picture}(<w>,<h>)
    \put(0,<h>){\special{em:graph tiger.msp}}
\end{picture}
\end{...}
\caption{A tiger}
\end{figure}
!end_verbatim
!end_quote

(!HINT)

I use (!KW [tex_dpi] [300]) on my HP DeskJet 510 to display
screenshots.
!endif

!end_node

################################################################################
!begin_node *.pcx & em(!TeX)
!html_name pictures_emtex_pcx.html

!iflang [german]
Um PCXe in einem em(!TeX)-File einzubinden, müssen Sie im Vorspann den
Befehl (!KW [tex_emtex]) angeben sowie die Auflösung des jeweiligen
Ausgabegeräts mit (!KW [tex_dpi]) setzen.

Die Einbindung erfolgt gemäß der Beschreibung aus (!V)dvidrv.doc(!v) vom
em(!TeX).

UDO versucht bei der Angabe von "(!KW [image] [tiger Ein Tiger])"
zunächst die Datei (!V)tiger.msp(!v) (nicht (!V).pcx(!v)!) einzubinden. Erst wenn
diese Datei nicht existiert, versucht UDO die Ausmaße der Datei
(!V)tiger.pcx(!v) zu ermitteln und ein entsprechendes em(!TeX)-Makro zu
schreiben.

Im Beispiel würde UDO folgendes Makro erzeugen ((!V)<w>(!v) und (!V)<h>(!v) werden
dabei durch die Ausmaße des Bildes ersetzt):

!begin_quote
!begin_verbatim
\begin{figure}[htb]
\begin{...}
\begin{picture}(<w>,<h>)
    \put(0,<h>){\special{em:graph tiger.pcx}}
\end{picture}
\end{...}
\caption{Ein Tiger}
\end{figure}
!end_verbatim
!end_quote


(!HINT)

Da UDO zunächst versucht, auf Grafiken im MSP-Format zuzugreifen,
erscheint im Logfile später eine Warnung. Diese können Sie dann bei der
Benutzung von PCX-Grafiken ignorieren.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
If you are using em(!TeX) and you want to include a Paintbrush PCX to your
DVI file you have to add (!KW [tex_emtex]) to your preamble. Furthermore
you have to set the resolution of an image via (!KW [tex_dpi]).

The macros for em(!TeX) are generated according to the information of
(!V)dvidrv.doc(!v) of em(!TeX).

In first place UDO tries to read in the header of (!V)tiger.msp(!v) when
reading the command (!KW [image] [tiger A tiger]). If UDO doesn't find
(!V)tiger.msp(!v) it will try to find (!V)tiger.pcx(!v).

An example shows what kind of macro UDO generates for em(!TeX). ''w'' and
''h'' represent the width and height of the image:

!begin_quote
!begin_verbatim
\begin{figure}[htb]
\begin{...}
\begin{picture}(<w>,<h>)
    \put(0,<h>){\special{em:graph tiger.pcx}}
\end{picture}
\end{...}
\caption{A tiger}
\end{figure}
!end_verbatim
!end_quote

!smallskip

(!HINT)

In first place UDO tries to find an MSP image. If you are using
images from Paintbrush PCX you can ignore the warning printed by UDO.
!endif

!end_node

################################################################################
!begin_node *.gif & HTML
!html_name pictures_html_gif.html

!iflang [german]
UDO kann zur Einbindung von GIFs in eine HTML-Seite entsprechende
HTML-Kommandos erzeugen.

Anders als bei den anderen Formaten wird der zweite Parameter nicht
als Bildunterschrift, sondern als Alternativtext benutzt.

Aus dem UDO-Befehl "(!KW [image] [tiger Ein Tiger])" wird folgender HTML-Befehl
erzeugt:

!begin_quote
!begin_verbatim
<p align=...>
<img src="tiger.gif" alt="Ein Tiger" width="200" height="300">
</p><br>
!end_verbatim
!end_quote

Wird keine Bildunterschrift angegeben, so fehlt die Angabe des
Alternativtextes bzw. es wird ein leerer Alternativtext benutzt. Auch
hier das Beispiel zur Veranschaulichung: Aus "(!KW [image] [../gif/tiger])"
wird

!begin_quote
!begin_verbatim
<p align=...>
<img src="../gif/tiger.gif" width="200" height="300">
</p><br>
!end_verbatim
!end_quote

Wer die Größenangaben nicht benötigt kann die Ermittlung der
Ausmaße von Bildern unterbinden. Dazu gibt es das Kommando (!kw [no_img_size]).

!endif
# ------------------------------------------------------------------------------
# ToDo: Englisch
!iflang [english]
UDO can generate HTML commands to include a GIF. 

For HTML the second parameter of the (!KW [image]) command will be used as
the alternative text. The command (!KW [image] [tiger A tiger]) will be
converted into the following HTML commands:

!begin_quote
!begin_verbatim
<p align=...>
<img src="tiger.gif" alt="(Figure 1: A tiger)" width="200" height="300">
</p><br>
!end_verbatim
!end_quote

If you don't set the title of this image UDO doesn't output an alternative
text. The command (!KW [image] [tiger]) will be converted into this:

!begin_quote
!begin_verbatim
<p align=...>
<img src="../gif/tiger.gif" width="200" height="300">
</p><br>
!end_verbatim
!end_quote

Wer die Größenangaben nicht benötigt kann die Ermittlung der
Ausmaße von Bildern unterbinden. Dazu gibt es das Kommando (!kw [no_img_size]).
!endif

!end_node

################################################################################
!begin_node *.jpg & HTML
!html_name pictures_html_jpg.html

!iflang [german]
Standardmäßig erwartet UDO, dass Sie Grafiken im GIF-Format darstellen
möchten (siehe oben). Natürlich ist es mit UDO aber auch möglich,
JPEG-Grafiken einzubinden.

!index (!kw [html_img_suffix])
Um UDO die Endung der Grafik mitzuteilen, die Sie für das nächste Bild
verwenden möchten, können Sie sich des Befehl (!KW [html_img_suffix])
bedienen.

Falls nun der bereits bekannte Tiger nicht als GIF, sondern als JPEG
vorliegt, stellen Sie dem im vorherigen Beispiel gezeigten
(!KW [image])-Befehl folgende Zeile voran:

!begin_quote
!begin_verbatim
!html_img_suffix jpg
!end_verbatim
!end_quote

Sollte die Grafik nicht tiger.jpg heißen, sondern tiger.jpeg, so muss
der Befehl entsprechend so lauten:

!begin_quote
!begin_verbatim
!html_img_suffix jpeg
!end_verbatim
!end_quote

Beachten Sie, dass die Endung für alle folgenden Grafiken gesetzt wird.
Falls später wieder ein GIF dargestellt werden soll, so muss die Endung
wieder mit (!KW [html_img_suffix] [[gif!!]]) eingestellt werden.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
By default UDO expects that you want to display GIF's (see above). But it's
possible to display any other kind of image format, too.

!index (!kw [html_img_suffix])

To tell UDO which suffix you want to use the next time you use the
(!KW [image]) command you can use the command (!KW [html_img_suffix]).

If the upper tiger isn't inside a GIF but inside a JPEG image you can insert
the following command right before the (!KW [image]) command:

!begin_quote
!begin_verbatim
!html_img_suffix jpg
!end_verbatim
!end_quote

If the file is named (!V)tiger.jpeg(!v) instead of (!V)tiger.jpg(!v) use the
following line:

!begin_quote
!begin_verbatim
!html_img_suffix jpeg
!end_verbatim
!end_quote

The setting is used for all following images. If you want to display a GIF
next time you have to use (!KW [html_img_suffix] [gif]) before the next
(!KW [image]) command is used.
!endif

!end_node

################################################################################
!begin_node *.bmp & WinHelp
!html_name pictures_winhelp.html

!iflang [german]
UDO kann Befehle zur Einbindung von Windows-Bitmaps in einen
Windows-Hilfetext ausgeben. UDO überprüft dabei nicht, ob die
angegebene Datei existiert! Ein Bild kann mit oder ohne
Bildunterschrift eingebunden werden.

!begin_enumerate
!item ohne Bildunterschrift: (!KW [image] [tiger])

!item mit Bildunterschrift: (!KW [image] [tiger Ein Tiger])
!end_enumerate

UDO erzeugt dann folgende RTF-Befehle:

!begin_quote
!begin_verbatim
{\qc \{bmc tiger.bmp\}}\par\pard
\par
{\qc (Abbildung 1: Ein Tiger)}\par\pard
!end_verbatim
!end_quote

(!HINTS)

!index Fehlermeldung
!begin_enumerate
!item UDO überprüft nicht, ob die angegebene Datei existiert. Bei einem
     falschen Dateinamen erhalten Sie also spätestens vom HC eine
     Fehlermeldung.

!index (!kw [win_inline_bitmaps])
!item Mit dem Schalter (!KW [win_inline_bitmaps]) werden die Bilder mit
     anderen Befehlen eingebunden, so dass sie quasi ""hardcoded""
     übernommen werden.
!end_enumerate

!end_node

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO can generate commands for Windows Help to display Windows bitmaps (BMP).
UDO doesn't check if a BMP is existing!

An image can be displayed with or without a subtitle. Windows Help centers
the image in the help file.

!begin_enumerate
!item without subtitle: (!KW [image] [tiger])
!item with subtitle: (!KW [image] [tiger A tiger])
!end_enumerate

UDO will then generate these commands:

!begin_quote
!begin_verbatim
{\qc \{bmc tiger.bmp\}}\par\pard
\par
{\qc (Figure 1: A tiger)}\par\pard
!end_verbatim
!end_quote

(!HINTS)

!begin_enumerate

!item	UDO won't check if the image file is existing. If it doesn't exists
or the filename is wrong the Microsoft Helpcompiler will print an error
message.

!index (!kw [win_inline_bitmaps])
!item	With the switch (!KW [win_inline_bitmaps]) you can tell UDO to use
special Windows Help commands to use ""hard-coded"" images.

!end_enumerate

!end_node

!endif

!end_node

################################################################################
################################################################################
!iflang [german]
!begin_node Hypertext-Elemente
!endif
!iflang [english]
!begin_node Hypertext commands
!endif
!html_name hypertext.html


################################################################################
!iflang [german]
!begin_node Sprungmarken
!label Labels
!endif
!iflang [english]
!begin_node Labels
!endif
!html_name syntax_hypertext_labels.html

!index (!kw [label])
!iflang [german]
Mit dem Befehl (!KW [label]) können im Quelltext sogenannte Sprungmarken
("Labels") gesetzt werden. Ein Beispiel für ein solches Label:

!begin_quote
!begin_verbatim
!label Beispiel
!end_verbatim
!end_quote

Bei den Hypertextformaten ST-Guide, HTML, WinHelp und Pure-C-Help
werden solche Sprungmarken automatisch referenziert, d.h. es werden von
UDO automatisch Querverweise zu diesen Sprungmarken angelegt. Bei
WinHelp werden diese Sprungmarken zusätzlich im Suchen-Dialog
angegeben, beim ST-Guide erscheinen sie im Index.

Im Beispiel könnte man dann im Hypertext von jedem Wort ""Beispiel"" an
die Stelle gelangen, an der diese Sprungmarke definiert wurde.

Die Umsetzung im Detail:

!begin_xlist [Linuxdoc-SGML:] !short
!item [HTML:]          (!V)<a name="Beispiel"></a>(!v)
!item [LaTeX:]         (!V)\label{Beispiel}(!v)
!item [Linuxdoc-SGML:] (!V)<label id="Beispiel">(!v)
!item [Pure-C-Help:]   (!V)sensitive("Beispiel")(!v) im Header
!item [ST-Guide:]      (!V)@symbol ar "Beispiel"(!v)
!item [Turbo-Vision:]  (!V).topic Beispiel(!v) im Header
!item [WinHelp:]       (!V)#{\footnote # Beispiel}(!v)
!end_xlist

!smallskip

(!HINT)

In einem Label sollte man keine Sonderzeichen, Kommata, Semikolen,
Anführungsstriche oder Apostrophe benutzen, da dies bei einigen der
Ausgabeformate zu Problemen kommen kann. Versuchen Sie bitte daher,
ohne diese Sonderzeichen auszukommen. In den meisten Fällen ist dies
durchaus machbar. Umlaute und Ziffern hingegen sind unproblematisch, da
diese von UDO besonders beachtet werden.

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Using the command (!KW [label]) you can set labels inside the source
file. An example:

!begin_quote
!begin_verbatim
!label example
!end_verbatim
!end_quote

When converting to the hypertext formats Windows Help, HTML, ST-Guide
and Pure C Help UDO inserts references inside the text to this label
automatically. You can search for these labels inside the search
dialog of Windows Help.

When you set the upper label you can jump from every position where
the word ""example"" is used to the position where you used the label.

Here a list how UDO converts a label for the hypertext formats:

!begin_xlist [Linuxdoc-SGML:] !short
!item [HTML:]          (!V)<a name="example"></a>(!v)
!item [LaTeX:]         (!V)\label{example}(!v)
!item [Linuxdoc-SGML:] (!V)<label id="example">(!v)
!item [Pure-C-Help:]   (!V)sensitive("example")(!v) inside the header
!item [ST-Guide:]      (!V)@symbol ar "example"(!v)
!item [Turbo-Vision:]  (!V).topic example(!v) inside the header
!item [WinHelp:]       (!V)#{\footnote # example}(!v)
!end_xlist

!smallskip

(!HINT)

You shouldn't use special chars like commas, semicolons, quotes or
apostrophes inside the label text because some formats have problems with
these special characters. Please try to avoid them. In most cases you can
avoid them if you really want.
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Querverweise
!endif
!iflang [english]
!begin_node Links
!endif
!html_name hypertext-links.html
# 23.01.1995: (!link ...) geändert
# 08.03.1996: WinHelp bei (!xlink ...)
!label Links

!iflang [german]
UDO legt bei den Hypertextformaten wie WinHelp, HTML oder ST-Guide
automatisch Verweise zu anderen Stellen des Textes an.

Sie haben darüber hinaus die Möglichkeit, auch zusätzliche Verweise
auf Kapitel oder Sprungmarken des Textes anzulegen oder auf externe
Dateien zu verweisen.

(!HINT)

Falls innerhalb eines der Link-Befehle eine ""("" oder ""]""
benutzt werden, so muss man diese quoten, damit UDO den Befehl korrekt
umsetzen kann. Beispiel:

!begin_quote
!begin_verbatim
Falsch:  (!link [Klammern])] [Verweis])
Richtig: (!link [Klammern!]!)] [Verweis])
                         ----
!end_verbatim
!end_quote

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Sometimes you maybe want to set a link to other parts of the current
document or to other documents. To make it possible for you to insert
links UDO offers you the placeholders called (!KKW [link]),
(!KKW [xlink]), (!KKW [url]) and (!KKW [plink]).

(!HINT)

If you want to use a ""("" or a ""]"" inside a link you have to
quote it with an exclamation mark:

!begin_quote
!begin_verbatim
Wrong: (!link [Brackets])] [Link])
Right: (!link [Brackets!]!)] [Link])
                       ----
!end_verbatim
!end_quote
!endif

################################################################################
!iflang [german]
!begin_node Interne Querverweise
!endif
!iflang [english]
!begin_node Internal links
!endif
!html_name hypertext-links_internal.html

!iflang [german]
Manchmal möchte man auf andere Stellen der Dokumentation oder auf
andere Hypertexte oder Homepages verweisen. Um dies zu ermöglichen,
bietet UDO einen Satz von Befehlen für Querverweise.

!index (!kkw [link])
Mit dem (!KKW [link])-Befehl können Sie Bezug auf andere Stellen im
aktuellen Dokument nehmen:

!begin_xlist [ST-Guide:] !short
!item [UDO:]      (!KK2W [link] [[ein Wort!!] [der Verweis!!]])
!item [HTML:]     <a href="file.htm#der Verweis">ein Wort</a>
!item [(!LaTeX):]    ein Wort (siehe \ref{der Verweis})
!item [ST-Guide:] @{"ein Wort" link "der Verweis"}
!item [WinHelp:]  {\uldb ein Wort}{\v der_Verweis}
!item [Turbo:]    {ein Wort:der_Verweis}
!item [sonst:]    ein Wort (siehe "der Verweis")
!end_xlist

# geändert 20.12.2003 - Ulrich Kretschmer
Hier nun ein Beispiel, bei dem auf den Abschnitt mit den Kontaktinformationen
zur UDO-Gemeinde verwiesen wird:
Aus!..

!begin_quote
!vinclude (!EXAMPLES)link.ui
!end_quote

wird!..

!begin_quote
!include (!EXAMPLES)link.ui
!end_quote

(!HINTS)

!begin_enumerate
!item Insgesamt dürfen in einem Absatz (!MAXLINK) Links benutzt werden. Wird
     diese Zahl überschritten, so gibt UDO eine Fehlermeldung aus, dass 
     der Link nicht ersetzt werden konnte. Zur Erinnerung: Absätze
     werden durch Leerzeilen getrennt.

!item  Bei der Umwandlung ins HTML- oder WinHelp-Format wird überprüft,
     ob der benutzte Verweis vorhanden ist. Ist er es nicht, so gibt
     UDO eine Fehlermeldung aus.

!item Bei (!LaTeX) kann man nur auf Labels und Aliase, nicht auf Kapitel
     verweisen.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
!index (!kkw [link])
Using the (!KKW [link]) command you can insert links to parts of
the current document. You can link to chapters, sections, subsections,
labels and aliases. The following list shows you how to use the link command
and how UDO converts it:

!begin_xlist [ST-Guide:] !short
!item [UDO:]      (!KK2W [link] [[a word!!] [the link!!]])
!item [HTML:]     <a href="file.htm#the link">a word</a>
!item [(!LaTeX):]    a word (see \ref{the link})
!item [ST-Guide:] @{"a word" link "the link"}
!item [WinHelp:]  {\uldb a word}{\v the_link}
!item [Turbo:]    {a word:the link}
!item [else:]    a word (see "the link")
!end_xlist

# geändert 20.12.2003 - Ulrich Kretschmer
The following example shows how to insert a link on the UDO contact information:

!begin_quote
!vinclude (!EXAMPLES)link.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)link.ui
!end_quote

(!HINTS)

!begin_enumerate

!item	You may use up to (!MAXLINK) links inside a paragraph. If you will use
more links UDO will print an error message.

!item	When converting to hypertext formats UDO checks if the link
destination exists. If it doesn't exits UDO prints an error message.
When converting to the other formats UDO doesn't check if the link
destination exists!

!item	(!LaTeX) only allows it to link to aliases and labels.

!end_enumerate

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Interne Querverweise mit Bildern
!endif
!iflang [english]
!begin_node Internal links with images
!endif
!html_name hypertext-links_internal_pictures.html

!index (!kkw [ilink])
!index (!kkw [img])
!index (!kkw [link])
!iflang [german]
Speziell für WinHelp und HTML gibt es den (!KKW [ilink])-Befehl, um
Verweise mit Darstellung eines Bildes zu erstellen. Dieser Befehl ist
eine Kombination aus (!KKW [link]) und (!KKW [img]) und wird bei den anderen
Formaten wie der oben besprochene Link-Befehl für interne Querverweise
behandelt:

!begin_xlist [WinHelp:] !short
!item [UDO:]      (!KK2W [ilink] [[img!!] [Text!!] [Verweis!!]])
!item [WinHelp:]  {\uldb \{bmc~img.bmp\}}{\v Verweis}
!item [HTML:]     <a href="Verweis"><img src="img.gif" alt="Text" border=0></a>
!item [sonst:]    analog zu (!KK2W [link] [[Text!!] [Verweis!!]])
!end_xlist

(!HINTS)

!begin_enumerate
!item UDO überprüft nicht, ob die Grafiken existieren.

!index (!kw [html_img_suffix])
!item UDO benutzt als Endung für die Grafiken standardmäßig "".gif"". Mit
dem Schalter (!KW [html_img_suffix]) kann die Endung jederzeit verändert
werden.

!item Insgesamt dürfen in einem Absatz (!MAXLINK) Links benutzt werden. Wird
diese Zahl überschritten, so gibt UDO eine Fehlermeldung aus, daß
der Link nicht ersetzt werden konnte. Zur Erinnerung: Absätze
werden durch Leerzeilen getrennt.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Especially for Windows Help and HTML there's existing the
(!KKW [ilink]) (""image link"") commands. It is a mixture of
the (!KKW [img]) and (!KKW [link]) command that allows to
display ""hyperimages"". If you click an image you will jump to
another part of the current document.

!begin_xlist [WinHelp:] !short
!item [UDO:]      (!KK2W [ilink] [[img!!] [text!!] [link!!]])
!item [WinHelp:]  {\uldb \{bmc~img.bmp\}}{\v link}
!item [HTML:]     <a href="link"><img src="img.gif" alt="text" border=0></a>
!item [else:]    like (!KK2W [link] [[text!!] [link!!]])
!end_xlist

(!HINTS)

!begin_enumerate

!item	UDO won't check if the images exist.

!index (!kw [html_img_suffix])
!item	By default UDO uses ''(!V).gif(!v)'' as the suffix for images when
converting to HTML. You can use the command (!KW [html_img_suffix]) to
change the suffix.

!item	You may use up to (!MAXLINK) links inside a paragraph. If you will use
more links UDO will print an error message.

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Interne Querverweise auf Seiten
!endif
!iflang [english]
!begin_node Internal links to pages
!endif
!html_name hypertext-links_internal_pages.html

!index (!kkw [plink])
!iflang [german]
Speziell für (!LaTeX) gibt es noch den (!KKW [plink])-Befehl, um Bezug auf
andere Seiten zu nehmen:

!begin_xlist [sonst:] !short
!item [UDO:] (!KK2W [plink] [[Links!!] [Querverweise!!]])
!item [(!LaTeX):] Links (siehe Seite \pageref{Querverweise})
!item [sonst:] Links
!end_xlist

Hier nun ein Beispiel, bei dem auf die Seite verwiesen wird, auf der
Sie meine Anschrift finden. Aus!..

!begin_quote
!vinclude (!EXAMPLES)plink.ui
!end_quote

wird!..

!begin_quote
!include (!EXAMPLES)plink.ui
!end_quote

(!HINTS)

!begin_enumerate
!item Bei (!LaTeX) kann man nur auf Labels, nicht auf Kapitel verweisen.

!item Insgesamt dürfen in einem Absatz (!MAXLINK) Links benutzt werden. Wird
diese Zahl überschritten, so gibt UDO eine Fehlermeldung aus, dass 
der Link nicht ersetzt werden konnte. Zur Erinnerung: Absätze
werden durch Leerzeilen getrennt.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Especially for (!LaTeX) there's existing the (!KKW [plink])
(""page link"") command:

!begin_xlist [LaTeX:] !short
!item [UDO:] (!KK2W [plink] [[link commands!!] [Links!!]])
!item [(!LaTeX):] link commands (see page \pageref{Links})
!item [else:] link commands
!end_xlist

The following example shows how to insert a page like to the page that
contains my contact addresses:

!begin_quote
!vinclude (!EXAMPLES)plink.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)plink.ui
!end_quote

(!HINTS)

!begin_enumerate

!item	You can only insert page links to labels and aliases, not to
chapters when converting to (!LaTeX).

!item	You may use up to (!MAXLINK) links inside a paragraph. If you will use
more links UDO will print an error message.

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Externe Querverweise
!endif
!iflang [english]
!begin_node External links
!endif
!html_name hypertext-links_external.html

!index (!kkw [xlink])
!index (!kkw [url])
!iflang [german]
Mit den Befehlen (!KKW [xlink]) und (!KKW [url]) können Sie Bezug auf Stellen
(!I)anderer(!i) Hypertexte oder Homepages nehmen. Der Unterschied zum
obigen Befehl besteht darin, dass beim zweiten Parameter bis auf die
Tilde keine Sonderzeichen angepasst werden (bei Pfadangaben fatal!)

!begin_xlist [ST-Guide:] !short
!item [UDO:]      (!KK2W [xlink] [[UDO!!] [*:\udo.hyp!!]])
!item [ST-Guide:] @{"UDO" link "*:\udo.hyp"}
(!nl)
!item [UDO:]      (!KK2W [xlink] [[Atari!!] [http://www.atari.com!!]])
!item [HTML:]     <A HREF="http://www.atari.com">Atari</A>
(!nl)
!item [UDO:]      (!KK2W [xlink] [[UDO!!] [Titel@d:/winhelp/udo.hlp!!]])
!item [WinHelp:]  {\uldb UDO}{\v Titel@d:/winhelp/udo.hlp}
(!nl)
!item [sonst:]    UDO bzw. Atari
!end_xlist

!ifdest [stg]
Hier nun ein paar kurze Beispiele für externe Verweise in einem ST-Guide-Hypertext. Aus!..

!begin_quote
!vinclude (!EXAMPLES)stg/xlink.ui
!end_quote

wird!..

!begin_quote
!include (!EXAMPLES)stg/xlink.ui
!end_quote
!endif

!ifdest [win,wh4]
Hier nun ein paar kurze Beispiele für externe Verweise in einem WinHelp-Datei. Aus!..

!begin_quote
!vinclude (!EXAMPLES)winhelp/xlink.ui
!end_quote

wird!..

!begin_quote
!include (!EXAMPLES)winhelp/xlink.ui
!end_quote
!endif

!ifdest [html,hh]
Hier nun ein paar kurze Beispiele für externe Verweise in einer
HTML-Datei. Aus!..

!begin_quote
!vinclude (!EXAMPLES)html/xlink.ui
!end_quote

wird!..

!begin_quote
!include (!EXAMPLES)html/xlink.ui
!end_quote

!endif

(!HINTS)

!begin_enumerate
!item Für WinHelp muss man gültige Topicnamen und Dateinamen angeben.
Der HCP akzeptiert in Topicnamen nur Buchstaben, Ziffern und den
Underscore. Andere Zeichen werden von UDO angepasst!

!item Für den ST-Guide sollte man dem Dateinamen die Zeichen ''(!V)*:\(!v)''
voranstellen, so dass der ST-Guide in allen in den für ihn angegebenen
Verzeichnissen aus der in der (!V)ST-GUIDE.INF(!v) angegebenen Variable namens
(!V)PATHS(!v) nach der Datei sucht.

!index (!kw [no_xlinks])
!item Durch den Schalter (!KW [no_xlinks] [[~!!]]) können Sie im
Vorspann angeben, bei welchen Formaten externe Verweise umgewandelt
werden sollen. Dieser Schalter wird z.B. dann benötigt, falls man eine
Seite mit Verweisen für das Internet angelegt hat, die in einem
ST-Guide- oder WinHelp-Hypertext keinen Sinn machen würden.

!index (!kkw [nolink])
!item Durch den Platzhalter (!KKW [nolink]) können Sie Text
angeben, bei dem keine Verweise erzeugt werden sollen.

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
With the (!KKW [xlink]) (""external link"") and (!KKW [url]) commands you can
insert links to (parts of) other documents, net sites or
hypertexts. The difference to the upper command: UDO doesn't adjust
special chars of the link destination. The tilde isn't a non-breaking space
in the link destination, too.

!begin_xlist [ST-Guide:] !short
!item [UDO:]      (!KK2W [xlink] [[UDO!!] [*:\udo.hyp!!]])
!item [ST-Guide:] @{"UDO" link "*:\udo.hyp"}
(!nl)
!item [UDO:]      (!KK2W [xlink] [[Atari!!] [http://www.atari.com!!]])
!item [HTML:]     <A HREF="http://www.atari.com">Atari</A>
(!nl)
!item [UDO:]      (!KK2W [xlink] [[UDO!!] [Titel@d:/winhelp/udo.hlp!!]])
!item [WinHelp:]  {\uldb UDO}{\v Titel@d:/winhelp/udo.hlp}
(!nl)
!item [else:]     UDO (or Atari)
!end_xlist

!ifdest [stg]
How to use external links inside an ST-Guide file is descriped in the
following example:

!begin_quote
!vinclude (!EXAMPLES)stg/xlink.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)stg/xlink.ui
!end_quote
!endif

!ifdest [win,wh4]
How to use external links inside a Windows Help file is descriped in the
following example:

!begin_quote
!vinclude (!EXAMPLES)winhelp/xlink.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)winhelp/xlink.ui
!end_quote
!endif

!ifdest [html,hh]
How to use external links inside an HTML file is descriped in the
following example:

!begin_quote
!vinclude (!EXAMPLES)html/xlink.ui
!end_quote

!.. will be displayed this way:

!begin_quote
!include (!EXAMPLES)html/xlink.ui
!end_quote

!endif

(!HINTS)

!begin_enumerate

!item	You have to use existing topic names for Windows Help. A topic name
must contain only numbers and characters form the alphabet. All other
characters will be converted by UDO.

!item	You should use ''(!V)*:\(!v)'' at the beginning of an external link
for the ST-Guide to tell it to look for the hypertext in all directories you
defined with (!V)PATHS(!v) in your (!V)ST-GUIDE.INF(!v).

!index (!kw [no_xlinks])
!item Using the switch called (!KW [no_xlinks]) you can
suppress the conversion of external links. This is useful if you wrote
a source file especially for HTML and you want to make a version for
Windows Help or ST-Guide, where the external file would make no
sense.
!end_enumerate

!endif

!end_node

!end_node

!end_node

################################################################################
################################################################################
!iflang [german]
!begin_node Verschiedenes
!endif
!iflang [english]
!begin_node Miscellaneous
!endif
# alter deutscher Titel: Miszellaneen (geändert 08.12.2003 - U. Kretschmer)
!html_name miscellaneous.html


################################################################################
!iflang [german]
!begin_node Verteilte Dokumente
!endif
!iflang [english]
!begin_node Split documents
!endif
!html_name distributed_documents.html
# 22.01.1996: !rinclude

!index (!kw [include])
!index (!kw [rinclude])
!index (!kw [vinclude])
!index (!kw [sinclude])
!index (!kw [cinclude])
!index (!kw [input])

!iflang [german]
UDO stellt Ihnen die Kommandos (!KW [include]), (!KW [input]),
(!KW [vinclude]) und (!KW [rinclude]) zur Verfügung, mit denen Sie die
Möglichkeit erhalten, ein großes Dokument in mehrere kleine Dateien
aufzuteilen oder identische Passagen mehrfach einzubinden.

(!KW [include]) kann sowohl im Vorspann als auch im Hauptteil benutzt werden.
Dadurch besteht die Möglichkeit, sowohl Makros und Trennvorschläge als
auch Kapitel in externe Dateien auszulagern.

Um den Inhalt von Dateien als Klartext darstellen zu können, bedient
man sich des Kommandos (!KW [vinclude]) ("verbatim include"). Tip: Das
Kommando (!KW [vinclude]) eignet sich sehr gut, um Sourcecodes oder
Headerfiles darzustellen.

Falls man direkte Befehle für ein Format nachladen möchte, so kann man
sich des Kommandos (!KW [rinclude]) (""raw include"") bedienen. Tip: Dieser
Befehl eignet sich im Zusammenhang mit dem (!KW [ifdest])-Kommando dazu, um
z.B. spezielle (!LaTeX)-Tabellen oder HTML-Formulare einzubinden.

Diese Dokumentation macht übrigens intensiven Gebrauch von diesen
Möglichkeiten. Die Datei ''(!V)udo.u(!v)'' enthält lediglich wichtige
Einstellungen und etliche (!KW [include])-Kommandos, jedoch keine
einzige Zeile ""sichtbaren"" Textes.

(!B)Mögliche Anwendungsgebiete:(!b)

!begin_enumerate

!item Bei umfangreichen Texten empfiehlt es sich, die Kapitel in
eigenen Dateien zu halten und von einer Hauptdatei mittels
(!KW [include]) an passender Stelle einzubinden. Dies hat den Vorteil, dass 
man durch einfaches Verschieben des (!KW [include])-Befehls dem Text
eine neue Struktur geben zu können.

!item Teilt man Texte in mehrere Dateien auf, die von einer Hauptdatei
nachgeladen werden, kann dies die Fehlersuche erheblich beschleunigen.
Durch auskommentieren der Zeilen, die bereits korrekte Kapitel
einladen, kann man sofort sehen, wie UDO das zuletzt bearbeitete
Kapitel umwandelt.

!item In Verbindung mit Makros kann man sich standardisierte Texte
erstellen, die man für mehrere Programmbeschreibungen verwenden kann.
Z.B. tauchen in Programmdokumentationen immer wieder die Kapitel auf,
die sich mit dem Haftungsausschluss oder den Warenzeichen anderer
Produkte befassen.

!item Beim Schreiben eines Textes kann die Arbeit auf beliebig viele
Personen aufgeteilt werden. Jeder Autor kann dann in aller Ruhe seine
Texte bearbeiten und austesten. Erst kurz vor Vollendung des
Gesamtwerks fasst ein Projektleiter alle Texte zu einem zusammen.

UDO wird beispielsweise dazu eingesetzt, ein Online-Computermagazin zu
erstellen. Der Projektleiter gibt Vorgaben, wie das Layout der
einzelnen Artikel auszusehen hat, damit ein einheitliches
Erscheinungsbild gewährleistet wird. Jedes Projektmitglied schreibt nun
seinen Artikel. Ist ein Artikel fertig, wird er dem Projektleiter zur
Verfügung gestellt. Dieser kann nun nach und nach das Magazin
komplettieren.

!index (!kw [tabwidth])

!item Mit (!KW [vinclude]) lassen sich in Verbindung mit
(!KW [tabwidth]) sehr leicht Sourcecodes oder Headerfiles darstellen, falls
man beispielsweise eine Library oder eine Programmiersprache
beschreiben möchte.
!end_enumerate

# hinzugefügt 02.02.2004 - Ulrich Kretschmer
(!B)Achtung(!b): Vermeiden Sie Konstruktionen wie
!begin_xlist !short
!item [a.ui:] (!V)!include b.ui(!v)
!item [b.ui:] (!V)!include a.ui(!v)
!end_xlist
oder auch
!begin_xlist !short
!item [a.ui:] (!V)!include b.ui(!v)
	!begin_xlist !short
	!item [b.ui:] (!V)!include c.ui(!v)
		!begin_xlist !short
		!item [c.ui:] (!V)!include a.ui(!v)
		!end_xlist
	!end_xlist
!end_xlist
die zu Endlos-Schleifen führen!

UDO kann derartige Über-Kreuz-Verweise nicht abfangen und liefert als Fehlermeldung
lediglich "memory allocation failed".

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO offers you the commands (!KW [include]), (!KW [input]), (!KW [vinclude]) and
(!KW [rinclude]). With these commands you are enabled to split up a
document into many files that are included by a main file. Furthermore
you can use these commands to include an often used passage that you
have to type only once.

This documentation uses this commands intensively. The file
(!V)udo.u(!v) doesn't contain any text and just includes other files.
So I have the possibility to find some passages more fast if I have to
change the documentation.

You can use (!KW [include]) wherever you want. So you can define macros,
definitions or syllabification patterns in external files that can be used
by other files, too.

For displaying the preformatted contents of a file you can use the
(!KW [vinclude]) command (""verbatim include""). You can use this
command e.g. for displaying source files or header files.

If you want to include special commands for a destination format like
difficult tables for (!LaTeX) or HTML you can use the
(!KW [rinclude]) command (""raw include"").

(!B)Possible examples of use:(!b)

!begin_enumerate

!item	When writing large source files you can edit a separate file for
each chapter that are included by a main file with (!KW [include]). Thus
you can restructure your text by simply moving one line of the main file.

!item	If you split up your text into several file that are included by a
main file you can speed up looking for errors because you can simply switch
off some parts of the text by commenting out one line of the main file.

!item	Together with macros you can write standardized texts that you can
use for many projects. E.g. you can edit a standard disclaimer where the
name of the software is replaced by macros that are defined by the main
file.

!item	A documentation can be written by different persons. Each author can
test his own file with UDO. If everybody has finished his work all files
will be included by a main file.

!index (!kw [tabwidth])

!item	With (!KW [vinclude]) and (!KW [tabwidth]) you can add source
code to your documentation. This is great for a documentation of a source
code or a library.

!end_enumerate

# hinzugefügt 02.02.2004 - Ulrich Kretschmer
(!B)Warning(!b): Avoid constructions like
!begin_xlist !short
!item [a.ui:] (!V)!include b.ui(!v)
!item [b.ui:] (!V)!include a.ui(!v)
!end_xlist
or
!begin_xlist !short
!item [a.ui:] (!V)!include b.ui(!v)
	!begin_xlist !short
	!item [b.ui:] (!V)!include c.ui(!v)
		!begin_xlist !short
		!item [c.ui:] (!V)!include a.ui(!v)
		!end_xlist
	!end_xlist
!end_xlist
which cause infinite loops!

UDO can't recognize such overcross references. You get only a (less informative)
error message "memory allocation failed".

!endif

!end_node

################################################################################
!iflang [german]
!begin_node Makros
!endif
!iflang [english]
!begin_node Macros
!endif
!html_name macros.html
# 31.12.1995: Vorformatierte Makros
# 14.07.1996: Makros mit Parametern

!iflang [german]
Makros sind benutzerdefinierte Platzhalter, die sich für die
verschiedensten Dinge eignen.

!index (!kw [macro])
Beim Befehl (!KW [macro]) geben Sie zunächst den Bezeichner des Makros an,
dem sich der Ersetzungstext anschließt. Letzterer kann auch leer sein.

Um im Quelltext später den Inhalt eines Makros ausgeben zu lassen,
geben Sie den Bezeichner der Makros mit einem führenden Ausrufezeichen
und eingeschlossen in runde Klammern an.

Auch hier zunächst ein paar Beispiele:

!begin_quote
!vinclude (!EXAMPLES)macro1.ui
!end_quote

!index (!kw [include])
Diese Makros könnten dazu benutzt werden, sich lästige Tipparbeit zu
sparen oder Änderungen zu beschleunigen. Ein weiteres Anwendungsgebiet
ist das Erstellen von standardisierten Texten, deren Inhalt durch
Makros an den jeweiligen Quelltext angepasst wird. Im folgenden
Beispiel wird der Programmname in einen Disclaimer eingebaut, der per
(!KW [include]) eingebunden wird:

!begin_quote
!vinclude (!EXAMPLES)macro2.ui
!end_quote

!smallskip

!index Makros !! Parameter
!index Parameter !! Makros

Seit UDO Release 6 können Makros auch Parameter übergeben werden. Bei
der Erzeugung eines Makros geben Sie dazu mit ''(!T)(!/1)(!t)'', ''(!T)(!/2)(!t)'' bis ''(!T)(!/9)(!t)''
die Position der Parameter an. Um den Makros im Text die Parameter zu
übergeben, setzen Sie diese in eckige Klammern.

Hier ein kleines Beispiel, bei dem ein Makro für die Ausgabe von
gleichzeitig fettem und kursiven Text definiert wird und später mit
nur einem Parameter aufgerufen wird:

!begin_quote
!vinclude (!EXAMPLES)macro3.ui
!end_quote

Die Worte ""fett und kursiv"" werden bei der Ausgabe dann an die Stelle
von (!/1) gesetzt. Das Beispiel ist zugegebenermaßen nicht gerade
glücklich gewählt, da man mit Schriftarten möglichst sparsam umgehen
sollte, zeigt aber hier auf einfache Weise, wie man Makros einsetzen
könnte.

!smallskip

(!HINTS)

!begin_enumerate
!item Bei der Namensvergabe der Makros sollte man möglichst darauf
achten, diese nicht wie bereits existente Befehle oder Platzhalter zu
benennen. So sollten sie ein Makro nicht ""B"" oder ""nl"" benennen, da
dann die Umschaltung in Fettschrift ((!KK1 [B])) oder ein erzwungener
Zeilenumbruch nicht mehr funktionieren.

!item Die Benutzung von Makros sollte nicht übertrieben werden. UDO
erlaubt zwar die Benutzung von bis zu (!MAXMACRO) Makros, jedoch verlangsamt
jedes zusätzliche Makro die Umwandlung der Quelldatei, da jede Zeile
nach allen Makros durchsucht werden muss.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Macros are userdefined placeholders that you can use for different
purposes.

!index (!kw [macro])
When using the (!KW [macro]) command you tell UDO the name of the macro in
first place. The name of the macro is followed by its contents which may be
empty, too.

Let me show you some examples:

!begin_quote
!vinclude (!EXAMPLES)macro1.ui
!end_quote

!index (!kw [include])
Macros can help you to save time when typing often used long words.
Furthermore macros can help you to change the contents of your file by
simply changing the contents for macros (e.g. if your program name changed
and you use a macro for the name of your program). Another example is the
usage of standardized text (e.g. a standard disclaimer) where you use macros
instead of the name of the program etc. These standardized texts can be
included with (!KW [include]). In the following example a disclaimer is
included and the name of the program is defined by a macro:

!begin_quote
!vinclude (!EXAMPLES)macro2.ui
!end_quote

!smallskip

!index Macros !! Parameters
!index Parameters !! Macros

Since UDO Release 6 you can call macros with parameters. You can set the
position of the parameters in the (!I)!/macro(!i) command by inserting
''(!T)(!/1)(!t)'', ''(!T)(!/2)(!t)'' till ''(!T)(!/9)(!t)''. To call a macro
with parameters you have to write brackets (''[!..]'') around them.

The following small example shows how to use a macro for text that shall be
printed in bold-italic style:

!begin_quote
!vinclude (!EXAMPLES)macro3.ui
!end_quote

The ""(!/1)"" in the macro line will be replaced by the words ""bold and
italic"".

!smallskip

(!HINTS)

!begin_enumerate

!item When naming the macros you should be cautious not to use pre-defined
UDO command names like ""B"" or ""nl"". If you don't you will get problems
with bold text ((!KK1 [B])) or the newline command ((!KKW [nl])).

!item You shouldn't use too many macros because every additional macro slows
down the conversion of the source file. The maximum number of macro is
(!MAXMACRO).

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Definitionen
!endif
!iflang [english]
!begin_node Definitions
!endif
!html_name definitions.html

!iflang [german]
Definitionen sind (wie Makros) benutzerdefinierte Platzhalter. Sie
können dazu dienen, im endgültigen Text spezielle Kommandos
einzubauen.

!index (!kw [define])
Die Syntax für eine Definition lautet (!KW [define] [<wort> <text>]). Im
Gegensatz zu den Makros wird (!T)<text>(!t) nicht speziell angepasst, d.h. es
werden keine Umlaute und andere Sonderzeichen angepasst.

Im folgenden Beispiel benutzen wir eine Definition, um nur im
HTML-Format ein Wort als Überschrift auszugeben:

!begin_quote
!vinclude (!EXAMPLES)define1.ui
!end_quote

!smallskip

Wie Sie sehen, können Sie mit diesen Definitionen spezielle Befehle des
Ausgabeformates einbauen, die UDO standardmäßig nicht anbietet. In UDO4
gab es mal einen Satz Spezialplatzhalter, die nur für (!LaTeX) vorhanden
waren. Da diese Platzhalter selten gebraucht wurden, die Umwandlung
eines Quelltextes daher zumeist unnötig bremste, muss man diese
Platzhalter nun mit geeigneten Definitionen nachahmen:

!index \linebreak
!index \nolinebreak
!begin_quote
!vinclude (!EXAMPLES)define2.ui
!end_quote

!smallskip

!index Definitionen !! Parameter
!index Parameter !! Definitionen
Auch bei den Definitionen können Sie Parameter benutzen. Gerade wenn
es darum geht, Befehle einiger Formate direkt einzubauen, kann diese
Möglichkeit der hifreich sein.

Benutzt werden Definitionen, die Parameter enthalten sollen, wie
Makros mit Parametern. Text, der beim Aufruf einer Definition anstelle
eines der durchnummerierten Parameter ausgegeben werden soll, ist in
eckige Klammern einzufassen.

Im obigen Beispiel habe ich Ihnen gezeigt, wie man eine Überschrift für
HTML erzeugen könnte. Benutzt man Parameter, könnte man Überschriften
wesentlich eleganter erzeugen:

!begin_quote
!vinclude (!EXAMPLES)define3.ui
!end_quote

Sie sehen, dass Sie mit diesem Befehl einige Möglichkeiten haben,
spezielle Funktionen eines Formates nachzubilden, die UDO standardmäßig
nicht zur Verfügung stellt.

Das obige Beispiel für (!LaTeX) ließe sich mit einer parametrischen
Definition übrigens viel eleganter lösen:

!begin_quote
!vinclude (!EXAMPLES)define4.ui
!end_quote

In diesem Beispiel wird nur ein Parameter an die Definition übergeben.
Trotzdem soll für Nicht-(!LaTeX)-Formate der 2. Parameter ausgegeben
werden. Sie werden sich vielleicht fragen, warum dies so ist. Nun, bei
Nicht-(!LaTeX)-Formaten soll nichts ausgegeben werden. Ein zweiter
Parameter ist nicht vorhanden, demnach leer, und somit wird ''lb (!/2)''
zu nichts expandiert. Dieser Umweg ist leider nötig.

!smallskip

(!HINTS)

!begin_enumerate
!item Der Text, der zusammen mit (!KW [define]) angegeben wird, wird
nicht an das Ausgabeformat angepasst.

!item Text, der als Parameter an eine Definition übergeben wird, wird
an das Ausgabeformat angepasst.

!index (!kw [heading])
!item UDO kann natürlich Überschriften mit (!KW [heading]) direkt
erzeugen. Die obigen Beispiele eigneten sich halt gut zur Darstellung
des Problems.

!item Wie bei den Makros sollten Sie aufpassen, dass sie keine von UDO
benutzten Platzhalter wie (!KK1 [B]), (!KK1 [v]), (!KKW [TeX]) etc. verwenden. Auch gibt
es hier eine maximale Anzahl von benutzbaren Definitionen. Sie liegt
momentan bei maximal (!MAXMACRO) pro Quelltext.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Like macros definitions are user-defined placeholders. You can use them to
insert special commands inside the text especially for the destination
format.

!index (!kw [define])
The syntax  is (!KW [define] [<word> <text>]). In contrast to macros
(!T)<text>(!t) will not be converted in a special way. No special
characters are translated inside (!T)<text>(!t).

In this example I will demonstrate how to print headlines with HTML:

!begin_quote
!vinclude (!EXAMPLES)define1.ui
!end_quote

!smallskip

As you can see you can use definitions to insert special commands that
aren't supported by UDO. UDO Release 4 offered a lot of special
commands for (!LaTeX) that you now have to simulate with the
(!KW [define]) command:

!index \linebreak
!index \nolinebreak
!begin_quote
!vinclude (!EXAMPLES)define2.ui
!end_quote

!smallskip

!index Definitions !! Parameters
!index Parameters !! Definitions
You can use definitions with parameters, too. Definitions with parameters
are used the same way you can use macros with parameters. Definitions with
parameters are a great help to expand UDO's support of a destination format.

You declare definitions like in the upper example. You can tell UDO the
positions of the parameters by adding ''(!T)(!/1)(!t)'', ''(!T)(!/2)(!t)''
till ''(!T)(!/9)(!t)''. When you call a definition you have to write
brackets (''[!..]'') around the parameters.

In the upper example I have shown you how to make a heading for HTML. When
using parameters it may look like the following example:

!begin_quote
!vinclude (!EXAMPLES)define3.ui
!end_quote

As you can see in this example you can write format depending commands UDO
doesn't support already.

The upper (!LaTeX) example can be defined nicer, too. If you use parameters
you can provide all available (!LaTeX) commands in one definition:

!begin_quote
!vinclude (!EXAMPLES)define4.ui
!end_quote

In this example only one parameter is used but the non-(!LaTeX) definition
contains a second parameter. You may ask yourself why it has to be like
this. Well, if you call the definition with only one parameter the second
parameter is empty. When expanding the non-(!LaTeX) definition UDO will
replace the definition placeholder by empty space (because there is no second
parameter, you understand?). Unfortunately you have to use this work-around
when using definition with placeholders.

!smallskip

(!HINTS)

!begin_enumerate
!item	Characters of the text of the (!KW [define]) command won't be
converted.

!item	Characters of the parameters you pass to the definition will be
converted.

!index (!kw [heading])
!item	UDO supports the (!KW [heading]) command for displaying headlines.
The upper HTML example is only used for demonstration.

!item When naming the definitions you should be cautious not to use
pre-defined UDO command names like ""B"" or ""nl"". If you don't you will
get problems with bold text ((!KK1 [B])) or the newline command ((!KKW [nl])).

!item You shouldn't use too many definitions because every additional
definition slows down the conversion of the source file. The maximum number
of definitions is (!MAXMACRO).

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Symbole
!endif
!iflang [english]
!begin_node Symbols
!endif
!html_name symbols.html

!index (!kw [ifnset])
!index (!kw [ifset])
!index (!kw [set])
!index (!kw [unset])
!index -D
!index -U

!iflang [german]
Symbole sind benutzerdefinierte inhaltsleere Variablen, welche sich
durch das Kommando (!KW [set]) und beim Aufruf von UDO durch die
Kommandozeilenoption (!V)-D(!v) setzen und mit dem Kommando (!KW [unset]) auch
wieder entfernen lassen. Ob ein Symbol (nicht) gesetzt ist, lässt sich
durch die Abfrage-Befehle (!KW [ifset]) bzw. (!KW [ifnset]) testen.

Die Einsatzmöglichkeiten von Symbolen sind vielfältig. Im folgenden
Beispiel werde ich versuchen, Ihnen ein typisches Anwendungsgebiet zu
zeigen, bei dem man je nach gesetzten Symbolen eine Zieldatei mit
unterschiedlichem Inhalt erhält.

Gehen wir einmal davon aus, dass wir einen Quelltext geschrieben haben,
der drei Kapitel enthält. Die ersten beiden Kapitel sind bereits
fertig, am letzten Kapitel wird noch eifgrig herumgebastelt. Um nun die
Turn-Around-Zeiten zu minimieren, wollen wir eine Zieldatei erzeugen,
die nur das dritte Kapitel enthält. Nur wenn das Symbol ''AlleKapitel''
gesetzt ist, soll die Zieldatei alle Kapitel enthalten:

!begin_quote
!vinclude (!EXAMPLES)symbol1.ui
!end_quote

Starten Sie UDO nun ""normal"", wird eine Zieldatei erstellt, die nur das
dritte Kapitel enthält. Starten Sie UDO hingegen mit der
Kommandozeilenoption ''(!V)-D~AlleKapitel(!v)'', so werden alle Kapitel umgewandelt.

Das Spielchen kann man natürlich noch etwas ausbauen. Durch Verwendung
weiterer Symbole kann man gezielt nur einzelne Kapitel oder alle
zusammen in die Zieldatei aufnehmen. Im folgenden Beispiel wird bei
Übergabe der Option ''(!V)-D~Kapitel1(!v)'' nur das erste Kapitel in die
Zieldatei aufgenommen. Übergibt man ''(!V)-D~Kapitel1(!v)'' und ''(!V)-D~Kapitel2(!v)'',
so werden das erste und das zweite Kapitel eingebunden. Übergibt man
hingegen ''(!V)-D~AlleKapitel(!v)'', so wird die Zieldatei komplett dargestellt:

!begin_quote
!vinclude (!EXAMPLES)symbol2.ui
!end_quote

Der Phantasie sind also wenige Grenzen gesetzt!

Wie in der Einführung zu diesem Abschnitt beschrieben, lassen sich
Symbole auch wieder löschen. Dazu bedient man sich des Befehls (!KW [unset]).

Wollen Sie in obigem Beispiel partout verhindern, dass alle Kapitel in
die Zieldatei eingebunden werden, so können Sie zuvor das Symbol
AlleKapitel löschen, sofern es gesetzt wurde. Dies funktioniert so:

!begin_quote
!vinclude (!EXAMPLES)symbol3.ui
!end_quote

In diesem Beispiel wird also zunächst abgefragt, ob das Symbol
''(!V)AlleKapitel(!v)'' gesetzt ist. In dem Falle wird es durch den Befehl
(!KW [unset]) gelöscht. Die vorherige Abfrage ist deshalb notwendig, damit
man eine Fehlermeldung seitens UDO vermeidet, falls das Symbol
''(!V)AlleKapitel(!v)'' einmal nicht gesetzt ist.

(!HINTS)

!begin_enumerate
!item Es sind maximal (!MAXDEFINE) Symbole erlaubt.

!item Der Bezeichner eines Symbols darf maximal (!MAXSYMLEN) Zeichen lang sein.
!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
Symbols are user-defined variables which can be set with the (!KW [set])
command or via the command line with the (!V)-D(!v) option. Symbols can be
deleted with the (!KW [unset]) command. If a symbol is set you can test
with the query commands (!KW [ifset]) and (!KW [ifnset]).

Symbols can be used for different purposes. In the following example I will
show you how to make a destination file with a different contents depending
on set symbols.

Assuming that you have written a soure file that contains three chapters,
the first two chapters have been finished and you are still working on the
third chapter. To mimize the conversion time of UDO you want only to convert
the last chapter if the symbol ''(!V)AllChapters(!v)'' is set:

!begin_quote
!vinclude (!EXAMPLES)symbol1.ui
!end_quote

If you start UDO as you without setting the symbol it will make a
destination file that contains all chapters. If you set the symbol via
adding the option ''(!T)-D~AllChapters(!t)'' you will get a destination file
that contains only the last chapter.

You can even do more. If you use more symbols you can make destination files
with only one, some or all chapters. If you use the following example and
you call UDO with the option ''(!T)-D~Chapter1(!t)'' you will get only the
first chapter. If you call UDO with the options ''(!T)-D~Chapter1(!t)'' and
''(!T)-D~Chapter2(!t)'' you will get a destination file with the first and
second chapter. If you call UDO with the option ''(!T)AllChapters(!t)'' you
will get a complete destination file:

!begin_quote
!vinclude (!EXAMPLES)symbol2.ui
!end_quote

As I descriped at the beginning of this section you can delete symbols with
the (!KW [unset]) command.

If you want to avoid that all chapters are saved in the destination file you
can add the following lines to the beginning of your source file. Here the
symbol ''(!V)AllChapters(!v)'' will be deleted if it's set:

!begin_quote
!vinclude (!EXAMPLES)symbol3.ui
!end_quote

In first place it will be testet if the symbol is set. If you don't test the
symbol UDO will print an error message if you want to delete an unused
symbol.

(!HINTS)

!begin_enumerate
!item You may use up to (!MAXDEFINE) symbols.

!item The name of a symbol may be up to (!MAXSYMLEN) characters long.
!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Indizes
!endif
!iflang [english]
!begin_node Indices
!endif
!html_name indices.html

!index (!kw [index])
!index (!kkw [idx])
!index (!kkw [index])

!iflang [german]
Um in einem Quelltext Einträge für ein Indexregister anzugeben, gibt es
den Befehl (!KW [index]) und die Platzhalter (!KKW [idx]) und (!KKW [index]). Indizes
können und sollten mehrfach angegeben werden.

Der Befehl zur Angabe eines Indexeintrags lautet folgendermaßen:

!begin_quote
!vinclude (!EXAMPLES)index1.ui
!end_quote

Der Indexeintrag erscheint dann im Index von (!LaTeX), im Index des mit
Plain-(!TeX) bearbeiteten Texinfo-Files, im Index des ST-Guide-Hypertextes
sowie im Stichwortverzeichnis der Textverarbeitung, mit der man die
RTF-Datei importiert. Bei WinHelp erscheint der Indexeintrag im
Suchen-Dialog.

Um einen mehrstufigen Indexeintrag anzulegen, benutzt man ein doppeltes
Ausrufezeichen als Trennung der einzelnen Stufen. Es werden bis zu drei
Stufen unterstützt. Mehrstufige Indizes sollte man dann einsetzen,
falls man davon ausgehen kann, dass der Leser bei der Suche nach einem
Wort auf verschiedene Art und Weise im Indexregister nachschaut.

Falls Sie denken, dass der Leser bei der Suche nach dem Wort
""Zeilenabstand"" im Index auch unter "Abstand" nachschauen wird,
sollten Sie beide Indexeinträge vornehmen.

!begin_quote
!vinclude (!EXAMPLES)index2.ui
!end_quote

!smallskip

Bei der Platzhalterversion können zwischen einem und vier Parameter
benutzt werden. Die folgenden Beispiele zeigen, wie die Umsetzung nach
(!LaTeX), WinHelp und RTF erfolgt:

!begin_xlist [LaTeX:] !short
!item [UDO:]   ein (!KK2W [idx] [[Index!!]])
!item [LaTeX:] ein Index\index{Index}
!item [RTF:]   ein {\xe\v Index}Index
!item [Win:]   ein {K{\footnote K Index}}Index
!item [sonst:] ein Index

!item [UDO:]   ein (!KK2W [idx] [[Wort!!] [Index!!]])
!item [LaTeX:] ein Wort\index{Index}
!item [RTF:]   ein {\xe\v Index}Wort
!item [Win:]   ein {K{\footnote K Index}}Wort
!item [sonst:] ein Wort

!item [UDO:]   ein (!KK2W [idx] [[Wort!!] [Index!!] [Subindex!!]])
!item [LaTeX:] ein Wort\index{Index!Subindex}
!item [RTF:]   ein {\xe\v Index, Subindex}Wort
!item [Win:]   ein {K{\footnote K Index, Subindex}}Wort
!item [sonst:] ein Wort

!item [UDO:]   ein (!KK2W [idx] [[Wort!!] [Index!!] [Subindex!!] [Subsubindex!!]])
!item [LaTeX:] ein Wort\index{Index!Subindex!Subsubindex}
!item [RTF:]   ein {\xe\v Index, Subindex, Subsubindex}Wort
!item [Win:]   ein {K{\footnote K Index, Subindex, Subsubindex}}Wort
!item [sonst:] ein Wort
!end_xlist

!smallskip

(!HINTS)

!begin_enumerate
!index (!kw [no_index])
!item Die Umwandlung von Indizes lässt sich durch den Schalter (!KW [no_index])
im Vorspann unterbinden.

!index (!kw [use_alias_inside_index])
!index (!kw [use_label_inside_index])
!index (!kw [use_nodes_inside_index])
!item Kapitelüberschriften, Labels und Aliase gelangen standardmäßig
bei keinem Format in den Index. Sie können dies allerdings
automatisch von UDO erledigen lassen, indem Sie die Schalter
!KW [use_nodes_inside_index]), (!KW [use_label_inside_index]) und
(!KW [use_alias_inside_index]) im Vorspann setzen.

!index (!kw [ignore_index])
!item Steht in einem Kapitel der Schalter (!KW [ignore_index]), so gelangt die
Überschrift nicht in den Index. Auch dann nicht, wenn man den
Schalter (!KW [use_nodes_inside_index]) verwendet.

!index Makeindex
!item Wenn man nach (!LaTeX) umwandelt und Index-Befehle verwendet, so
fügt UDO in das (!LaTeX)-File die für das Programm ""Makeindex""
nötige Befehle ein. Sonderzeichen in den Indizes werden bereits
speziell für Makeindex angepasst.

!item Die jeweiligen Parameter werden also durch eckige Klammern
eingefasst. Falls man in einem Parameter eine schließende eckige
oder runde Klammer benutzen möchte, so muss deren Wirkung mit
einem Ausrufezeichen aufgehoben werden. Geschieht dies nicht, so
denkt UDO, der Parameter oder der Index-Befehl wäre bereits
beendet. Ein Beispiel:

!begin_quote
!begin_verbatim
Falsch:  (!idx [Copyright (c) 1995])
Richtig: (!idx [Copyright (c!) 1995])
!end_verbatim
!end_quote

!end_enumerate

!endif
# ------------------------------------------------------------------------------
!iflang [english]
To add entries for the index you can use the (!KW [index]) command
or the (!KKW [idx) or (!KKW [index]) placeholders. You can and should use these
commands as often as possible.

To add an entry with the (!KW [index]) command use it this way:

!begin_quote
!vinclude (!EXAMPLES)index1.ui
!end_quote

The entry appears inside the index of (!LaTeX),
inside the index of a Texinfo file that was printed with (!TeX),
inside the index of an ST-Guide hypertext,
inside the search dialog of Windows Help and
inside the index of an RTF file.

To insert a multi-index you can separate the index entries with a double
exclamation mark. You can use up to three indices in one line. You should
use multi-indices when it's obvious that a potential reader looks for an
entry in different ways.

If you think that a reader might look for ""Index entry"" or ""Entry,
Index"" you should use the following index commands:

!begin_quote
!vinclude (!EXAMPLES)index2.ui
!end_quote

!smallskip

If you use the placeholder (!KKW [idx]) you can use up to four
parameters. The following examples show how the commands are converted for
(!LaTeX), Windows Help and RTF:

!begin_xlist [LaTeX:] !short
!item [UDO:]   an (!KK2W [idx] [[entry!!]])
!item [LaTeX:] an entry\index{entry}
!item [RTF:]   an {\xe\v entry}entry
!item [Win:]   an {K{\footnote K entry}}entry
!item [else:]  an entry

!item [UDO:]   a (!KK2W [idx] [[word!!] [entry!!]])
!item [LaTeX:] a word\index{entry}
!item [RTF:]   a {\xe\v Index}Wort
!item [Win:]   a {K{\footnote K entry}}word
!item [else:]  a word

!item [UDO:]   a (!KK2W [idx] [[word!!] [entry!!] [subentry!!]])
!item [LaTeX:] a word\index{entry!subentry}
!item [RTF:]   a {\xe\v entry, subentry}word
!item [Win:]   a {K{\footnote K entry, subentry}}word
!item [else:]  a word

!item [UDO:]   a (!KK2W [idx] [[word!!] [entry!!] [subentry!!] [subsubentry!!]])
!item [LaTeX:] a word\index{entry!subentry!subsubentry}
!item [RTF:]   a {\xe\v entry, subentry, subsubentry}word
!item [Win:]   a {K{\footnote K entry, subentry, subsubentry}}word
!item [else:]  a word
!end_xlist

!smallskip

(!HINTS)

!begin_enumerate
!index (!kw [no_index])
!item The conversion of these index commands can be suppressed with the
switch (!KW [no_index]) inside the preamble.

!index (!kw [use_alias_inside_index])
!index (!kw [use_label_inside_index])
!index (!kw [use_nodes_inside_index])
!item Chapter names, labels and aliases aren't added to the index in no
destination format. But you can automatize this with the following switches:
(!KW [use_nodes_inside_index]),
(!KW [use_label_inside_index]) and
(!KW [use_alias_inside_index]).

!index (!kw [ignore_index])
!item If a chapter contains the command (!KW [ignore_index]) the chapter
name won't be added to the index even if you use the switch
(!KW [use_nodes_inside_index]) inside the preamble of your source file.

!index Makeindex
!item If you convert to (!LaTeX) and you use (!KW [index]) commands inside
your source file UDO will add the commands that are necessary for
""Makeindex"" automatically. Special characters of an index entry are
converted especially for ""Makeindex"".

!item You have to use the parameters inside brackets. If you want to use a
bracket inside a parameter you have to insert a ''!''. If you don't
UDO will think that the placeholder ended. An example:

!begin_quote
!begin_verbatim
wrong: (!idx [Copyright (c) 1995])
right: (!idx [Copyright (c!) 1995])
!end_verbatim
!end_quote

!end_enumerate
!endif

!end_node

################################################################################
!iflang [german]
!begin_node Abfragebefehle
!endif
!iflang [english]
!begin_node Query commands
!endif
!html_name queries.html

!iflang [german]
In vielen Fällen ist es nötig, direkt im Quelltext verschiedene
Passagen für die jeweiligen Formate oder Sprachen anzugeben. UDO
bietet daher einen Satz Befehle, mit denen diese Abfragen erfolgen
können.

!index (!kw [if])
!index (!kw [else])
!index (!kw [endif])
Mit einem (!KW [if])-Befehl wird eine Abfrage eingeleitet. Liefert die
Abfrage ein wahres Ergebnis, so werden alle Zeilen bis zum Befehl
(!KW [endif]) bzw. (!KW [else]) von UDO verarbeitet. Liefert die Abfrage ein
falsches Ergebnis, so werden alle Zeilen bis zu (!KW [endif]) bzw. (!KW [else])
ignoriert.
!endif

!iflang [english]
In some cases you might want to insert some special passages for a
destination format, language or operating system.

UDO supports some commands you can use to check the destination format,
language, operating system and the existence of symbols.

!index (!kw [if])
!index (!kw [else])
!index (!kw [endif])
With an (!KW [if]) command you start a query. If the query returns a true value
the following lines will be converted until UDO reads the (!W [endif]) or
(!KW [else]) commands. If the query returns a false value UDO will ignore
the following lines until (!KW [endif]) or (!KW [else]).
!endif

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!iflang [german]
!begin_node Abfrage des Zielformats
!endif
!iflang [english]
!begin_node Testing the destination format
!endif
!html_name queries_dest.html

!iflang [german]
!index Abfrage !! Zielformat
!index Zielformat !! Abfrage
!index (!kw [ifdest])

Mit dem Befehl (!KW [ifdest]) können Sie das Format abfragen, welches von UDO
ausgegeben wird. Zur Abfrage verwenden Sie die Kürzel der Ausgabeformate:

!include formattb.ui

Zusätzlich zu den hier genannten Zeichenketten können jeweils auch
""all"" und ""none"" verwendet werden. Bei ""all"" liefert eine Abfrage
immer ein wahres Ergebnis, bei ""none"" immer ein falsches.

Das folgende Beispiel zeigt, wie man den Titel der Windows-Hilfe
anders als für die anderen Formate setzt:

!begin_quote
!begin_verbatim
!ifdest [win]
!docinfo [title] Die Windows-Hilfe zu
!else
!docinfo [title] Die Anleitung zu
!endif
!end_verbatim
!end_quote

!index (!kw [ifndest])
Verwandt mit dem (!KW [ifdest])-Befehl ist der Befehl (!KW [ifndest]). Hier wird
abgefragt, ob man (!I)nicht(!i) in ein Format ausgibt. Das obige Beispiel lässt
sich demnach auch folgendermaßen darstellen:

!begin_quote
!begin_verbatim
!ifndest [win]
!docinfo [title] Die Anleitung zu
!else
!docinfo [title] Die Windows-Hilfe zu
!endif
!end_verbatim
!end_quote

Bei den Abfragen können Sie natürlich auch mehrere Formatkürzel
angeben. Die Abfrage liefert dann ein wahres Ergebnis, wenn mindestens
ein Kürzel mit dem Ausgabeformat übereinstimmt. Mit folgender Abfrage
können Sie z.B. den Hypertextformaten einen besonderen Titel
verpassen:

!begin_quote
!begin_verbatim
!ifdest [win,html,stg,htag]
!docinfo [title] Der Hypertext zu
!else
!docinfo [title] Die Anleitung zu
!endif
!end_verbatim
!end_quote

!endif


!iflang [english]
!index Query !! Destination format
!index Destination format !! Query
!index (!kw [ifdest])

With the command (!KW [ifdest]) you can test the destination format. Use
the following abbreviations:

!include formattb.ui

In addition to these abbreviations you can use ""all"" and ""none"". A query
with ""all"" always returns a true value, a query with ""none"" always
returns a false value.

The following example shows how to set a special document title for Windows
Help:

!begin_quote
!begin_verbatim
!ifdest [win]
!docinfo [title] The Windows Help to
!else
!docinfo [title] The guide to
!endif
!end_verbatim
!end_quote

!index (!kw [ifndest])
The (!KW [ifndest]) command is related to (!KW [ifdest]). But
(!KW [ifndest]) will check if you do (!I)not(!i) convert to the given
destination format. Thus you can write the upper example this way, too:

!begin_quote
!begin_verbatim
!ifndest [win]
!docinfo [title] The guide to
!else
!docinfo [title] The Windows Help to
!endif
!end_verbatim
!end_quote

You can pass more than one abbreviation to the query command. If you do so
the query returns a true value if one or more abbreviations match the
current destination format. The next example shows how to set a special
document title for hypertext formats:

!begin_quote
!begin_verbatim
!ifdest [win,html,stg,htag]
!docinfo [title] The hypertext to
!else
!docinfo [title] The guide to
!endif
!end_verbatim
!end_quote
!endif

!end_node

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!iflang [german]
!begin_node Abfrage der Sprache
!endif
!iflang [english]
!begin_node Testing the destination language
!endif
!html_name queries_lang.html


!iflang [german]
!index Abfrage !! Sprache
!index Sprache !! Abfrage
!index (!kw [iflang])

Mit dem Befehl (!KW [iflang]) können Sie die Sprache abfragen, die für die
Ausgabe der Zieldatei verwendet wird. Hierbei gelten folgende Zeichenketten:

!index Sprache
!label Sprache
!label Sprachen
!begin_xlist [swedish:] !short
!item [danish:]   Dänisch
!item [dutch:]   Holländisch
!item [english:] Englisch
!item [french:]  Französisch
!item [german:]  Deutsch
!item [italian:] Italienisch
!item [spanish:] Spanisch
!item [swedish:] Schwedisch
!end_xlist

Zusätzlich zu den hier genannten Zeichenketten können jeweils auch
""all"" und ""none"" verwendet werden. Bei ""all"" liefert eine Abfrage
immer ein wahres Ergebnis, bei ""none"" immer ein falsches.

Bei kleineren Texten können Sie so z.B. gleich alle Übersetzungen in
einem Quelltext unterbringen:

!begin_quote
!begin_verbatim
!iflang [german]
!docinfo [title] Die Benutzeranleitung zu
!else
!docinfo [title] The User's Guide to
!endif
!end_verbatim
!end_quote

!index (!kw [ifnlang])
Auch hier gibt es den verwandten Befehl (!KW [ifnlang]), der abfragt, ob
(!I)nicht(!i) in eine Sprache ausgegeben wird. Das obige Beispiel ließe sich
also auch so ausdrücken:

!begin_quote
!begin_verbatim
!ifnlang [german]
!docinfo [title] The User's Guide to
!else
!docinfo [title] Die Benutzeranleitung zu
!endif
!end_verbatim
!end_quote

Selbstverständlich können Sie auch bei dieser Abfrage wieder mehrere
Sprachkürzel angeben. Ein Beispiel brauche ich dafür wohl nicht mehr
angeben.

!endif


!iflang [english]
!index Query !! Language
!index Language !! Query
!index (!kw [iflang])

Using the (!KW [iflang]) command you can test the language UDO will use in
the destination file. Use the following words to test the language:

!index Language
!label Language
!label language
!label languages
!begin_xlist [swedish:] !short
!item [danish:]   Danish
!item [dutch:]   Dutch
!item [english:] English
!item [french:]  French
!item [german:]  German
!item [italian:] Italian
!item [spanish:] Spanish
!item [swedish:] Swedish
!end_xlist

In addition to these words you can use ""all"" and ""none"". A query
with ""all"" always returns a true value, a query with ""none"" always
returns a false value.

If you write a small documentation you can enter all langaguages to a single
source file:

!begin_quote
!begin_verbatim
!iflang [german]
!docinfo [title] Die Benutzeranleitung zu
!else
!docinfo [title] The User's Guide to
!endif
!end_verbatim
!end_quote

!index (!kw [ifnlang])
The (!KW [ifnlang]) command is related to (!KW [iflang]). But
(!KW [ifnlang]) will check if you do (!I)not(!i) convert to the given
destination language. Thus you can write the upper example this way, too:

!begin_quote
!begin_verbatim
!ifnlang [german]
!docinfo [title] The User's Guide to
!else
!docinfo [title] Die Benutzeranleitung zu
!endif
!end_verbatim
!end_quote

It goes without saying that you can test more than one language.
!endif

!end_node

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!iflang [german]
!begin_node Abfrage von Symbolen
!endif
!iflang [english]
!begin_node Testing symbols
!endif
!html_name queries_symbols.html

!iflang [german]
!index Abfrage !! Symbole
!index Symbole !! Abfrage
!index (!kw [ifnset])
!index (!kw [ifset])

Mit dem Befehl (!KW [ifset]) können Sie testen, ob Symbole gesetzt sind, mit
dem Befehl (!KW [ifnset]), ob Symbole nicht gesetzt sind.

!index (!kw [set])
!index (!kw [unset])
!index -D
!index -U
Wie Sie bereits wissen, können Sie Symbole mit der Kommandozeilenoption
-D und mit dem Befehl (!KW [set]) setzen und mit dem Befehl
(!KW [unset]) wieder löschen.

Im folgenden Beispiel wird abgefragt, ob das Symbol Farbbilder gesetzt
ist und entsprechend ein passendes Bild eingebunden:

!begin_quote
!begin_verbatim
!ifset [Farbbilder]
!image colour/tiger
!else
!image mono/tiger
!endif
!end_verbatim
!end_quote

Wenn Sie nun UDO mit der Option -D Farbbilder aufrufen bzw. vor der
obigen Abfrage das Kommando (!KW [set] [Farbbilder]) in den Quelltext einbauen,
so bindet UDO ein Farbbild, andernfalls ein monochromes Bild ein.

!endif


!iflang [english]
!index Query !! Symbols
!index Symbols !! Query
!index (!kw [ifnset])
!index (!kw [ifset])

With the (!KW [ifset]) command you can test if a symbol was set in the
preamble or via command line. The (!KW [ifnset]) tests if a symbol is
(!I)not(!i) set.

!index (!kw [set])
!index (!kw [unset])
!index -D
!index -U
As you know you can set symbols via command line by using the option
(!V)-D(!v) and by the command (!I)!/set(!i).

The following example shows how to test the symbol ''(!V)UseColour(!v)'' and
to display the right image:

!begin_quote
!begin_verbatim
!ifset [UseColor]
!image colour/tiger
!else
!image mono/tiger
!endif
!end_verbatim
!end_quote

If you call UDO with passing the option (!T)-D~UseColor(!t) or if you set
the symbol with (!KW [set] [UseColor]) inside the preamble UDO will display
the color image instead of the monochrome image.
!endif

!end_node

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!iflang [german]
!begin_node Abfrage des Betriebssystems
!endif
!iflang [english]
!begin_node Testing the operating system
!endif
!html_name queries_os.html

!iflang [german]
!index Abfrage !! Betriebssystem
!index Betriebssystem !! Abfrage
!index (!kw [ifos])

Mit dem Befehl (!KW [ifos]) können Sie das Betriebssystem abfragen, auf dem
UDO läuft. Hierbei gelten folgende Zeichenketten:

!index Betriebssystem
!label Betriebssystem
!begin_xlist [nextstep:] !short
!item [beos:]     BeOS
!item [dos:]      DOS
!item [hpux:]     HP-UX
!item [linux:]    Linux
!item [macos:]    Mac~OS
!item [macosx:]   Mac~OS~X
!item [nextstep:] NeXTStep
!item [sinix:]    SINIX
!item [sunos:]    SunOS
!item [tos:]      TOS
!item [win:]      Windows (32-Bit)
!end_xlist

Auch hier gilt, dass zusätzlich zu den genannten Zeichenketten auch
""all"" und ""none"" verwendet werden können.

!index (!kw [ifnos])
Wiederum existiert ein verwandter Befehl namens (!KW [ifnos]), der abfragt,
ob UDO (!I)nicht(!i) auf dem angegebenen Betriebssystem läuft.

!endif


!iflang [english]
!index Query !! Operating system
!index Operating system !! Query
!index (!kw [ifos])

With the (!KW [ifos]) command you can test the operating system UDO is
running on. Use the following words for this kind of query:

!index Operating systems
!label Operating systems
!begin_xlist [nextstep:] !short
!item [beos:]     BeOS
!item [dos:]      DOS
!item [hpux:]     HP-UX
!item [linux:]    Linux
!item [macos:]    Mac~OS
!item [macosx:]   Mac~OS~X
!item [nextstep:] NeXTStep
!item [sinix:]    SINIX
!item [sunos:]    SunOS
!item [tos:]      TOS
!item [win:]      Windows (32 bit)
!end_xlist

Like in the other queries you can use ""all"" and ""none"", too.

!index (!kw [ifnos])
The related command called (!KW [ifnos]) tests if UDO does (!I)not(!i)
run on the given operating system.
!endif

!end_node

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!end_node


################################################################################
!iflang [german]
!begin_node Formatspezifische Befehle
!endif
!iflang [english]
!begin_node Special commands
!endif
!html_name format-specific_commands.html

!iflang [german]
UDO bietet das (!KW [raw])-Kommando und die raw-Umgebung an, mit
denen es möglich ist, Zeilen nur dann auszugeben, wenn man in ein
bestimmtes Format umwandelt.

In diesen Zeilen können dann spezielle Befehle für ein Format
angegeben werden, die UDO dann 1:1, also Umwandlung von Sonderzeichen
und ohne Einrückungen, ausgibt.

Bei dem (!KW [raw])-Befehl spielen Kürzel eine große Rolle.
Hier eine Übersicht, welches Kürzel für welches Ausgabeformat benutzt
werden kann:

!label Ausgabeformat
!include formattb.ui

Um beispielsweise eine Zeile nur in das ASCII-Format auszugeben, gibt
man folgendes an:

!begin_quote
!vinclude (!EXAMPLES)asc1.ui
!end_quote

Um eine Zeile in allen Formaten außer dem ASCII-Format auszugeben,
gibt man folgendes an:

!begin_quote
!vinclude (!EXAMPLES)asc2.ui
!end_quote

Der Inhalt dieser Zeilen wird ohne das Kommando selbst, ohne
Berücksichtigung von UDO-Kommandos und ohne Umwandlung von
Sonderzeichen ausgegeben. Diese Zeilen sorgen - genau wie alle
Kommandos - auch dafür, dass ein Absatz beendet wird. Diese Kommandos
eignen sich also nicht dazu, mittem in einem Absatz unterschiedliche
Sätze einzufügen!

Dieses Kommandos können dazu dienen, formatspezifische Kommandos
einzufügen. Im folgenden Beispiel wird gezeigt, welche Kommandos man in
einen Quelltext einfügen muss, damit (!LaTeX) weiß, mit welchem Stil ein
Dokument auszudrucken ist und damit es einen Index erzeugt:

!begin_quote
!vinclude (!EXAMPLES)latex/index.ui
!end_quote

!begin_description

!label raw-Umgebung
!item [Die raw-Umgebung]

Will man größere Blöcke im jeweiligen Format angeben, wäre es ziemlich
mühsam, wenn man jede Zeile mit einem Kürzel beginnen müsste.

!index !begin_raw
!index !end_raw
Daher bietet UDO die "raw-Umgebung" an. Sie wird mit dem Befehl
(!KW [begin_raw]) begonnen und mit dem Befehl (!KW [end_raw]) beendet.

Genau wie der Inhalt der Zeilen, die mit den obigen Formatkürzeln
begonnen werden, gibt UDO diese Zeilen ohne Anpassung von Sonderzeichen
und ohne Berücksichtigung von UDO-Befehlen direkt aus.

Zusammen mit der Möglichkeit, das Ausgabeformat abzufragen, in das ein
Quelltext umgewandelt wird, können spezielle Befehle ausgegeben werden.
Anwendungsbeispiele wären z.B. komplizierte Tabellen für (!LaTeX) oder
Formulare für HTML. Letzteres soll hier aufgezeigt werden:

!index HTML !! <FORM>
!index <FORM>
!begin_quote
!vinclude (!EXAMPLES)raw1.ui
!end_quote

Um noch einmal den Unterschied zur verbatim-Umgebung klarzumachen: Der
Text einer verbatim-Umgebung wird 1:1 (!I)dargestellt(!i). Würden Sie
das obige Formular in eine verbatim-Umgebung packen, würden Sie im
HTML-Browser lediglich den Quelltext des Formulars sehen! Nur bei der
Verwendung der raw-Umgebung wird das Formular auch als solches vom
HTML-Browser dargestellt.

Eine weitere Möglichkeit dazu bietet der Befehl (!KW [rinclude]).

!label comment-Umgebung
!item [Die comment-Umgebung]

Will man größere Blöcke als Kommentar in die Ausgabedatei schreiben, wäre es ziemlich
mühsam, wenn man jede Zeile mit einem Kürzel beginnen müsste.

!index !begin_comment
!index !end_comment
Daher bietet UDO die "comment-Umgebung" an. Sie wird mit dem Befehl
(!KW [begin_comment]) begonnen und mit dem Befehl (!KW [end_comment]) beendet.

Genau wie der Inhalt der Zeilen, die mit (!KW [comment])
begonnen werden, gibt UDO diese Zeilen ohne Anpassung von Sonderzeichen
und ohne Berücksichtigung von UDO-Befehlen als Kommentar aus.

Eine weitere Möglichkeit dazu bietet der Befehl (!KW [cinclude]).

!end_description

!endif
# ------------------------------------------------------------------------------
!iflang [english]
UDO offers you the (!KW [raw]) command and the raw environment to insert
special commands for a specific format. So you are able to insert small
passages or huge blocks written in the destination format (like special
tables for (!LaTeX) or HTML).

You have to use abbreviations of the destination formates if you want
to use the (!KW [raw]) command:

!label Abbreviations
!include formattb.ui

The next example shows how to insert a line that will only be printed
for the ASCII format:

!begin_quote
!vinclude (!EXAMPLES)asc1.ui
!end_quote

The next example shows how to insert a line that appears in all formats
except ASCII:

!begin_quote
!vinclude (!EXAMPLES)asc2.ui
!end_quote

The contents of the line will be printed without the command and
without converting the text of the line. These commands split up text
into different paragraphs like all the other UDO commands. So these
commands aren't useful to insert a line into a paragraph!

You can use these commands to insert special commands like parts of
the preamble for (!LaTeX):

!begin_quote
!vinclude (!EXAMPLES)latex/index.ui
!end_quote

!begin_description

!label raw environment
!item [The raw environment]

!index !begin_raw
!index !end_raw

But it happens that you want to insert large passages only for one
format with special commands. You could add one of the upper commands
at the beginning of each line, sure. But to make it easier for you to insert
these passages UDO has a special environment for this case: the raw
environment.

Together with the possibility to check the current destination format you
can e.g. insert complex tables for (!LaTeX) or forms for HTML with the raw
environment. The following example shows how to enter HTML forms to your
source code:

!index HTML !! <FORM>
!index <FORM>
!begin_quote
!vinclude (!EXAMPLES)raw1.ui
!end_quote

To say it once more: Text that is part of a raw environment is printed ""as
is"". That means that it's not converted and not indented. If you will
insert the upper form source code into a verbatim environment you will
see the source code in an HTML browser. But if you insert it inside a raw
environment you will see the form!

Another choice you have is to use the command (!KW [rinclude]).

!label comment environment
!item [The comment environment]

If you want to write larger blocks in the output file as comments,
it would be troublesome to start each line with a command.

!index !begin_comment
!index !end_comment
Therefore UDO offers the "comment environment". It will be started with the
command (!KW [begin_comment]) and ends with the command (!KW [end_comment]).

As with the text of lines that start with the (!KW [comment]) command,
UDO will write text inside this environment as comment to the destination
file without converting special chars.

Another choice you have is to use the command (!KW [cinclude]).

!end_description
!endif

!end_node

!end_node

################################################################################
################################################################################
!end_node
