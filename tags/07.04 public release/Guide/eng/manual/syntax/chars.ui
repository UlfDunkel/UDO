!subnode Special characters

############################################################

!subsubnode Double quotes

!index Typographical quotes
!index Quotes !! typographical

Double quotes of the source file will be converted to typographical quotes
if they are supported by the destination format. The following ASCII
simulation demonstrates how it works:

!begin_quote
!begin_verbatim
Double ""quotes""

       66       99
Double    quotes
!end_verbatim
!end_quote

If you want to display two quotes you have to use (!T)((""))text((""))(!t)
instead.

(!HINTS)

!begin_enumerate

!index !/no_quotes
!item The conversion of these double quotes can be suppressed using the
switch called (!I)!/no_quotes~[~](!i).

!item When converting to RTF special RTF commands will be used.

!end_enumerate

############################################################

!subsubnode Double apostrophes

Like double quotes UDO can convert double apostrophes into typographical
apostrophes:

!begin_quote
!begin_verbatim
double ''apostrophes''
!end_verbatim
!end_quote

will become

!begin_quote
double ''apostrophes''
!end_quote

If you want to display two apostrophes you have to use
(!T)((''))text((''))(!t) instead.

!index !/no_quotes

(!HINT) The switch (!I)!/no_quotes~[~](!i) switches off the conversion of
these double apostrophes, too.

############################################################

!subsubnode Non breaking spaces

!index Blanks
!index Tilde

If you want to insert non-breaking spaces between two words you have to use
the tilde ((!T)!~(!t)). Non-breaking spaces are also useful to stop UDO and
the other formats from breaking lines between two words.

Converting to an ASCII format UDO replaces this tildes by blanks. Converting
to other formats UDO replaces this tildes by commands that have the same
effect.

!autoref [off]
!begin_xlist [WinHelp:] !short
!item	[(!LaTeX):]	(!T)!~(!t)
!item	[HTML:]		(!T)&nbsp;(!t)
!item	[RTF:]		(!T)\!~(!t)
!item	[WinHelp:]	(!T)\!~(!t)
!end_xlist
!autoref [on]

If you want to display a tilde you have to use (!T)!!~(!t) instead.

(!HINT) If you use a tilde inside an external link UDO won't convert it.

############################################################

!subsubnode Dashs

UDO supports --- did you think anything else --- dashs like in this
sentence.

Dashs are supported by (!LaTeX), Windows Help and RTF. Converting to other
formats UDO will replace ''(---)'' and ''(--)'' by a single ''-''.

If you want to display three or two ''-'' you have to use (!T)((---))(!t) or
(!T)((--))(!t).

############################################################

!subsubnode Converting 8 bit chars

In an UDO source file you can use ""higher"" characters without having to
know how a character has to look like in a destination format like (!LaTeX)
or Windows Help. So you can enter a German ''ß'' without any fear, UDO
converts it for you and it knows that this has to be (!V)&szlig;(!v) for
HTML or (!V){\ss}(!v) for (!LaTeX).

UDO expects files containing chars of the system charset of your operating
system. If you run UDO on a MS-DOS computer UDO expects text files that are
written with the IBM PC character set by default. If UDO runs on an Atari
computer UDO will expect the TOS character set by default.

But UDO can manage file that are written with another character set, too.
You have simply to tell UDO which character set your source file uses with
the following commands:

!begin_ilist [!/code_mac:] !short

!index DOS character set
!index Character set !! DOS
!index !/code_dos
!item [!/code_dos:] IBM-PC, MS-DOS

!index HP-Roman-8 character set
!index Character set !! HP-Roman-8
!index !/code_hp8
!item [!/code_hp8:] HP Roman 8

!index ISO Latin 1 
!index Character set !! ISO Latin 1
!index Windows character set
!index Character set !! Windows
!index ANSI character set
!index Character set !! ANSI
!index !/code_iso
!item [!/code_iso:] ISO Latin 1, Windows ANSI

!index Macintosh character set
!index Character set !! Macintosh
!index !/code_mac
!item [!/code_mac:] Apple Macintosh

!index Atari character set
!index Character set !! Atari
!index !/code_tos
!item [!/code_tos:] Atari ST

!end_ilist

!smallskip

There are some things you have to remember. Some character sets contain
characters that aren't available in another one. So you shouldn't use
characters from the PC graphic character set or the Hebraic characters of
the Atari character set because they can't be printed in formats like
(!LaTeX), Windows Help, RTF or HTML. In this case UDO prints an error
message. You should remove these characters from your source file and find
another solution.

If source files are converted that don't use the character set of the
operating system UDO is running on the limitations are even higher. In the
first step UDO will convert the characters into ISO Latin 1. In  the second
step UDO will convert the ISO Latin 1 characters into the character set of
the current operating system. In some cases there's is no possibility to
convert the characters without any loss. In such a case UDO will print an
error message.

(!HINT) If I've forgotten any character or a character is converted in
a wrong way please send a bug report!
