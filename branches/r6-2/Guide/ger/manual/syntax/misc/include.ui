############################################################
# @(#) Verteilte Dokumente, Dirk Hagedorn, 25.10.1995
# 22.01.1996: !rinclude
############################################################

!subsubnode Verteilte Dokumente

!index !/include
!index !/vinclude
!index !/rinclude

UDO stellt Ihnen die Kommandos (!I)!/include(!i), (!I)!/vinclude(!i) und
(!I)!/rinclude(!i)
zur Verfügung, mit denen Sie die Möglichkeit erhalten, ein großes Dokument in
mehrere kleine Dateien aufzuteilen oder identische Passagen mehrfach
einzubinden.

(!I)!/include(!i) kann sowohl im Vorspann als auch im Hauptteil benutzt
werden. Dadurch besteht die Möglichkeit sowohl, Makros und
Trennvorschläge als auch Kapitel in externe Dateien auszulagern.

Um den Inhalt von Dateien als Klartext darstellen zu können, bedient man
sich des Kommandos (!I)!/vinclude(!i) (""verbatim include""). Tip: Das
Kommando (!I)!/vinclude(!i) eignet sich sehr gut, um Sourcecodes oder
Headerfiles darzustellen.

Falls man direkte Befehle für ein Format nachladen möchte, so kann man sich
des Kommandos (!I)!/rinclude(!i) (""raw include"") bedienen. Tip: Dieser
Befehl eignet sich im Zusammenhang mit dem (!I)!/ifdest(!i)-Kommando dazu,
um z.B. spezielle (!LaTeX)-Tabellen oder HTML-Formulare einzubinden.

Diese Dokumentation macht übrigens intensiven Gebrauch von diesen Möglichkeiten.
Die Datei ''(!V)udo.u(!v)'' enthält lediglich wichtige Einstellungen und
etliche (!I)!/include(!i)-Kommandos, jedoch keine einzige Zeile
""sichtbaren"" Textes.

(!B)Mögliche Anwendungsgebiete:(!b)

!begin_enumerate

!item	Bei umfangreichen Texten empfiehlt es sich, die Kapitel in
eigenen Dateien zu halten und von einer Hauptdatei mittels
(!I)!/include(!i) an passender Stelle einzubinden. Dies hat den
Vorteil, daß man durch einfaches Verschieben des
(!I)!/include(!i)-Befehls dem Text eine neue Struktur geben zu können.

!item	Teilt man Texte in mehrere Dateien auf, die von einer
Hauptdatei nachgeladen werden, kann dies die Fehlersuche erheblich
beschleunigen. Durch auskommentieren der Zeilen, die bereits korrekte
Kapitel einladen, kann man sofort sehen, wie UDO das zuletzt
bearbeitete Kapitel umwandelt.

!item	In Verbindung mit Makros kann man sich standardisierte Texte
erstellen, die man für mehrere Programmbeschreibungen verwenden kann.
Z.B. tauchen in Programmdokumentationen immer wieder die Kapitel auf,
die sich mit dem Haftungsausschluß oder den Warenzeichen anderer
Produkte befassen.

!item	Beim Schreiben eines Textes kann die Arbeit auf beliebig
viele Personen aufgeteilt werden. Jeder Autor kann dann in aller Ruhe
seine Texte bearbeiten und austesten. Erst kurz vor Vollendung des
Gesamtwerks faßt ein Projektleiter alle Texte zu einem zusammen.

UDO wird beispielsweise dazu eingesetzt, ein Online-Computermagazin zu
erstellen. Der Projektleiter gibt Vorgaben, wie das Layout der
einzelnen Artikel auszusehen hat, damit ein einheitliches
Erscheinungsbild gewährleistet wird. Jedes Projektmitglied schreibt nun
seinen Artikel. Ist ein Artikel fertig, wird er dem Projektleiter zur
Verfügung gestellt. Dieser kann nun nach und nach das Magazin
komplettieren.

!index !/tabwidth

!item	Mit (!I)!/vinclude(!i) lassen sich in Verbindung mit
(!I)!/tabwidth(!i) sehr leicht Sourcecodes oder Headerfiles darstellen,
falls man beispielsweise eine Library oder eine Programmiersprache
beschreiben möchte.

!end_enumerate

