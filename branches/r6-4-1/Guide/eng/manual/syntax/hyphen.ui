############################################################
# @(#) Syllabifiction, Dirk Hagedorn, 1996/04/16
############################################################

!subnode Syllabification

UDO supports a semi-automatic syllabification for ASCII, ST-Guide, Pure C
Help and Manualpage. ""Semi-automatic"" means that you have to tell UDO at
which position a word can be divided into two pieces.

You have two possibilities to set the syllabification patterns:

!index !/-
!index !/hyphen

!begin_enumerate !short
!item	Local definition (""!/-"")
!item	Global definition using the (!I)!/hyphen(!i) command
!end_enumerate

When converting to (!LaTeX) the marks will be replaced by ""\-"". Then
(!LaTeX) knows that a word can be split at these positions.

When converting to RTF, Windows Help and HTML the marks are deleted.

!index !//-
If you want to display (!T)!/-(!t) you have to use (!T)!//-(!t).


############################################################

!subsubnode Local definition of syllabification patterns

You can set the syllabification marks in the source file using ""!/-"". At
these marks UDO is allowed to split up a word. A short example:

!begin_quote
!begin_verbatim
semi-automatic syl!-labi!-fi!-cation
!end_verbatim
!end_quote

When converting to (!LaTeX) UDO replaces all ""!/-"" by ""\-"". So it would
look like ""syl\-labi\-fi\-cation"".

Converting to ASCII, ST-Guide, Pure C Help and Manualpage the word is split
up into different parts if it doesn't have enough place at the end of a
line. So it can look like ""syl- labification"", ""syllabi- fication"" or
""syllabifi- cation""

When converting to other formats the marks are simply deleted.


############################################################

!subsubnode Global definition of syllabification patterns

!index !/hyphen
You can set these marks at the beginning of a source file with the
(!I)!/hyphen(!i) command for often used words. ""Global"" means that you
only have to define the marks once.

If a word hasn't enough place at the end of a line when converting to ASCII,
ST-Guide, Pure C Help or Manualpage UDO looks for a global definition in its
internal list.

In the following example I expect that the word ""documentation"" is used
many times in your source file:

!begin_quote
!begin_verbatim
!hyphen docu!-men!-ta!-tion
!end_verbatim
!end_quote

############################################################

!subsubnode Short lines

When converting to ASCII, Pure C Help, ST-Guide or Manualpage UDO can
generate a relative regular right margin due to its semi-automatic
syllabification.

The right margin becomes irregular when long words haven't enough place at
the end of a line. UDO will print a warning containing the specific word and
you should try to insert some syllabification marks.

(!HINT)

!index !/sloppy
!index !/fussy

The command (!I)!/sloppy(!i) switches of these warnings, (!I)!/fussy(!i)
switches them back on. While developing a documentation you should use
(!I)!/sloppy(!i). At the end of developing a text you should comment this
switch and you should look after warnings according short lines.
